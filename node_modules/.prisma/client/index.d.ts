
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Favorite
 * 
 */
export type Favorite = $Result.DefaultSelection<Prisma.$FavoritePayload>
/**
 * Model UserLog
 * 
 */
export type UserLog = $Result.DefaultSelection<Prisma.$UserLogPayload>
/**
 * Model AuctionLog
 * 
 */
export type AuctionLog = $Result.DefaultSelection<Prisma.$AuctionLogPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Auction
 * 
 */
export type Auction = $Result.DefaultSelection<Prisma.$AuctionPayload>
/**
 * Model OpenOrder
 * 
 */
export type OpenOrder = $Result.DefaultSelection<Prisma.$OpenOrderPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model UserAddress
 * 
 */
export type UserAddress = $Result.DefaultSelection<Prisma.$UserAddressPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model WalletLog
 * 
 */
export type WalletLog = $Result.DefaultSelection<Prisma.$WalletLogPayload>
/**
 * Model UserPayment
 * 
 */
export type UserPayment = $Result.DefaultSelection<Prisma.$UserPaymentPayload>
/**
 * Model UserWallet
 * 
 */
export type UserWallet = $Result.DefaultSelection<Prisma.$UserWalletPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Favorites
 * const favorites = await prisma.favorite.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Favorites
   * const favorites = await prisma.favorite.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.favorite`: Exposes CRUD operations for the **Favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.FavoriteDelegate<ExtArgs>;

  /**
   * `prisma.userLog`: Exposes CRUD operations for the **UserLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLogs
    * const userLogs = await prisma.userLog.findMany()
    * ```
    */
  get userLog(): Prisma.UserLogDelegate<ExtArgs>;

  /**
   * `prisma.auctionLog`: Exposes CRUD operations for the **AuctionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuctionLogs
    * const auctionLogs = await prisma.auctionLog.findMany()
    * ```
    */
  get auctionLog(): Prisma.AuctionLogDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.auction`: Exposes CRUD operations for the **Auction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auctions
    * const auctions = await prisma.auction.findMany()
    * ```
    */
  get auction(): Prisma.AuctionDelegate<ExtArgs>;

  /**
   * `prisma.openOrder`: Exposes CRUD operations for the **OpenOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpenOrders
    * const openOrders = await prisma.openOrder.findMany()
    * ```
    */
  get openOrder(): Prisma.OpenOrderDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.userAddress`: Exposes CRUD operations for the **UserAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAddresses
    * const userAddresses = await prisma.userAddress.findMany()
    * ```
    */
  get userAddress(): Prisma.UserAddressDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.walletLog`: Exposes CRUD operations for the **WalletLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletLogs
    * const walletLogs = await prisma.walletLog.findMany()
    * ```
    */
  get walletLog(): Prisma.WalletLogDelegate<ExtArgs>;

  /**
   * `prisma.userPayment`: Exposes CRUD operations for the **UserPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPayments
    * const userPayments = await prisma.userPayment.findMany()
    * ```
    */
  get userPayment(): Prisma.UserPaymentDelegate<ExtArgs>;

  /**
   * `prisma.userWallet`: Exposes CRUD operations for the **UserWallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWallets
    * const userWallets = await prisma.userWallet.findMany()
    * ```
    */
  get userWallet(): Prisma.UserWalletDelegate<ExtArgs>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Favorite: 'Favorite',
    UserLog: 'UserLog',
    AuctionLog: 'AuctionLog',
    User: 'User',
    Auction: 'Auction',
    OpenOrder: 'OpenOrder',
    Product: 'Product',
    UserAddress: 'UserAddress',
    Category: 'Category',
    WalletLog: 'WalletLog',
    UserPayment: 'UserPayment',
    UserWallet: 'UserWallet',
    Verification: 'Verification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "favorite" | "userLog" | "auctionLog" | "user" | "auction" | "openOrder" | "product" | "userAddress" | "category" | "walletLog" | "userPayment" | "userWallet" | "verification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Favorite: {
        payload: Prisma.$FavoritePayload<ExtArgs>
        fields: Prisma.FavoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findFirst: {
            args: Prisma.FavoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          findMany: {
            args: Prisma.FavoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          create: {
            args: Prisma.FavoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          createMany: {
            args: Prisma.FavoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>[]
          }
          delete: {
            args: Prisma.FavoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          update: {
            args: Prisma.FavoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.FavoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      UserLog: {
        payload: Prisma.$UserLogPayload<ExtArgs>
        fields: Prisma.UserLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          findFirst: {
            args: Prisma.UserLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          findMany: {
            args: Prisma.UserLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>[]
          }
          create: {
            args: Prisma.UserLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          createMany: {
            args: Prisma.UserLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>[]
          }
          delete: {
            args: Prisma.UserLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          update: {
            args: Prisma.UserLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          deleteMany: {
            args: Prisma.UserLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLogPayload>
          }
          aggregate: {
            args: Prisma.UserLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLog>
          }
          groupBy: {
            args: Prisma.UserLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLogCountArgs<ExtArgs>
            result: $Utils.Optional<UserLogCountAggregateOutputType> | number
          }
        }
      }
      AuctionLog: {
        payload: Prisma.$AuctionLogPayload<ExtArgs>
        fields: Prisma.AuctionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuctionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          findFirst: {
            args: Prisma.AuctionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          findMany: {
            args: Prisma.AuctionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>[]
          }
          create: {
            args: Prisma.AuctionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          createMany: {
            args: Prisma.AuctionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuctionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>[]
          }
          delete: {
            args: Prisma.AuctionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          update: {
            args: Prisma.AuctionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          deleteMany: {
            args: Prisma.AuctionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuctionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionLogPayload>
          }
          aggregate: {
            args: Prisma.AuctionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuctionLog>
          }
          groupBy: {
            args: Prisma.AuctionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuctionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuctionLogCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Auction: {
        payload: Prisma.$AuctionPayload<ExtArgs>
        fields: Prisma.AuctionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuctionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuctionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findFirst: {
            args: Prisma.AuctionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuctionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          findMany: {
            args: Prisma.AuctionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          create: {
            args: Prisma.AuctionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          createMany: {
            args: Prisma.AuctionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuctionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>[]
          }
          delete: {
            args: Prisma.AuctionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          update: {
            args: Prisma.AuctionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          deleteMany: {
            args: Prisma.AuctionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuctionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuctionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuctionPayload>
          }
          aggregate: {
            args: Prisma.AuctionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuction>
          }
          groupBy: {
            args: Prisma.AuctionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuctionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuctionCountArgs<ExtArgs>
            result: $Utils.Optional<AuctionCountAggregateOutputType> | number
          }
        }
      }
      OpenOrder: {
        payload: Prisma.$OpenOrderPayload<ExtArgs>
        fields: Prisma.OpenOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpenOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpenOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          findFirst: {
            args: Prisma.OpenOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpenOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          findMany: {
            args: Prisma.OpenOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>[]
          }
          create: {
            args: Prisma.OpenOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          createMany: {
            args: Prisma.OpenOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OpenOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>[]
          }
          delete: {
            args: Prisma.OpenOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          update: {
            args: Prisma.OpenOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          deleteMany: {
            args: Prisma.OpenOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpenOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpenOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpenOrderPayload>
          }
          aggregate: {
            args: Prisma.OpenOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpenOrder>
          }
          groupBy: {
            args: Prisma.OpenOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpenOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpenOrderCountArgs<ExtArgs>
            result: $Utils.Optional<OpenOrderCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      UserAddress: {
        payload: Prisma.$UserAddressPayload<ExtArgs>
        fields: Prisma.UserAddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          findFirst: {
            args: Prisma.UserAddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          findMany: {
            args: Prisma.UserAddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>[]
          }
          create: {
            args: Prisma.UserAddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          createMany: {
            args: Prisma.UserAddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>[]
          }
          delete: {
            args: Prisma.UserAddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          update: {
            args: Prisma.UserAddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          deleteMany: {
            args: Prisma.UserAddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserAddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAddressPayload>
          }
          aggregate: {
            args: Prisma.UserAddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAddress>
          }
          groupBy: {
            args: Prisma.UserAddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAddressCountArgs<ExtArgs>
            result: $Utils.Optional<UserAddressCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      WalletLog: {
        payload: Prisma.$WalletLogPayload<ExtArgs>
        fields: Prisma.WalletLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          findFirst: {
            args: Prisma.WalletLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          findMany: {
            args: Prisma.WalletLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>[]
          }
          create: {
            args: Prisma.WalletLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          createMany: {
            args: Prisma.WalletLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>[]
          }
          delete: {
            args: Prisma.WalletLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          update: {
            args: Prisma.WalletLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          deleteMany: {
            args: Prisma.WalletLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WalletLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletLogPayload>
          }
          aggregate: {
            args: Prisma.WalletLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWalletLog>
          }
          groupBy: {
            args: Prisma.WalletLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletLogCountArgs<ExtArgs>
            result: $Utils.Optional<WalletLogCountAggregateOutputType> | number
          }
        }
      }
      UserPayment: {
        payload: Prisma.$UserPaymentPayload<ExtArgs>
        fields: Prisma.UserPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          findFirst: {
            args: Prisma.UserPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          findMany: {
            args: Prisma.UserPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>[]
          }
          create: {
            args: Prisma.UserPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          createMany: {
            args: Prisma.UserPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>[]
          }
          delete: {
            args: Prisma.UserPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          update: {
            args: Prisma.UserPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          deleteMany: {
            args: Prisma.UserPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPaymentPayload>
          }
          aggregate: {
            args: Prisma.UserPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPayment>
          }
          groupBy: {
            args: Prisma.UserPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<UserPaymentCountAggregateOutputType> | number
          }
        }
      }
      UserWallet: {
        payload: Prisma.$UserWalletPayload<ExtArgs>
        fields: Prisma.UserWalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserWalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserWalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          findFirst: {
            args: Prisma.UserWalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserWalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          findMany: {
            args: Prisma.UserWalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>[]
          }
          create: {
            args: Prisma.UserWalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          createMany: {
            args: Prisma.UserWalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserWalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>[]
          }
          delete: {
            args: Prisma.UserWalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          update: {
            args: Prisma.UserWalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          deleteMany: {
            args: Prisma.UserWalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserWalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserWalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserWalletPayload>
          }
          aggregate: {
            args: Prisma.UserWalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserWallet>
          }
          groupBy: {
            args: Prisma.UserWalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserWalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserWalletCountArgs<ExtArgs>
            result: $Utils.Optional<UserWalletCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Products: number
    Favorites: number
    UserLogs: number
    Auctions: number
    OpenOrders: number
    UserAddresses: number
    UserPayments: number
    UserWallets: number
    Verifications: number
    AuctionLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Products?: boolean | UserCountOutputTypeCountProductsArgs
    Favorites?: boolean | UserCountOutputTypeCountFavoritesArgs
    UserLogs?: boolean | UserCountOutputTypeCountUserLogsArgs
    Auctions?: boolean | UserCountOutputTypeCountAuctionsArgs
    OpenOrders?: boolean | UserCountOutputTypeCountOpenOrdersArgs
    UserAddresses?: boolean | UserCountOutputTypeCountUserAddressesArgs
    UserPayments?: boolean | UserCountOutputTypeCountUserPaymentsArgs
    UserWallets?: boolean | UserCountOutputTypeCountUserWalletsArgs
    Verifications?: boolean | UserCountOutputTypeCountVerificationsArgs
    AuctionLogs?: boolean | UserCountOutputTypeCountAuctionLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOpenOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAddressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserWalletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWalletWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuctionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionLogWhereInput
  }


  /**
   * Count Type AuctionCountOutputType
   */

  export type AuctionCountOutputType = {
    AuctionLogs: number
  }

  export type AuctionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AuctionLogs?: boolean | AuctionCountOutputTypeCountAuctionLogsArgs
  }

  // Custom InputTypes
  /**
   * AuctionCountOutputType without action
   */
  export type AuctionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionCountOutputType
     */
    select?: AuctionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AuctionCountOutputType without action
   */
  export type AuctionCountOutputTypeCountAuctionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionLogWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    Products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type UserWalletCountOutputType
   */

  export type UserWalletCountOutputType = {
    WalletLogs: number
  }

  export type UserWalletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    WalletLogs?: boolean | UserWalletCountOutputTypeCountWalletLogsArgs
  }

  // Custom InputTypes
  /**
   * UserWalletCountOutputType without action
   */
  export type UserWalletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWalletCountOutputType
     */
    select?: UserWalletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserWalletCountOutputType without action
   */
  export type UserWalletCountOutputTypeCountWalletLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteAvgAggregateOutputType = {
    favoriteId: number | null
    userId: number | null
  }

  export type FavoriteSumAggregateOutputType = {
    favoriteId: number | null
    userId: number | null
  }

  export type FavoriteMinAggregateOutputType = {
    favoriteId: number | null
    userId: number | null
    favoriteItem: string | null
  }

  export type FavoriteMaxAggregateOutputType = {
    favoriteId: number | null
    userId: number | null
    favoriteItem: string | null
  }

  export type FavoriteCountAggregateOutputType = {
    favoriteId: number
    userId: number
    favoriteItem: number
    _all: number
  }


  export type FavoriteAvgAggregateInputType = {
    favoriteId?: true
    userId?: true
  }

  export type FavoriteSumAggregateInputType = {
    favoriteId?: true
    userId?: true
  }

  export type FavoriteMinAggregateInputType = {
    favoriteId?: true
    userId?: true
    favoriteItem?: true
  }

  export type FavoriteMaxAggregateInputType = {
    favoriteId?: true
    userId?: true
    favoriteItem?: true
  }

  export type FavoriteCountAggregateInputType = {
    favoriteId?: true
    userId?: true
    favoriteItem?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorite to aggregate.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type FavoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithAggregationInput | FavoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: FavoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _avg?: FavoriteAvgAggregateInputType
    _sum?: FavoriteSumAggregateInputType
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    favoriteId: number
    userId: number
    favoriteItem: string
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends FavoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    favoriteId?: boolean
    userId?: boolean
    favoriteItem?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    favoriteId?: boolean
    userId?: boolean
    favoriteItem?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type FavoriteSelectScalar = {
    favoriteId?: boolean
    userId?: boolean
    favoriteItem?: boolean
  }

  export type FavoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FavoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FavoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favorite"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      favoriteId: number
      userId: number
      favoriteItem: string
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type FavoriteGetPayload<S extends boolean | null | undefined | FavoriteDefaultArgs> = $Result.GetResult<Prisma.$FavoritePayload, S>

  type FavoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface FavoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorite'], meta: { name: 'Favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {FavoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteFindUniqueArgs>(args: SelectSubset<T, FavoriteFindUniqueArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteFindFirstArgs>(args?: SelectSubset<T, FavoriteFindFirstArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `favoriteId`
     * const favoriteWithFavoriteIdOnly = await prisma.favorite.findMany({ select: { favoriteId: true } })
     * 
     */
    findMany<T extends FavoriteFindManyArgs>(args?: SelectSubset<T, FavoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Favorite.
     * @param {FavoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends FavoriteCreateArgs>(args: SelectSubset<T, FavoriteCreateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Favorites.
     * @param {FavoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteCreateManyArgs>(args?: SelectSubset<T, FavoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {FavoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `favoriteId`
     * const favoriteWithFavoriteIdOnly = await prisma.favorite.createManyAndReturn({ 
     *   select: { favoriteId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Favorite.
     * @param {FavoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends FavoriteDeleteArgs>(args: SelectSubset<T, FavoriteDeleteArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Favorite.
     * @param {FavoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteUpdateArgs>(args: SelectSubset<T, FavoriteUpdateArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Favorites.
     * @param {FavoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteDeleteManyArgs>(args?: SelectSubset<T, FavoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteUpdateManyArgs>(args: SelectSubset<T, FavoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorite.
     * @param {FavoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteUpsertArgs>(args: SelectSubset<T, FavoriteUpsertArgs<ExtArgs>>): Prisma__FavoriteClient<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoriteCountArgs>(
      args?: Subset<T, FavoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorite model
   */
  readonly fields: FavoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Favorite model
   */ 
  interface FavoriteFieldRefs {
    readonly favoriteId: FieldRef<"Favorite", 'Int'>
    readonly userId: FieldRef<"Favorite", 'Int'>
    readonly favoriteItem: FieldRef<"Favorite", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Favorite findUnique
   */
  export type FavoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findUniqueOrThrow
   */
  export type FavoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite findFirst
   */
  export type FavoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findFirstOrThrow
   */
  export type FavoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorite to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite findMany
   */
  export type FavoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * Favorite create
   */
  export type FavoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorite.
     */
    data: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
  }

  /**
   * Favorite createMany
   */
  export type FavoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Favorite createManyAndReturn
   */
  export type FavoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Favorites.
     */
    data: FavoriteCreateManyInput | FavoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Favorite update
   */
  export type FavoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorite.
     */
    data: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
    /**
     * Choose, which Favorite to update.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite updateMany
   */
  export type FavoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite upsert
   */
  export type FavoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorite to update in case it exists.
     */
    where: FavoriteWhereUniqueInput
    /**
     * In case the Favorite found by the `where` argument doesn't exist, create a new Favorite with this data.
     */
    create: XOR<FavoriteCreateInput, FavoriteUncheckedCreateInput>
    /**
     * In case the Favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteUpdateInput, FavoriteUncheckedUpdateInput>
  }

  /**
   * Favorite delete
   */
  export type FavoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    /**
     * Filter which Favorite to delete.
     */
    where: FavoriteWhereUniqueInput
  }

  /**
   * Favorite deleteMany
   */
  export type FavoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoriteWhereInput
  }

  /**
   * Favorite without action
   */
  export type FavoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
  }


  /**
   * Model UserLog
   */

  export type AggregateUserLog = {
    _count: UserLogCountAggregateOutputType | null
    _avg: UserLogAvgAggregateOutputType | null
    _sum: UserLogSumAggregateOutputType | null
    _min: UserLogMinAggregateOutputType | null
    _max: UserLogMaxAggregateOutputType | null
  }

  export type UserLogAvgAggregateOutputType = {
    userLogId: number | null
    userId: number | null
    editType: number | null
    editValue: number | null
  }

  export type UserLogSumAggregateOutputType = {
    userLogId: number | null
    userId: number | null
    editType: number | null
    editValue: number | null
  }

  export type UserLogMinAggregateOutputType = {
    userLogId: number | null
    userId: number | null
    editType: number | null
    editValue: number | null
  }

  export type UserLogMaxAggregateOutputType = {
    userLogId: number | null
    userId: number | null
    editType: number | null
    editValue: number | null
  }

  export type UserLogCountAggregateOutputType = {
    userLogId: number
    userId: number
    editType: number
    editValue: number
    _all: number
  }


  export type UserLogAvgAggregateInputType = {
    userLogId?: true
    userId?: true
    editType?: true
    editValue?: true
  }

  export type UserLogSumAggregateInputType = {
    userLogId?: true
    userId?: true
    editType?: true
    editValue?: true
  }

  export type UserLogMinAggregateInputType = {
    userLogId?: true
    userId?: true
    editType?: true
    editValue?: true
  }

  export type UserLogMaxAggregateInputType = {
    userLogId?: true
    userId?: true
    editType?: true
    editValue?: true
  }

  export type UserLogCountAggregateInputType = {
    userLogId?: true
    userId?: true
    editType?: true
    editValue?: true
    _all?: true
  }

  export type UserLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLog to aggregate.
     */
    where?: UserLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogs to fetch.
     */
    orderBy?: UserLogOrderByWithRelationInput | UserLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLogs
    **/
    _count?: true | UserLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLogMaxAggregateInputType
  }

  export type GetUserLogAggregateType<T extends UserLogAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLog[P]>
      : GetScalarType<T[P], AggregateUserLog[P]>
  }




  export type UserLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLogWhereInput
    orderBy?: UserLogOrderByWithAggregationInput | UserLogOrderByWithAggregationInput[]
    by: UserLogScalarFieldEnum[] | UserLogScalarFieldEnum
    having?: UserLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLogCountAggregateInputType | true
    _avg?: UserLogAvgAggregateInputType
    _sum?: UserLogSumAggregateInputType
    _min?: UserLogMinAggregateInputType
    _max?: UserLogMaxAggregateInputType
  }

  export type UserLogGroupByOutputType = {
    userLogId: number
    userId: number
    editType: number
    editValue: number
    _count: UserLogCountAggregateOutputType | null
    _avg: UserLogAvgAggregateOutputType | null
    _sum: UserLogSumAggregateOutputType | null
    _min: UserLogMinAggregateOutputType | null
    _max: UserLogMaxAggregateOutputType | null
  }

  type GetUserLogGroupByPayload<T extends UserLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLogGroupByOutputType[P]>
            : GetScalarType<T[P], UserLogGroupByOutputType[P]>
        }
      >
    >


  export type UserLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userLogId?: boolean
    userId?: boolean
    editType?: boolean
    editValue?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLog"]>

  export type UserLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userLogId?: boolean
    userId?: boolean
    editType?: boolean
    editValue?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLog"]>

  export type UserLogSelectScalar = {
    userLogId?: boolean
    userId?: boolean
    editType?: boolean
    editValue?: boolean
  }

  export type UserLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLog"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userLogId: number
      userId: number
      editType: number
      editValue: number
    }, ExtArgs["result"]["userLog"]>
    composites: {}
  }

  type UserLogGetPayload<S extends boolean | null | undefined | UserLogDefaultArgs> = $Result.GetResult<Prisma.$UserLogPayload, S>

  type UserLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserLogCountAggregateInputType | true
    }

  export interface UserLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLog'], meta: { name: 'UserLog' } }
    /**
     * Find zero or one UserLog that matches the filter.
     * @param {UserLogFindUniqueArgs} args - Arguments to find a UserLog
     * @example
     * // Get one UserLog
     * const userLog = await prisma.userLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLogFindUniqueArgs>(args: SelectSubset<T, UserLogFindUniqueArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserLogFindUniqueOrThrowArgs} args - Arguments to find a UserLog
     * @example
     * // Get one UserLog
     * const userLog = await prisma.userLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLogFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogFindFirstArgs} args - Arguments to find a UserLog
     * @example
     * // Get one UserLog
     * const userLog = await prisma.userLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLogFindFirstArgs>(args?: SelectSubset<T, UserLogFindFirstArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogFindFirstOrThrowArgs} args - Arguments to find a UserLog
     * @example
     * // Get one UserLog
     * const userLog = await prisma.userLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLogFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLogs
     * const userLogs = await prisma.userLog.findMany()
     * 
     * // Get first 10 UserLogs
     * const userLogs = await prisma.userLog.findMany({ take: 10 })
     * 
     * // Only select the `userLogId`
     * const userLogWithUserLogIdOnly = await prisma.userLog.findMany({ select: { userLogId: true } })
     * 
     */
    findMany<T extends UserLogFindManyArgs>(args?: SelectSubset<T, UserLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserLog.
     * @param {UserLogCreateArgs} args - Arguments to create a UserLog.
     * @example
     * // Create one UserLog
     * const UserLog = await prisma.userLog.create({
     *   data: {
     *     // ... data to create a UserLog
     *   }
     * })
     * 
     */
    create<T extends UserLogCreateArgs>(args: SelectSubset<T, UserLogCreateArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserLogs.
     * @param {UserLogCreateManyArgs} args - Arguments to create many UserLogs.
     * @example
     * // Create many UserLogs
     * const userLog = await prisma.userLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLogCreateManyArgs>(args?: SelectSubset<T, UserLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserLogs and returns the data saved in the database.
     * @param {UserLogCreateManyAndReturnArgs} args - Arguments to create many UserLogs.
     * @example
     * // Create many UserLogs
     * const userLog = await prisma.userLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserLogs and only return the `userLogId`
     * const userLogWithUserLogIdOnly = await prisma.userLog.createManyAndReturn({ 
     *   select: { userLogId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserLogCreateManyAndReturnArgs>(args?: SelectSubset<T, UserLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserLog.
     * @param {UserLogDeleteArgs} args - Arguments to delete one UserLog.
     * @example
     * // Delete one UserLog
     * const UserLog = await prisma.userLog.delete({
     *   where: {
     *     // ... filter to delete one UserLog
     *   }
     * })
     * 
     */
    delete<T extends UserLogDeleteArgs>(args: SelectSubset<T, UserLogDeleteArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserLog.
     * @param {UserLogUpdateArgs} args - Arguments to update one UserLog.
     * @example
     * // Update one UserLog
     * const userLog = await prisma.userLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLogUpdateArgs>(args: SelectSubset<T, UserLogUpdateArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserLogs.
     * @param {UserLogDeleteManyArgs} args - Arguments to filter UserLogs to delete.
     * @example
     * // Delete a few UserLogs
     * const { count } = await prisma.userLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLogDeleteManyArgs>(args?: SelectSubset<T, UserLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLogs
     * const userLog = await prisma.userLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLogUpdateManyArgs>(args: SelectSubset<T, UserLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLog.
     * @param {UserLogUpsertArgs} args - Arguments to update or create a UserLog.
     * @example
     * // Update or create a UserLog
     * const userLog = await prisma.userLog.upsert({
     *   create: {
     *     // ... data to create a UserLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLog we want to update
     *   }
     * })
     */
    upsert<T extends UserLogUpsertArgs>(args: SelectSubset<T, UserLogUpsertArgs<ExtArgs>>): Prisma__UserLogClient<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogCountArgs} args - Arguments to filter UserLogs to count.
     * @example
     * // Count the number of UserLogs
     * const count = await prisma.userLog.count({
     *   where: {
     *     // ... the filter for the UserLogs we want to count
     *   }
     * })
    **/
    count<T extends UserLogCountArgs>(
      args?: Subset<T, UserLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLogAggregateArgs>(args: Subset<T, UserLogAggregateArgs>): Prisma.PrismaPromise<GetUserLogAggregateType<T>>

    /**
     * Group by UserLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLogGroupByArgs['orderBy'] }
        : { orderBy?: UserLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLog model
   */
  readonly fields: UserLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLog model
   */ 
  interface UserLogFieldRefs {
    readonly userLogId: FieldRef<"UserLog", 'Int'>
    readonly userId: FieldRef<"UserLog", 'Int'>
    readonly editType: FieldRef<"UserLog", 'Int'>
    readonly editValue: FieldRef<"UserLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserLog findUnique
   */
  export type UserLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter, which UserLog to fetch.
     */
    where: UserLogWhereUniqueInput
  }

  /**
   * UserLog findUniqueOrThrow
   */
  export type UserLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter, which UserLog to fetch.
     */
    where: UserLogWhereUniqueInput
  }

  /**
   * UserLog findFirst
   */
  export type UserLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter, which UserLog to fetch.
     */
    where?: UserLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogs to fetch.
     */
    orderBy?: UserLogOrderByWithRelationInput | UserLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLogs.
     */
    cursor?: UserLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLogs.
     */
    distinct?: UserLogScalarFieldEnum | UserLogScalarFieldEnum[]
  }

  /**
   * UserLog findFirstOrThrow
   */
  export type UserLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter, which UserLog to fetch.
     */
    where?: UserLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogs to fetch.
     */
    orderBy?: UserLogOrderByWithRelationInput | UserLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLogs.
     */
    cursor?: UserLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLogs.
     */
    distinct?: UserLogScalarFieldEnum | UserLogScalarFieldEnum[]
  }

  /**
   * UserLog findMany
   */
  export type UserLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter, which UserLogs to fetch.
     */
    where?: UserLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLogs to fetch.
     */
    orderBy?: UserLogOrderByWithRelationInput | UserLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLogs.
     */
    cursor?: UserLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLogs.
     */
    skip?: number
    distinct?: UserLogScalarFieldEnum | UserLogScalarFieldEnum[]
  }

  /**
   * UserLog create
   */
  export type UserLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLog.
     */
    data: XOR<UserLogCreateInput, UserLogUncheckedCreateInput>
  }

  /**
   * UserLog createMany
   */
  export type UserLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLogs.
     */
    data: UserLogCreateManyInput | UserLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLog createManyAndReturn
   */
  export type UserLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserLogs.
     */
    data: UserLogCreateManyInput | UserLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserLog update
   */
  export type UserLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLog.
     */
    data: XOR<UserLogUpdateInput, UserLogUncheckedUpdateInput>
    /**
     * Choose, which UserLog to update.
     */
    where: UserLogWhereUniqueInput
  }

  /**
   * UserLog updateMany
   */
  export type UserLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLogs.
     */
    data: XOR<UserLogUpdateManyMutationInput, UserLogUncheckedUpdateManyInput>
    /**
     * Filter which UserLogs to update
     */
    where?: UserLogWhereInput
  }

  /**
   * UserLog upsert
   */
  export type UserLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLog to update in case it exists.
     */
    where: UserLogWhereUniqueInput
    /**
     * In case the UserLog found by the `where` argument doesn't exist, create a new UserLog with this data.
     */
    create: XOR<UserLogCreateInput, UserLogUncheckedCreateInput>
    /**
     * In case the UserLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLogUpdateInput, UserLogUncheckedUpdateInput>
  }

  /**
   * UserLog delete
   */
  export type UserLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    /**
     * Filter which UserLog to delete.
     */
    where: UserLogWhereUniqueInput
  }

  /**
   * UserLog deleteMany
   */
  export type UserLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLogs to delete
     */
    where?: UserLogWhereInput
  }

  /**
   * UserLog without action
   */
  export type UserLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
  }


  /**
   * Model AuctionLog
   */

  export type AggregateAuctionLog = {
    _count: AuctionLogCountAggregateOutputType | null
    _avg: AuctionLogAvgAggregateOutputType | null
    _sum: AuctionLogSumAggregateOutputType | null
    _min: AuctionLogMinAggregateOutputType | null
    _max: AuctionLogMaxAggregateOutputType | null
  }

  export type AuctionLogAvgAggregateOutputType = {
    auctionLogId: number | null
    userId: number | null
    auctionId: number | null
    bidPrice: number | null
  }

  export type AuctionLogSumAggregateOutputType = {
    auctionLogId: number | null
    userId: number | null
    auctionId: number | null
    bidPrice: number | null
  }

  export type AuctionLogMinAggregateOutputType = {
    auctionLogId: number | null
    userId: number | null
    auctionId: number | null
    bidPrice: number | null
    timestamp: Date | null
  }

  export type AuctionLogMaxAggregateOutputType = {
    auctionLogId: number | null
    userId: number | null
    auctionId: number | null
    bidPrice: number | null
    timestamp: Date | null
  }

  export type AuctionLogCountAggregateOutputType = {
    auctionLogId: number
    userId: number
    auctionId: number
    bidPrice: number
    timestamp: number
    _all: number
  }


  export type AuctionLogAvgAggregateInputType = {
    auctionLogId?: true
    userId?: true
    auctionId?: true
    bidPrice?: true
  }

  export type AuctionLogSumAggregateInputType = {
    auctionLogId?: true
    userId?: true
    auctionId?: true
    bidPrice?: true
  }

  export type AuctionLogMinAggregateInputType = {
    auctionLogId?: true
    userId?: true
    auctionId?: true
    bidPrice?: true
    timestamp?: true
  }

  export type AuctionLogMaxAggregateInputType = {
    auctionLogId?: true
    userId?: true
    auctionId?: true
    bidPrice?: true
    timestamp?: true
  }

  export type AuctionLogCountAggregateInputType = {
    auctionLogId?: true
    userId?: true
    auctionId?: true
    bidPrice?: true
    timestamp?: true
    _all?: true
  }

  export type AuctionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuctionLog to aggregate.
     */
    where?: AuctionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionLogs to fetch.
     */
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuctionLogs
    **/
    _count?: true | AuctionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuctionLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuctionLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionLogMaxAggregateInputType
  }

  export type GetAuctionLogAggregateType<T extends AuctionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuctionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuctionLog[P]>
      : GetScalarType<T[P], AggregateAuctionLog[P]>
  }




  export type AuctionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionLogWhereInput
    orderBy?: AuctionLogOrderByWithAggregationInput | AuctionLogOrderByWithAggregationInput[]
    by: AuctionLogScalarFieldEnum[] | AuctionLogScalarFieldEnum
    having?: AuctionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionLogCountAggregateInputType | true
    _avg?: AuctionLogAvgAggregateInputType
    _sum?: AuctionLogSumAggregateInputType
    _min?: AuctionLogMinAggregateInputType
    _max?: AuctionLogMaxAggregateInputType
  }

  export type AuctionLogGroupByOutputType = {
    auctionLogId: number
    userId: number
    auctionId: number
    bidPrice: number
    timestamp: Date
    _count: AuctionLogCountAggregateOutputType | null
    _avg: AuctionLogAvgAggregateOutputType | null
    _sum: AuctionLogSumAggregateOutputType | null
    _min: AuctionLogMinAggregateOutputType | null
    _max: AuctionLogMaxAggregateOutputType | null
  }

  type GetAuctionLogGroupByPayload<T extends AuctionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuctionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionLogGroupByOutputType[P]>
        }
      >
    >


  export type AuctionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auctionLogId?: boolean
    userId?: boolean
    auctionId?: boolean
    bidPrice?: boolean
    timestamp?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auctionLog"]>

  export type AuctionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auctionLogId?: boolean
    userId?: boolean
    auctionId?: boolean
    bidPrice?: boolean
    timestamp?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auctionLog"]>

  export type AuctionLogSelectScalar = {
    auctionLogId?: boolean
    userId?: boolean
    auctionId?: boolean
    bidPrice?: boolean
    timestamp?: boolean
  }

  export type AuctionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }
  export type AuctionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Auction?: boolean | AuctionDefaultArgs<ExtArgs>
  }

  export type $AuctionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuctionLog"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Auction: Prisma.$AuctionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      auctionLogId: number
      userId: number
      auctionId: number
      bidPrice: number
      timestamp: Date
    }, ExtArgs["result"]["auctionLog"]>
    composites: {}
  }

  type AuctionLogGetPayload<S extends boolean | null | undefined | AuctionLogDefaultArgs> = $Result.GetResult<Prisma.$AuctionLogPayload, S>

  type AuctionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuctionLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuctionLogCountAggregateInputType | true
    }

  export interface AuctionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuctionLog'], meta: { name: 'AuctionLog' } }
    /**
     * Find zero or one AuctionLog that matches the filter.
     * @param {AuctionLogFindUniqueArgs} args - Arguments to find a AuctionLog
     * @example
     * // Get one AuctionLog
     * const auctionLog = await prisma.auctionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuctionLogFindUniqueArgs>(args: SelectSubset<T, AuctionLogFindUniqueArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuctionLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuctionLogFindUniqueOrThrowArgs} args - Arguments to find a AuctionLog
     * @example
     * // Get one AuctionLog
     * const auctionLog = await prisma.auctionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuctionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuctionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuctionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogFindFirstArgs} args - Arguments to find a AuctionLog
     * @example
     * // Get one AuctionLog
     * const auctionLog = await prisma.auctionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuctionLogFindFirstArgs>(args?: SelectSubset<T, AuctionLogFindFirstArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuctionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogFindFirstOrThrowArgs} args - Arguments to find a AuctionLog
     * @example
     * // Get one AuctionLog
     * const auctionLog = await prisma.auctionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuctionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuctionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuctionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuctionLogs
     * const auctionLogs = await prisma.auctionLog.findMany()
     * 
     * // Get first 10 AuctionLogs
     * const auctionLogs = await prisma.auctionLog.findMany({ take: 10 })
     * 
     * // Only select the `auctionLogId`
     * const auctionLogWithAuctionLogIdOnly = await prisma.auctionLog.findMany({ select: { auctionLogId: true } })
     * 
     */
    findMany<T extends AuctionLogFindManyArgs>(args?: SelectSubset<T, AuctionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuctionLog.
     * @param {AuctionLogCreateArgs} args - Arguments to create a AuctionLog.
     * @example
     * // Create one AuctionLog
     * const AuctionLog = await prisma.auctionLog.create({
     *   data: {
     *     // ... data to create a AuctionLog
     *   }
     * })
     * 
     */
    create<T extends AuctionLogCreateArgs>(args: SelectSubset<T, AuctionLogCreateArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuctionLogs.
     * @param {AuctionLogCreateManyArgs} args - Arguments to create many AuctionLogs.
     * @example
     * // Create many AuctionLogs
     * const auctionLog = await prisma.auctionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuctionLogCreateManyArgs>(args?: SelectSubset<T, AuctionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuctionLogs and returns the data saved in the database.
     * @param {AuctionLogCreateManyAndReturnArgs} args - Arguments to create many AuctionLogs.
     * @example
     * // Create many AuctionLogs
     * const auctionLog = await prisma.auctionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuctionLogs and only return the `auctionLogId`
     * const auctionLogWithAuctionLogIdOnly = await prisma.auctionLog.createManyAndReturn({ 
     *   select: { auctionLogId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuctionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuctionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuctionLog.
     * @param {AuctionLogDeleteArgs} args - Arguments to delete one AuctionLog.
     * @example
     * // Delete one AuctionLog
     * const AuctionLog = await prisma.auctionLog.delete({
     *   where: {
     *     // ... filter to delete one AuctionLog
     *   }
     * })
     * 
     */
    delete<T extends AuctionLogDeleteArgs>(args: SelectSubset<T, AuctionLogDeleteArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuctionLog.
     * @param {AuctionLogUpdateArgs} args - Arguments to update one AuctionLog.
     * @example
     * // Update one AuctionLog
     * const auctionLog = await prisma.auctionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuctionLogUpdateArgs>(args: SelectSubset<T, AuctionLogUpdateArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuctionLogs.
     * @param {AuctionLogDeleteManyArgs} args - Arguments to filter AuctionLogs to delete.
     * @example
     * // Delete a few AuctionLogs
     * const { count } = await prisma.auctionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuctionLogDeleteManyArgs>(args?: SelectSubset<T, AuctionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuctionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuctionLogs
     * const auctionLog = await prisma.auctionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuctionLogUpdateManyArgs>(args: SelectSubset<T, AuctionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuctionLog.
     * @param {AuctionLogUpsertArgs} args - Arguments to update or create a AuctionLog.
     * @example
     * // Update or create a AuctionLog
     * const auctionLog = await prisma.auctionLog.upsert({
     *   create: {
     *     // ... data to create a AuctionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuctionLog we want to update
     *   }
     * })
     */
    upsert<T extends AuctionLogUpsertArgs>(args: SelectSubset<T, AuctionLogUpsertArgs<ExtArgs>>): Prisma__AuctionLogClient<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuctionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogCountArgs} args - Arguments to filter AuctionLogs to count.
     * @example
     * // Count the number of AuctionLogs
     * const count = await prisma.auctionLog.count({
     *   where: {
     *     // ... the filter for the AuctionLogs we want to count
     *   }
     * })
    **/
    count<T extends AuctionLogCountArgs>(
      args?: Subset<T, AuctionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuctionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionLogAggregateArgs>(args: Subset<T, AuctionLogAggregateArgs>): Prisma.PrismaPromise<GetAuctionLogAggregateType<T>>

    /**
     * Group by AuctionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionLogGroupByArgs['orderBy'] }
        : { orderBy?: AuctionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuctionLog model
   */
  readonly fields: AuctionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuctionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuctionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Auction<T extends AuctionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AuctionDefaultArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuctionLog model
   */ 
  interface AuctionLogFieldRefs {
    readonly auctionLogId: FieldRef<"AuctionLog", 'Int'>
    readonly userId: FieldRef<"AuctionLog", 'Int'>
    readonly auctionId: FieldRef<"AuctionLog", 'Int'>
    readonly bidPrice: FieldRef<"AuctionLog", 'Int'>
    readonly timestamp: FieldRef<"AuctionLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuctionLog findUnique
   */
  export type AuctionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter, which AuctionLog to fetch.
     */
    where: AuctionLogWhereUniqueInput
  }

  /**
   * AuctionLog findUniqueOrThrow
   */
  export type AuctionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter, which AuctionLog to fetch.
     */
    where: AuctionLogWhereUniqueInput
  }

  /**
   * AuctionLog findFirst
   */
  export type AuctionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter, which AuctionLog to fetch.
     */
    where?: AuctionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionLogs to fetch.
     */
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuctionLogs.
     */
    cursor?: AuctionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuctionLogs.
     */
    distinct?: AuctionLogScalarFieldEnum | AuctionLogScalarFieldEnum[]
  }

  /**
   * AuctionLog findFirstOrThrow
   */
  export type AuctionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter, which AuctionLog to fetch.
     */
    where?: AuctionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionLogs to fetch.
     */
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuctionLogs.
     */
    cursor?: AuctionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuctionLogs.
     */
    distinct?: AuctionLogScalarFieldEnum | AuctionLogScalarFieldEnum[]
  }

  /**
   * AuctionLog findMany
   */
  export type AuctionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter, which AuctionLogs to fetch.
     */
    where?: AuctionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuctionLogs to fetch.
     */
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuctionLogs.
     */
    cursor?: AuctionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuctionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuctionLogs.
     */
    skip?: number
    distinct?: AuctionLogScalarFieldEnum | AuctionLogScalarFieldEnum[]
  }

  /**
   * AuctionLog create
   */
  export type AuctionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuctionLog.
     */
    data: XOR<AuctionLogCreateInput, AuctionLogUncheckedCreateInput>
  }

  /**
   * AuctionLog createMany
   */
  export type AuctionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuctionLogs.
     */
    data: AuctionLogCreateManyInput | AuctionLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuctionLog createManyAndReturn
   */
  export type AuctionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuctionLogs.
     */
    data: AuctionLogCreateManyInput | AuctionLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuctionLog update
   */
  export type AuctionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuctionLog.
     */
    data: XOR<AuctionLogUpdateInput, AuctionLogUncheckedUpdateInput>
    /**
     * Choose, which AuctionLog to update.
     */
    where: AuctionLogWhereUniqueInput
  }

  /**
   * AuctionLog updateMany
   */
  export type AuctionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuctionLogs.
     */
    data: XOR<AuctionLogUpdateManyMutationInput, AuctionLogUncheckedUpdateManyInput>
    /**
     * Filter which AuctionLogs to update
     */
    where?: AuctionLogWhereInput
  }

  /**
   * AuctionLog upsert
   */
  export type AuctionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuctionLog to update in case it exists.
     */
    where: AuctionLogWhereUniqueInput
    /**
     * In case the AuctionLog found by the `where` argument doesn't exist, create a new AuctionLog with this data.
     */
    create: XOR<AuctionLogCreateInput, AuctionLogUncheckedCreateInput>
    /**
     * In case the AuctionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionLogUpdateInput, AuctionLogUncheckedUpdateInput>
  }

  /**
   * AuctionLog delete
   */
  export type AuctionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    /**
     * Filter which AuctionLog to delete.
     */
    where: AuctionLogWhereUniqueInput
  }

  /**
   * AuctionLog deleteMany
   */
  export type AuctionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuctionLogs to delete
     */
    where?: AuctionLogWhereInput
  }

  /**
   * AuctionLog without action
   */
  export type AuctionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    userId: number | null
  }

  export type UserSumAggregateOutputType = {
    userId: number | null
  }

  export type UserMinAggregateOutputType = {
    userId: number | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    phone: string | null
    createdOn: Date | null
  }

  export type UserMaxAggregateOutputType = {
    userId: number | null
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    phone: string | null
    createdOn: Date | null
  }

  export type UserCountAggregateOutputType = {
    userId: number
    firstName: number
    lastName: number
    username: number
    email: number
    phone: number
    createdOn: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    userId?: true
  }

  export type UserSumAggregateInputType = {
    userId?: true
  }

  export type UserMinAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    phone?: true
    createdOn?: true
  }

  export type UserMaxAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    phone?: true
    createdOn?: true
  }

  export type UserCountAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    phone?: true
    createdOn?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    userId: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    createdOn?: boolean
    Products?: boolean | User$ProductsArgs<ExtArgs>
    Favorites?: boolean | User$FavoritesArgs<ExtArgs>
    UserLogs?: boolean | User$UserLogsArgs<ExtArgs>
    Auctions?: boolean | User$AuctionsArgs<ExtArgs>
    OpenOrders?: boolean | User$OpenOrdersArgs<ExtArgs>
    UserAddresses?: boolean | User$UserAddressesArgs<ExtArgs>
    UserPayments?: boolean | User$UserPaymentsArgs<ExtArgs>
    UserWallets?: boolean | User$UserWalletsArgs<ExtArgs>
    Verifications?: boolean | User$VerificationsArgs<ExtArgs>
    AuctionLogs?: boolean | User$AuctionLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    createdOn?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    phone?: boolean
    createdOn?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Products?: boolean | User$ProductsArgs<ExtArgs>
    Favorites?: boolean | User$FavoritesArgs<ExtArgs>
    UserLogs?: boolean | User$UserLogsArgs<ExtArgs>
    Auctions?: boolean | User$AuctionsArgs<ExtArgs>
    OpenOrders?: boolean | User$OpenOrdersArgs<ExtArgs>
    UserAddresses?: boolean | User$UserAddressesArgs<ExtArgs>
    UserPayments?: boolean | User$UserPaymentsArgs<ExtArgs>
    UserWallets?: boolean | User$UserWalletsArgs<ExtArgs>
    Verifications?: boolean | User$VerificationsArgs<ExtArgs>
    AuctionLogs?: boolean | User$AuctionLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Products: Prisma.$ProductPayload<ExtArgs>[]
      Favorites: Prisma.$FavoritePayload<ExtArgs>[]
      UserLogs: Prisma.$UserLogPayload<ExtArgs>[]
      Auctions: Prisma.$AuctionPayload<ExtArgs>[]
      OpenOrders: Prisma.$OpenOrderPayload<ExtArgs>[]
      UserAddresses: Prisma.$UserAddressPayload<ExtArgs>[]
      UserPayments: Prisma.$UserPaymentPayload<ExtArgs>[]
      UserWallets: Prisma.$UserWalletPayload<ExtArgs>[]
      Verifications: Prisma.$VerificationPayload<ExtArgs>[]
      AuctionLogs: Prisma.$AuctionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      firstName: string
      lastName: string
      username: string
      email: string
      phone: string
      createdOn: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `userId`
     * const userWithUserIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Products<T extends User$ProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$ProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    Favorites<T extends User$FavoritesArgs<ExtArgs> = {}>(args?: Subset<T, User$FavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritePayload<ExtArgs>, T, "findMany"> | Null>
    UserLogs<T extends User$UserLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$UserLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLogPayload<ExtArgs>, T, "findMany"> | Null>
    Auctions<T extends User$AuctionsArgs<ExtArgs> = {}>(args?: Subset<T, User$AuctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany"> | Null>
    OpenOrders<T extends User$OpenOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$OpenOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findMany"> | Null>
    UserAddresses<T extends User$UserAddressesArgs<ExtArgs> = {}>(args?: Subset<T, User$UserAddressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findMany"> | Null>
    UserPayments<T extends User$UserPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$UserPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findMany"> | Null>
    UserWallets<T extends User$UserWalletsArgs<ExtArgs> = {}>(args?: Subset<T, User$UserWalletsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findMany"> | Null>
    Verifications<T extends User$VerificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$VerificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany"> | Null>
    AuctionLogs<T extends User$AuctionLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$AuctionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly userId: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly createdOn: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.Products
   */
  export type User$ProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.Favorites
   */
  export type User$FavoritesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorite
     */
    select?: FavoriteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteInclude<ExtArgs> | null
    where?: FavoriteWhereInput
    orderBy?: FavoriteOrderByWithRelationInput | FavoriteOrderByWithRelationInput[]
    cursor?: FavoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * User.UserLogs
   */
  export type User$UserLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLog
     */
    select?: UserLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLogInclude<ExtArgs> | null
    where?: UserLogWhereInput
    orderBy?: UserLogOrderByWithRelationInput | UserLogOrderByWithRelationInput[]
    cursor?: UserLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLogScalarFieldEnum | UserLogScalarFieldEnum[]
  }

  /**
   * User.Auctions
   */
  export type User$AuctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    cursor?: AuctionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * User.OpenOrders
   */
  export type User$OpenOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    where?: OpenOrderWhereInput
    orderBy?: OpenOrderOrderByWithRelationInput | OpenOrderOrderByWithRelationInput[]
    cursor?: OpenOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpenOrderScalarFieldEnum | OpenOrderScalarFieldEnum[]
  }

  /**
   * User.UserAddresses
   */
  export type User$UserAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    where?: UserAddressWhereInput
    orderBy?: UserAddressOrderByWithRelationInput | UserAddressOrderByWithRelationInput[]
    cursor?: UserAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[]
  }

  /**
   * User.UserPayments
   */
  export type User$UserPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    where?: UserPaymentWhereInput
    orderBy?: UserPaymentOrderByWithRelationInput | UserPaymentOrderByWithRelationInput[]
    cursor?: UserPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPaymentScalarFieldEnum | UserPaymentScalarFieldEnum[]
  }

  /**
   * User.UserWallets
   */
  export type User$UserWalletsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    where?: UserWalletWhereInput
    orderBy?: UserWalletOrderByWithRelationInput | UserWalletOrderByWithRelationInput[]
    cursor?: UserWalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserWalletScalarFieldEnum | UserWalletScalarFieldEnum[]
  }

  /**
   * User.Verifications
   */
  export type User$VerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    cursor?: VerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * User.AuctionLogs
   */
  export type User$AuctionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    where?: AuctionLogWhereInput
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    cursor?: AuctionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionLogScalarFieldEnum | AuctionLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Auction
   */

  export type AggregateAuction = {
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  export type AuctionAvgAggregateOutputType = {
    auctionId: number | null
    userId: number | null
    productId: number | null
    startPrice: number | null
    minimumBid: number | null
    start: number | null
    end: number | null
  }

  export type AuctionSumAggregateOutputType = {
    auctionId: number | null
    userId: number | null
    productId: number | null
    startPrice: number | null
    minimumBid: number | null
    start: number | null
    end: number | null
  }

  export type AuctionMinAggregateOutputType = {
    auctionId: number | null
    userId: number | null
    productId: number | null
    startPrice: number | null
    minimumBid: number | null
    start: number | null
    end: number | null
  }

  export type AuctionMaxAggregateOutputType = {
    auctionId: number | null
    userId: number | null
    productId: number | null
    startPrice: number | null
    minimumBid: number | null
    start: number | null
    end: number | null
  }

  export type AuctionCountAggregateOutputType = {
    auctionId: number
    userId: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    _all: number
  }


  export type AuctionAvgAggregateInputType = {
    auctionId?: true
    userId?: true
    productId?: true
    startPrice?: true
    minimumBid?: true
    start?: true
    end?: true
  }

  export type AuctionSumAggregateInputType = {
    auctionId?: true
    userId?: true
    productId?: true
    startPrice?: true
    minimumBid?: true
    start?: true
    end?: true
  }

  export type AuctionMinAggregateInputType = {
    auctionId?: true
    userId?: true
    productId?: true
    startPrice?: true
    minimumBid?: true
    start?: true
    end?: true
  }

  export type AuctionMaxAggregateInputType = {
    auctionId?: true
    userId?: true
    productId?: true
    startPrice?: true
    minimumBid?: true
    start?: true
    end?: true
  }

  export type AuctionCountAggregateInputType = {
    auctionId?: true
    userId?: true
    productId?: true
    startPrice?: true
    minimumBid?: true
    start?: true
    end?: true
    _all?: true
  }

  export type AuctionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auction to aggregate.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Auctions
    **/
    _count?: true | AuctionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuctionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuctionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuctionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuctionMaxAggregateInputType
  }

  export type GetAuctionAggregateType<T extends AuctionAggregateArgs> = {
        [P in keyof T & keyof AggregateAuction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuction[P]>
      : GetScalarType<T[P], AggregateAuction[P]>
  }




  export type AuctionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuctionWhereInput
    orderBy?: AuctionOrderByWithAggregationInput | AuctionOrderByWithAggregationInput[]
    by: AuctionScalarFieldEnum[] | AuctionScalarFieldEnum
    having?: AuctionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuctionCountAggregateInputType | true
    _avg?: AuctionAvgAggregateInputType
    _sum?: AuctionSumAggregateInputType
    _min?: AuctionMinAggregateInputType
    _max?: AuctionMaxAggregateInputType
  }

  export type AuctionGroupByOutputType = {
    auctionId: number
    userId: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    _count: AuctionCountAggregateOutputType | null
    _avg: AuctionAvgAggregateOutputType | null
    _sum: AuctionSumAggregateOutputType | null
    _min: AuctionMinAggregateOutputType | null
    _max: AuctionMaxAggregateOutputType | null
  }

  type GetAuctionGroupByPayload<T extends AuctionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuctionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuctionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuctionGroupByOutputType[P]>
            : GetScalarType<T[P], AuctionGroupByOutputType[P]>
        }
      >
    >


  export type AuctionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auctionId?: boolean
    userId?: boolean
    productId?: boolean
    startPrice?: boolean
    minimumBid?: boolean
    start?: boolean
    end?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    AuctionLogs?: boolean | Auction$AuctionLogsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    auctionId?: boolean
    userId?: boolean
    productId?: boolean
    startPrice?: boolean
    minimumBid?: boolean
    start?: boolean
    end?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auction"]>

  export type AuctionSelectScalar = {
    auctionId?: boolean
    userId?: boolean
    productId?: boolean
    startPrice?: boolean
    minimumBid?: boolean
    start?: boolean
    end?: boolean
  }

  export type AuctionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    AuctionLogs?: boolean | Auction$AuctionLogsArgs<ExtArgs>
    _count?: boolean | AuctionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AuctionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuctionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Auction"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      AuctionLogs: Prisma.$AuctionLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      auctionId: number
      userId: number
      productId: number
      startPrice: number
      minimumBid: number
      start: number
      end: number
    }, ExtArgs["result"]["auction"]>
    composites: {}
  }

  type AuctionGetPayload<S extends boolean | null | undefined | AuctionDefaultArgs> = $Result.GetResult<Prisma.$AuctionPayload, S>

  type AuctionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuctionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuctionCountAggregateInputType | true
    }

  export interface AuctionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Auction'], meta: { name: 'Auction' } }
    /**
     * Find zero or one Auction that matches the filter.
     * @param {AuctionFindUniqueArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuctionFindUniqueArgs>(args: SelectSubset<T, AuctionFindUniqueArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Auction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuctionFindUniqueOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuctionFindUniqueOrThrowArgs>(args: SelectSubset<T, AuctionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Auction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuctionFindFirstArgs>(args?: SelectSubset<T, AuctionFindFirstArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Auction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindFirstOrThrowArgs} args - Arguments to find a Auction
     * @example
     * // Get one Auction
     * const auction = await prisma.auction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuctionFindFirstOrThrowArgs>(args?: SelectSubset<T, AuctionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Auctions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auctions
     * const auctions = await prisma.auction.findMany()
     * 
     * // Get first 10 Auctions
     * const auctions = await prisma.auction.findMany({ take: 10 })
     * 
     * // Only select the `auctionId`
     * const auctionWithAuctionIdOnly = await prisma.auction.findMany({ select: { auctionId: true } })
     * 
     */
    findMany<T extends AuctionFindManyArgs>(args?: SelectSubset<T, AuctionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Auction.
     * @param {AuctionCreateArgs} args - Arguments to create a Auction.
     * @example
     * // Create one Auction
     * const Auction = await prisma.auction.create({
     *   data: {
     *     // ... data to create a Auction
     *   }
     * })
     * 
     */
    create<T extends AuctionCreateArgs>(args: SelectSubset<T, AuctionCreateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Auctions.
     * @param {AuctionCreateManyArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuctionCreateManyArgs>(args?: SelectSubset<T, AuctionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auctions and returns the data saved in the database.
     * @param {AuctionCreateManyAndReturnArgs} args - Arguments to create many Auctions.
     * @example
     * // Create many Auctions
     * const auction = await prisma.auction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auctions and only return the `auctionId`
     * const auctionWithAuctionIdOnly = await prisma.auction.createManyAndReturn({ 
     *   select: { auctionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuctionCreateManyAndReturnArgs>(args?: SelectSubset<T, AuctionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Auction.
     * @param {AuctionDeleteArgs} args - Arguments to delete one Auction.
     * @example
     * // Delete one Auction
     * const Auction = await prisma.auction.delete({
     *   where: {
     *     // ... filter to delete one Auction
     *   }
     * })
     * 
     */
    delete<T extends AuctionDeleteArgs>(args: SelectSubset<T, AuctionDeleteArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Auction.
     * @param {AuctionUpdateArgs} args - Arguments to update one Auction.
     * @example
     * // Update one Auction
     * const auction = await prisma.auction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuctionUpdateArgs>(args: SelectSubset<T, AuctionUpdateArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Auctions.
     * @param {AuctionDeleteManyArgs} args - Arguments to filter Auctions to delete.
     * @example
     * // Delete a few Auctions
     * const { count } = await prisma.auction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuctionDeleteManyArgs>(args?: SelectSubset<T, AuctionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auctions
     * const auction = await prisma.auction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuctionUpdateManyArgs>(args: SelectSubset<T, AuctionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auction.
     * @param {AuctionUpsertArgs} args - Arguments to update or create a Auction.
     * @example
     * // Update or create a Auction
     * const auction = await prisma.auction.upsert({
     *   create: {
     *     // ... data to create a Auction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auction we want to update
     *   }
     * })
     */
    upsert<T extends AuctionUpsertArgs>(args: SelectSubset<T, AuctionUpsertArgs<ExtArgs>>): Prisma__AuctionClient<$Result.GetResult<Prisma.$AuctionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Auctions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionCountArgs} args - Arguments to filter Auctions to count.
     * @example
     * // Count the number of Auctions
     * const count = await prisma.auction.count({
     *   where: {
     *     // ... the filter for the Auctions we want to count
     *   }
     * })
    **/
    count<T extends AuctionCountArgs>(
      args?: Subset<T, AuctionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuctionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuctionAggregateArgs>(args: Subset<T, AuctionAggregateArgs>): Prisma.PrismaPromise<GetAuctionAggregateType<T>>

    /**
     * Group by Auction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuctionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuctionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuctionGroupByArgs['orderBy'] }
        : { orderBy?: AuctionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuctionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuctionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Auction model
   */
  readonly fields: AuctionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Auction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuctionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    AuctionLogs<T extends Auction$AuctionLogsArgs<ExtArgs> = {}>(args?: Subset<T, Auction$AuctionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuctionLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Auction model
   */ 
  interface AuctionFieldRefs {
    readonly auctionId: FieldRef<"Auction", 'Int'>
    readonly userId: FieldRef<"Auction", 'Int'>
    readonly productId: FieldRef<"Auction", 'Int'>
    readonly startPrice: FieldRef<"Auction", 'Int'>
    readonly minimumBid: FieldRef<"Auction", 'Int'>
    readonly start: FieldRef<"Auction", 'Int'>
    readonly end: FieldRef<"Auction", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Auction findUnique
   */
  export type AuctionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findUniqueOrThrow
   */
  export type AuctionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction findFirst
   */
  export type AuctionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findFirstOrThrow
   */
  export type AuctionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auction to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Auctions.
     */
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction findMany
   */
  export type AuctionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter, which Auctions to fetch.
     */
    where?: AuctionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Auctions to fetch.
     */
    orderBy?: AuctionOrderByWithRelationInput | AuctionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Auctions.
     */
    cursor?: AuctionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Auctions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Auctions.
     */
    skip?: number
    distinct?: AuctionScalarFieldEnum | AuctionScalarFieldEnum[]
  }

  /**
   * Auction create
   */
  export type AuctionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to create a Auction.
     */
    data: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
  }

  /**
   * Auction createMany
   */
  export type AuctionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Auction createManyAndReturn
   */
  export type AuctionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Auctions.
     */
    data: AuctionCreateManyInput | AuctionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Auction update
   */
  export type AuctionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The data needed to update a Auction.
     */
    data: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
    /**
     * Choose, which Auction to update.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction updateMany
   */
  export type AuctionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Auctions.
     */
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyInput>
    /**
     * Filter which Auctions to update
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction upsert
   */
  export type AuctionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * The filter to search for the Auction to update in case it exists.
     */
    where: AuctionWhereUniqueInput
    /**
     * In case the Auction found by the `where` argument doesn't exist, create a new Auction with this data.
     */
    create: XOR<AuctionCreateInput, AuctionUncheckedCreateInput>
    /**
     * In case the Auction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuctionUpdateInput, AuctionUncheckedUpdateInput>
  }

  /**
   * Auction delete
   */
  export type AuctionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
    /**
     * Filter which Auction to delete.
     */
    where: AuctionWhereUniqueInput
  }

  /**
   * Auction deleteMany
   */
  export type AuctionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Auctions to delete
     */
    where?: AuctionWhereInput
  }

  /**
   * Auction.AuctionLogs
   */
  export type Auction$AuctionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuctionLog
     */
    select?: AuctionLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionLogInclude<ExtArgs> | null
    where?: AuctionLogWhereInput
    orderBy?: AuctionLogOrderByWithRelationInput | AuctionLogOrderByWithRelationInput[]
    cursor?: AuctionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuctionLogScalarFieldEnum | AuctionLogScalarFieldEnum[]
  }

  /**
   * Auction without action
   */
  export type AuctionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Auction
     */
    select?: AuctionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuctionInclude<ExtArgs> | null
  }


  /**
   * Model OpenOrder
   */

  export type AggregateOpenOrder = {
    _count: OpenOrderCountAggregateOutputType | null
    _avg: OpenOrderAvgAggregateOutputType | null
    _sum: OpenOrderSumAggregateOutputType | null
    _min: OpenOrderMinAggregateOutputType | null
    _max: OpenOrderMaxAggregateOutputType | null
  }

  export type OpenOrderAvgAggregateOutputType = {
    openOrderId: number | null
    userId: number | null
    categoryId: number | null
  }

  export type OpenOrderSumAggregateOutputType = {
    openOrderId: number | null
    userId: number | null
    categoryId: number | null
  }

  export type OpenOrderMinAggregateOutputType = {
    openOrderId: number | null
    userId: number | null
    productName: string | null
    categoryId: number | null
    productDescription: string | null
    productImage: string | null
  }

  export type OpenOrderMaxAggregateOutputType = {
    openOrderId: number | null
    userId: number | null
    productName: string | null
    categoryId: number | null
    productDescription: string | null
    productImage: string | null
  }

  export type OpenOrderCountAggregateOutputType = {
    openOrderId: number
    userId: number
    productName: number
    categoryId: number
    productDescription: number
    productImage: number
    _all: number
  }


  export type OpenOrderAvgAggregateInputType = {
    openOrderId?: true
    userId?: true
    categoryId?: true
  }

  export type OpenOrderSumAggregateInputType = {
    openOrderId?: true
    userId?: true
    categoryId?: true
  }

  export type OpenOrderMinAggregateInputType = {
    openOrderId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
  }

  export type OpenOrderMaxAggregateInputType = {
    openOrderId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
  }

  export type OpenOrderCountAggregateInputType = {
    openOrderId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
    _all?: true
  }

  export type OpenOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenOrder to aggregate.
     */
    where?: OpenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenOrders to fetch.
     */
    orderBy?: OpenOrderOrderByWithRelationInput | OpenOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpenOrders
    **/
    _count?: true | OpenOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpenOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpenOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpenOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpenOrderMaxAggregateInputType
  }

  export type GetOpenOrderAggregateType<T extends OpenOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOpenOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpenOrder[P]>
      : GetScalarType<T[P], AggregateOpenOrder[P]>
  }




  export type OpenOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpenOrderWhereInput
    orderBy?: OpenOrderOrderByWithAggregationInput | OpenOrderOrderByWithAggregationInput[]
    by: OpenOrderScalarFieldEnum[] | OpenOrderScalarFieldEnum
    having?: OpenOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpenOrderCountAggregateInputType | true
    _avg?: OpenOrderAvgAggregateInputType
    _sum?: OpenOrderSumAggregateInputType
    _min?: OpenOrderMinAggregateInputType
    _max?: OpenOrderMaxAggregateInputType
  }

  export type OpenOrderGroupByOutputType = {
    openOrderId: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
    _count: OpenOrderCountAggregateOutputType | null
    _avg: OpenOrderAvgAggregateOutputType | null
    _sum: OpenOrderSumAggregateOutputType | null
    _min: OpenOrderMinAggregateOutputType | null
    _max: OpenOrderMaxAggregateOutputType | null
  }

  type GetOpenOrderGroupByPayload<T extends OpenOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpenOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpenOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpenOrderGroupByOutputType[P]>
            : GetScalarType<T[P], OpenOrderGroupByOutputType[P]>
        }
      >
    >


  export type OpenOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    openOrderId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openOrder"]>

  export type OpenOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    openOrderId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["openOrder"]>

  export type OpenOrderSelectScalar = {
    openOrderId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
  }

  export type OpenOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OpenOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OpenOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpenOrder"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      openOrderId: number
      userId: number
      productName: string
      categoryId: number
      productDescription: string
      productImage: string
    }, ExtArgs["result"]["openOrder"]>
    composites: {}
  }

  type OpenOrderGetPayload<S extends boolean | null | undefined | OpenOrderDefaultArgs> = $Result.GetResult<Prisma.$OpenOrderPayload, S>

  type OpenOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpenOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpenOrderCountAggregateInputType | true
    }

  export interface OpenOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpenOrder'], meta: { name: 'OpenOrder' } }
    /**
     * Find zero or one OpenOrder that matches the filter.
     * @param {OpenOrderFindUniqueArgs} args - Arguments to find a OpenOrder
     * @example
     * // Get one OpenOrder
     * const openOrder = await prisma.openOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpenOrderFindUniqueArgs>(args: SelectSubset<T, OpenOrderFindUniqueArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpenOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpenOrderFindUniqueOrThrowArgs} args - Arguments to find a OpenOrder
     * @example
     * // Get one OpenOrder
     * const openOrder = await prisma.openOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpenOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OpenOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpenOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderFindFirstArgs} args - Arguments to find a OpenOrder
     * @example
     * // Get one OpenOrder
     * const openOrder = await prisma.openOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpenOrderFindFirstArgs>(args?: SelectSubset<T, OpenOrderFindFirstArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpenOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderFindFirstOrThrowArgs} args - Arguments to find a OpenOrder
     * @example
     * // Get one OpenOrder
     * const openOrder = await prisma.openOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpenOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OpenOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpenOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpenOrders
     * const openOrders = await prisma.openOrder.findMany()
     * 
     * // Get first 10 OpenOrders
     * const openOrders = await prisma.openOrder.findMany({ take: 10 })
     * 
     * // Only select the `openOrderId`
     * const openOrderWithOpenOrderIdOnly = await prisma.openOrder.findMany({ select: { openOrderId: true } })
     * 
     */
    findMany<T extends OpenOrderFindManyArgs>(args?: SelectSubset<T, OpenOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpenOrder.
     * @param {OpenOrderCreateArgs} args - Arguments to create a OpenOrder.
     * @example
     * // Create one OpenOrder
     * const OpenOrder = await prisma.openOrder.create({
     *   data: {
     *     // ... data to create a OpenOrder
     *   }
     * })
     * 
     */
    create<T extends OpenOrderCreateArgs>(args: SelectSubset<T, OpenOrderCreateArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpenOrders.
     * @param {OpenOrderCreateManyArgs} args - Arguments to create many OpenOrders.
     * @example
     * // Create many OpenOrders
     * const openOrder = await prisma.openOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpenOrderCreateManyArgs>(args?: SelectSubset<T, OpenOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OpenOrders and returns the data saved in the database.
     * @param {OpenOrderCreateManyAndReturnArgs} args - Arguments to create many OpenOrders.
     * @example
     * // Create many OpenOrders
     * const openOrder = await prisma.openOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OpenOrders and only return the `openOrderId`
     * const openOrderWithOpenOrderIdOnly = await prisma.openOrder.createManyAndReturn({ 
     *   select: { openOrderId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OpenOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OpenOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OpenOrder.
     * @param {OpenOrderDeleteArgs} args - Arguments to delete one OpenOrder.
     * @example
     * // Delete one OpenOrder
     * const OpenOrder = await prisma.openOrder.delete({
     *   where: {
     *     // ... filter to delete one OpenOrder
     *   }
     * })
     * 
     */
    delete<T extends OpenOrderDeleteArgs>(args: SelectSubset<T, OpenOrderDeleteArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpenOrder.
     * @param {OpenOrderUpdateArgs} args - Arguments to update one OpenOrder.
     * @example
     * // Update one OpenOrder
     * const openOrder = await prisma.openOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpenOrderUpdateArgs>(args: SelectSubset<T, OpenOrderUpdateArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpenOrders.
     * @param {OpenOrderDeleteManyArgs} args - Arguments to filter OpenOrders to delete.
     * @example
     * // Delete a few OpenOrders
     * const { count } = await prisma.openOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpenOrderDeleteManyArgs>(args?: SelectSubset<T, OpenOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpenOrders
     * const openOrder = await prisma.openOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpenOrderUpdateManyArgs>(args: SelectSubset<T, OpenOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpenOrder.
     * @param {OpenOrderUpsertArgs} args - Arguments to update or create a OpenOrder.
     * @example
     * // Update or create a OpenOrder
     * const openOrder = await prisma.openOrder.upsert({
     *   create: {
     *     // ... data to create a OpenOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpenOrder we want to update
     *   }
     * })
     */
    upsert<T extends OpenOrderUpsertArgs>(args: SelectSubset<T, OpenOrderUpsertArgs<ExtArgs>>): Prisma__OpenOrderClient<$Result.GetResult<Prisma.$OpenOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderCountArgs} args - Arguments to filter OpenOrders to count.
     * @example
     * // Count the number of OpenOrders
     * const count = await prisma.openOrder.count({
     *   where: {
     *     // ... the filter for the OpenOrders we want to count
     *   }
     * })
    **/
    count<T extends OpenOrderCountArgs>(
      args?: Subset<T, OpenOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpenOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpenOrderAggregateArgs>(args: Subset<T, OpenOrderAggregateArgs>): Prisma.PrismaPromise<GetOpenOrderAggregateType<T>>

    /**
     * Group by OpenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpenOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpenOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpenOrderGroupByArgs['orderBy'] }
        : { orderBy?: OpenOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpenOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpenOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpenOrder model
   */
  readonly fields: OpenOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpenOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpenOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpenOrder model
   */ 
  interface OpenOrderFieldRefs {
    readonly openOrderId: FieldRef<"OpenOrder", 'Int'>
    readonly userId: FieldRef<"OpenOrder", 'Int'>
    readonly productName: FieldRef<"OpenOrder", 'String'>
    readonly categoryId: FieldRef<"OpenOrder", 'Int'>
    readonly productDescription: FieldRef<"OpenOrder", 'String'>
    readonly productImage: FieldRef<"OpenOrder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OpenOrder findUnique
   */
  export type OpenOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter, which OpenOrder to fetch.
     */
    where: OpenOrderWhereUniqueInput
  }

  /**
   * OpenOrder findUniqueOrThrow
   */
  export type OpenOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter, which OpenOrder to fetch.
     */
    where: OpenOrderWhereUniqueInput
  }

  /**
   * OpenOrder findFirst
   */
  export type OpenOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter, which OpenOrder to fetch.
     */
    where?: OpenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenOrders to fetch.
     */
    orderBy?: OpenOrderOrderByWithRelationInput | OpenOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenOrders.
     */
    cursor?: OpenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenOrders.
     */
    distinct?: OpenOrderScalarFieldEnum | OpenOrderScalarFieldEnum[]
  }

  /**
   * OpenOrder findFirstOrThrow
   */
  export type OpenOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter, which OpenOrder to fetch.
     */
    where?: OpenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenOrders to fetch.
     */
    orderBy?: OpenOrderOrderByWithRelationInput | OpenOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpenOrders.
     */
    cursor?: OpenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpenOrders.
     */
    distinct?: OpenOrderScalarFieldEnum | OpenOrderScalarFieldEnum[]
  }

  /**
   * OpenOrder findMany
   */
  export type OpenOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter, which OpenOrders to fetch.
     */
    where?: OpenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpenOrders to fetch.
     */
    orderBy?: OpenOrderOrderByWithRelationInput | OpenOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpenOrders.
     */
    cursor?: OpenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpenOrders.
     */
    skip?: number
    distinct?: OpenOrderScalarFieldEnum | OpenOrderScalarFieldEnum[]
  }

  /**
   * OpenOrder create
   */
  export type OpenOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a OpenOrder.
     */
    data: XOR<OpenOrderCreateInput, OpenOrderUncheckedCreateInput>
  }

  /**
   * OpenOrder createMany
   */
  export type OpenOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpenOrders.
     */
    data: OpenOrderCreateManyInput | OpenOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OpenOrder createManyAndReturn
   */
  export type OpenOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OpenOrders.
     */
    data: OpenOrderCreateManyInput | OpenOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OpenOrder update
   */
  export type OpenOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a OpenOrder.
     */
    data: XOR<OpenOrderUpdateInput, OpenOrderUncheckedUpdateInput>
    /**
     * Choose, which OpenOrder to update.
     */
    where: OpenOrderWhereUniqueInput
  }

  /**
   * OpenOrder updateMany
   */
  export type OpenOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpenOrders.
     */
    data: XOR<OpenOrderUpdateManyMutationInput, OpenOrderUncheckedUpdateManyInput>
    /**
     * Filter which OpenOrders to update
     */
    where?: OpenOrderWhereInput
  }

  /**
   * OpenOrder upsert
   */
  export type OpenOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the OpenOrder to update in case it exists.
     */
    where: OpenOrderWhereUniqueInput
    /**
     * In case the OpenOrder found by the `where` argument doesn't exist, create a new OpenOrder with this data.
     */
    create: XOR<OpenOrderCreateInput, OpenOrderUncheckedCreateInput>
    /**
     * In case the OpenOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpenOrderUpdateInput, OpenOrderUncheckedUpdateInput>
  }

  /**
   * OpenOrder delete
   */
  export type OpenOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
    /**
     * Filter which OpenOrder to delete.
     */
    where: OpenOrderWhereUniqueInput
  }

  /**
   * OpenOrder deleteMany
   */
  export type OpenOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpenOrders to delete
     */
    where?: OpenOrderWhereInput
  }

  /**
   * OpenOrder without action
   */
  export type OpenOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpenOrder
     */
    select?: OpenOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpenOrderInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    productId: number | null
    userId: number | null
    categoryId: number | null
  }

  export type ProductSumAggregateOutputType = {
    productId: number | null
    userId: number | null
    categoryId: number | null
  }

  export type ProductMinAggregateOutputType = {
    productId: number | null
    userId: number | null
    productName: string | null
    categoryId: number | null
    productDescription: string | null
    productImage: string | null
  }

  export type ProductMaxAggregateOutputType = {
    productId: number | null
    userId: number | null
    productName: string | null
    categoryId: number | null
    productDescription: string | null
    productImage: string | null
  }

  export type ProductCountAggregateOutputType = {
    productId: number
    userId: number
    productName: number
    categoryId: number
    productDescription: number
    productImage: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    productId?: true
    userId?: true
    categoryId?: true
  }

  export type ProductSumAggregateInputType = {
    productId?: true
    userId?: true
    categoryId?: true
  }

  export type ProductMinAggregateInputType = {
    productId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
  }

  export type ProductMaxAggregateInputType = {
    productId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
  }

  export type ProductCountAggregateInputType = {
    productId?: true
    userId?: true
    productName?: true
    categoryId?: true
    productDescription?: true
    productImage?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    productId: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    productId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    productId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    productId?: boolean
    userId?: boolean
    productName?: boolean
    categoryId?: boolean
    productDescription?: boolean
    productImage?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Category: Prisma.$CategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      productId: number
      userId: number
      productName: string
      categoryId: number
      productDescription: string
      productImage: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `productId`
     * const productWithProductIdOnly = await prisma.product.findMany({ select: { productId: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `productId`
     * const productWithProductIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { productId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly productId: FieldRef<"Product", 'Int'>
    readonly userId: FieldRef<"Product", 'Int'>
    readonly productName: FieldRef<"Product", 'String'>
    readonly categoryId: FieldRef<"Product", 'Int'>
    readonly productDescription: FieldRef<"Product", 'String'>
    readonly productImage: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model UserAddress
   */

  export type AggregateUserAddress = {
    _count: UserAddressCountAggregateOutputType | null
    _avg: UserAddressAvgAggregateOutputType | null
    _sum: UserAddressSumAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  export type UserAddressAvgAggregateOutputType = {
    addressId: number | null
    userId: number | null
    postcode: number | null
    phone: number | null
  }

  export type UserAddressSumAggregateOutputType = {
    addressId: number | null
    userId: number | null
    postcode: number | null
    phone: bigint | null
  }

  export type UserAddressMinAggregateOutputType = {
    addressId: number | null
    userId: number | null
    province: string | null
    district: string | null
    subDistrict: string | null
    postcode: number | null
    address: string | null
    note: string | null
    receiverName: string | null
    phone: bigint | null
  }

  export type UserAddressMaxAggregateOutputType = {
    addressId: number | null
    userId: number | null
    province: string | null
    district: string | null
    subDistrict: string | null
    postcode: number | null
    address: string | null
    note: string | null
    receiverName: string | null
    phone: bigint | null
  }

  export type UserAddressCountAggregateOutputType = {
    addressId: number
    userId: number
    province: number
    district: number
    subDistrict: number
    postcode: number
    address: number
    note: number
    receiverName: number
    phone: number
    _all: number
  }


  export type UserAddressAvgAggregateInputType = {
    addressId?: true
    userId?: true
    postcode?: true
    phone?: true
  }

  export type UserAddressSumAggregateInputType = {
    addressId?: true
    userId?: true
    postcode?: true
    phone?: true
  }

  export type UserAddressMinAggregateInputType = {
    addressId?: true
    userId?: true
    province?: true
    district?: true
    subDistrict?: true
    postcode?: true
    address?: true
    note?: true
    receiverName?: true
    phone?: true
  }

  export type UserAddressMaxAggregateInputType = {
    addressId?: true
    userId?: true
    province?: true
    district?: true
    subDistrict?: true
    postcode?: true
    address?: true
    note?: true
    receiverName?: true
    phone?: true
  }

  export type UserAddressCountAggregateInputType = {
    addressId?: true
    userId?: true
    province?: true
    district?: true
    subDistrict?: true
    postcode?: true
    address?: true
    note?: true
    receiverName?: true
    phone?: true
    _all?: true
  }

  export type UserAddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAddress to aggregate.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: UserAddressOrderByWithRelationInput | UserAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAddresses
    **/
    _count?: true | UserAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAddressMaxAggregateInputType
  }

  export type GetUserAddressAggregateType<T extends UserAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAddress[P]>
      : GetScalarType<T[P], AggregateUserAddress[P]>
  }




  export type UserAddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAddressWhereInput
    orderBy?: UserAddressOrderByWithAggregationInput | UserAddressOrderByWithAggregationInput[]
    by: UserAddressScalarFieldEnum[] | UserAddressScalarFieldEnum
    having?: UserAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAddressCountAggregateInputType | true
    _avg?: UserAddressAvgAggregateInputType
    _sum?: UserAddressSumAggregateInputType
    _min?: UserAddressMinAggregateInputType
    _max?: UserAddressMaxAggregateInputType
  }

  export type UserAddressGroupByOutputType = {
    addressId: number
    userId: number
    province: string
    district: string
    subDistrict: string | null
    postcode: number
    address: string | null
    note: string | null
    receiverName: string
    phone: bigint
    _count: UserAddressCountAggregateOutputType | null
    _avg: UserAddressAvgAggregateOutputType | null
    _sum: UserAddressSumAggregateOutputType | null
    _min: UserAddressMinAggregateOutputType | null
    _max: UserAddressMaxAggregateOutputType | null
  }

  type GetUserAddressGroupByPayload<T extends UserAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
            : GetScalarType<T[P], UserAddressGroupByOutputType[P]>
        }
      >
    >


  export type UserAddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    addressId?: boolean
    userId?: boolean
    province?: boolean
    district?: boolean
    subDistrict?: boolean
    postcode?: boolean
    address?: boolean
    note?: boolean
    receiverName?: boolean
    phone?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAddress"]>

  export type UserAddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    addressId?: boolean
    userId?: boolean
    province?: boolean
    district?: boolean
    subDistrict?: boolean
    postcode?: boolean
    address?: boolean
    note?: boolean
    receiverName?: boolean
    phone?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAddress"]>

  export type UserAddressSelectScalar = {
    addressId?: boolean
    userId?: boolean
    province?: boolean
    district?: boolean
    subDistrict?: boolean
    postcode?: boolean
    address?: boolean
    note?: boolean
    receiverName?: boolean
    phone?: boolean
  }

  export type UserAddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserAddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserAddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAddress"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      addressId: number
      userId: number
      province: string
      district: string
      subDistrict: string | null
      postcode: number
      address: string | null
      note: string | null
      receiverName: string
      phone: bigint
    }, ExtArgs["result"]["userAddress"]>
    composites: {}
  }

  type UserAddressGetPayload<S extends boolean | null | undefined | UserAddressDefaultArgs> = $Result.GetResult<Prisma.$UserAddressPayload, S>

  type UserAddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserAddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserAddressCountAggregateInputType | true
    }

  export interface UserAddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAddress'], meta: { name: 'UserAddress' } }
    /**
     * Find zero or one UserAddress that matches the filter.
     * @param {UserAddressFindUniqueArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAddressFindUniqueArgs>(args: SelectSubset<T, UserAddressFindUniqueArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserAddress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserAddressFindUniqueOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAddressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAddressFindFirstArgs>(args?: SelectSubset<T, UserAddressFindFirstArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindFirstOrThrowArgs} args - Arguments to find a UserAddress
     * @example
     * // Get one UserAddress
     * const userAddress = await prisma.userAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAddressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAddresses
     * const userAddresses = await prisma.userAddress.findMany()
     * 
     * // Get first 10 UserAddresses
     * const userAddresses = await prisma.userAddress.findMany({ take: 10 })
     * 
     * // Only select the `addressId`
     * const userAddressWithAddressIdOnly = await prisma.userAddress.findMany({ select: { addressId: true } })
     * 
     */
    findMany<T extends UserAddressFindManyArgs>(args?: SelectSubset<T, UserAddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserAddress.
     * @param {UserAddressCreateArgs} args - Arguments to create a UserAddress.
     * @example
     * // Create one UserAddress
     * const UserAddress = await prisma.userAddress.create({
     *   data: {
     *     // ... data to create a UserAddress
     *   }
     * })
     * 
     */
    create<T extends UserAddressCreateArgs>(args: SelectSubset<T, UserAddressCreateArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserAddresses.
     * @param {UserAddressCreateManyArgs} args - Arguments to create many UserAddresses.
     * @example
     * // Create many UserAddresses
     * const userAddress = await prisma.userAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAddressCreateManyArgs>(args?: SelectSubset<T, UserAddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAddresses and returns the data saved in the database.
     * @param {UserAddressCreateManyAndReturnArgs} args - Arguments to create many UserAddresses.
     * @example
     * // Create many UserAddresses
     * const userAddress = await prisma.userAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAddresses and only return the `addressId`
     * const userAddressWithAddressIdOnly = await prisma.userAddress.createManyAndReturn({ 
     *   select: { addressId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAddressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserAddress.
     * @param {UserAddressDeleteArgs} args - Arguments to delete one UserAddress.
     * @example
     * // Delete one UserAddress
     * const UserAddress = await prisma.userAddress.delete({
     *   where: {
     *     // ... filter to delete one UserAddress
     *   }
     * })
     * 
     */
    delete<T extends UserAddressDeleteArgs>(args: SelectSubset<T, UserAddressDeleteArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserAddress.
     * @param {UserAddressUpdateArgs} args - Arguments to update one UserAddress.
     * @example
     * // Update one UserAddress
     * const userAddress = await prisma.userAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAddressUpdateArgs>(args: SelectSubset<T, UserAddressUpdateArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserAddresses.
     * @param {UserAddressDeleteManyArgs} args - Arguments to filter UserAddresses to delete.
     * @example
     * // Delete a few UserAddresses
     * const { count } = await prisma.userAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAddressDeleteManyArgs>(args?: SelectSubset<T, UserAddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAddresses
     * const userAddress = await prisma.userAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAddressUpdateManyArgs>(args: SelectSubset<T, UserAddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAddress.
     * @param {UserAddressUpsertArgs} args - Arguments to update or create a UserAddress.
     * @example
     * // Update or create a UserAddress
     * const userAddress = await prisma.userAddress.upsert({
     *   create: {
     *     // ... data to create a UserAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAddress we want to update
     *   }
     * })
     */
    upsert<T extends UserAddressUpsertArgs>(args: SelectSubset<T, UserAddressUpsertArgs<ExtArgs>>): Prisma__UserAddressClient<$Result.GetResult<Prisma.$UserAddressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressCountArgs} args - Arguments to filter UserAddresses to count.
     * @example
     * // Count the number of UserAddresses
     * const count = await prisma.userAddress.count({
     *   where: {
     *     // ... the filter for the UserAddresses we want to count
     *   }
     * })
    **/
    count<T extends UserAddressCountArgs>(
      args?: Subset<T, UserAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAddressAggregateArgs>(args: Subset<T, UserAddressAggregateArgs>): Prisma.PrismaPromise<GetUserAddressAggregateType<T>>

    /**
     * Group by UserAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAddressGroupByArgs['orderBy'] }
        : { orderBy?: UserAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAddress model
   */
  readonly fields: UserAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAddress model
   */ 
  interface UserAddressFieldRefs {
    readonly addressId: FieldRef<"UserAddress", 'Int'>
    readonly userId: FieldRef<"UserAddress", 'Int'>
    readonly province: FieldRef<"UserAddress", 'String'>
    readonly district: FieldRef<"UserAddress", 'String'>
    readonly subDistrict: FieldRef<"UserAddress", 'String'>
    readonly postcode: FieldRef<"UserAddress", 'Int'>
    readonly address: FieldRef<"UserAddress", 'String'>
    readonly note: FieldRef<"UserAddress", 'String'>
    readonly receiverName: FieldRef<"UserAddress", 'String'>
    readonly phone: FieldRef<"UserAddress", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * UserAddress findUnique
   */
  export type UserAddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress findUniqueOrThrow
   */
  export type UserAddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress findFirst
   */
  export type UserAddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: UserAddressOrderByWithRelationInput | UserAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[]
  }

  /**
   * UserAddress findFirstOrThrow
   */
  export type UserAddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddress to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: UserAddressOrderByWithRelationInput | UserAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAddresses.
     */
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[]
  }

  /**
   * UserAddress findMany
   */
  export type UserAddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter, which UserAddresses to fetch.
     */
    where?: UserAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAddresses to fetch.
     */
    orderBy?: UserAddressOrderByWithRelationInput | UserAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAddresses.
     */
    cursor?: UserAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAddresses.
     */
    skip?: number
    distinct?: UserAddressScalarFieldEnum | UserAddressScalarFieldEnum[]
  }

  /**
   * UserAddress create
   */
  export type UserAddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAddress.
     */
    data: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
  }

  /**
   * UserAddress createMany
   */
  export type UserAddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAddresses.
     */
    data: UserAddressCreateManyInput | UserAddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAddress createManyAndReturn
   */
  export type UserAddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserAddresses.
     */
    data: UserAddressCreateManyInput | UserAddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAddress update
   */
  export type UserAddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAddress.
     */
    data: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
    /**
     * Choose, which UserAddress to update.
     */
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress updateMany
   */
  export type UserAddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAddresses.
     */
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyInput>
    /**
     * Filter which UserAddresses to update
     */
    where?: UserAddressWhereInput
  }

  /**
   * UserAddress upsert
   */
  export type UserAddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAddress to update in case it exists.
     */
    where: UserAddressWhereUniqueInput
    /**
     * In case the UserAddress found by the `where` argument doesn't exist, create a new UserAddress with this data.
     */
    create: XOR<UserAddressCreateInput, UserAddressUncheckedCreateInput>
    /**
     * In case the UserAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAddressUpdateInput, UserAddressUncheckedUpdateInput>
  }

  /**
   * UserAddress delete
   */
  export type UserAddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
    /**
     * Filter which UserAddress to delete.
     */
    where: UserAddressWhereUniqueInput
  }

  /**
   * UserAddress deleteMany
   */
  export type UserAddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAddresses to delete
     */
    where?: UserAddressWhereInput
  }

  /**
   * UserAddress without action
   */
  export type UserAddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAddress
     */
    select?: UserAddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAddressInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    categoryId: number | null
  }

  export type CategorySumAggregateOutputType = {
    categoryId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    categoryId: number | null
    categoryName: string | null
    detail: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    categoryId: number | null
    categoryName: string | null
    detail: string | null
  }

  export type CategoryCountAggregateOutputType = {
    categoryId: number
    categoryName: number
    detail: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    categoryId?: true
  }

  export type CategorySumAggregateInputType = {
    categoryId?: true
  }

  export type CategoryMinAggregateInputType = {
    categoryId?: true
    categoryName?: true
    detail?: true
  }

  export type CategoryMaxAggregateInputType = {
    categoryId?: true
    categoryName?: true
    detail?: true
  }

  export type CategoryCountAggregateInputType = {
    categoryId?: true
    categoryName?: true
    detail?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    categoryId: number
    categoryName: string
    detail: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    categoryName?: boolean
    detail?: boolean
    Products?: boolean | Category$ProductsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    categoryId?: boolean
    categoryName?: boolean
    detail?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    categoryId?: boolean
    categoryName?: boolean
    detail?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Products?: boolean | Category$ProductsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      Products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      categoryId: number
      categoryName: string
      detail: string | null
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.findMany({ select: { categoryId: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `categoryId`
     * const categoryWithCategoryIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { categoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Products<T extends Category$ProductsArgs<ExtArgs> = {}>(args?: Subset<T, Category$ProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly categoryId: FieldRef<"Category", 'Int'>
    readonly categoryName: FieldRef<"Category", 'String'>
    readonly detail: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.Products
   */
  export type Category$ProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model WalletLog
   */

  export type AggregateWalletLog = {
    _count: WalletLogCountAggregateOutputType | null
    _avg: WalletLogAvgAggregateOutputType | null
    _sum: WalletLogSumAggregateOutputType | null
    _min: WalletLogMinAggregateOutputType | null
    _max: WalletLogMaxAggregateOutputType | null
  }

  export type WalletLogAvgAggregateOutputType = {
    walletLogId: number | null
    walletId: number | null
    transactionType: number | null
    value: number | null
  }

  export type WalletLogSumAggregateOutputType = {
    walletLogId: number | null
    walletId: number | null
    transactionType: number | null
    value: number | null
  }

  export type WalletLogMinAggregateOutputType = {
    walletLogId: number | null
    walletId: number | null
    transactionType: number | null
    value: number | null
  }

  export type WalletLogMaxAggregateOutputType = {
    walletLogId: number | null
    walletId: number | null
    transactionType: number | null
    value: number | null
  }

  export type WalletLogCountAggregateOutputType = {
    walletLogId: number
    walletId: number
    transactionType: number
    value: number
    _all: number
  }


  export type WalletLogAvgAggregateInputType = {
    walletLogId?: true
    walletId?: true
    transactionType?: true
    value?: true
  }

  export type WalletLogSumAggregateInputType = {
    walletLogId?: true
    walletId?: true
    transactionType?: true
    value?: true
  }

  export type WalletLogMinAggregateInputType = {
    walletLogId?: true
    walletId?: true
    transactionType?: true
    value?: true
  }

  export type WalletLogMaxAggregateInputType = {
    walletLogId?: true
    walletId?: true
    transactionType?: true
    value?: true
  }

  export type WalletLogCountAggregateInputType = {
    walletLogId?: true
    walletId?: true
    transactionType?: true
    value?: true
    _all?: true
  }

  export type WalletLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletLog to aggregate.
     */
    where?: WalletLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletLogs to fetch.
     */
    orderBy?: WalletLogOrderByWithRelationInput | WalletLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletLogs
    **/
    _count?: true | WalletLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletLogMaxAggregateInputType
  }

  export type GetWalletLogAggregateType<T extends WalletLogAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletLog[P]>
      : GetScalarType<T[P], AggregateWalletLog[P]>
  }




  export type WalletLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletLogWhereInput
    orderBy?: WalletLogOrderByWithAggregationInput | WalletLogOrderByWithAggregationInput[]
    by: WalletLogScalarFieldEnum[] | WalletLogScalarFieldEnum
    having?: WalletLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletLogCountAggregateInputType | true
    _avg?: WalletLogAvgAggregateInputType
    _sum?: WalletLogSumAggregateInputType
    _min?: WalletLogMinAggregateInputType
    _max?: WalletLogMaxAggregateInputType
  }

  export type WalletLogGroupByOutputType = {
    walletLogId: number
    walletId: number
    transactionType: number
    value: number
    _count: WalletLogCountAggregateOutputType | null
    _avg: WalletLogAvgAggregateOutputType | null
    _sum: WalletLogSumAggregateOutputType | null
    _min: WalletLogMinAggregateOutputType | null
    _max: WalletLogMaxAggregateOutputType | null
  }

  type GetWalletLogGroupByPayload<T extends WalletLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletLogGroupByOutputType[P]>
            : GetScalarType<T[P], WalletLogGroupByOutputType[P]>
        }
      >
    >


  export type WalletLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletLogId?: boolean
    walletId?: boolean
    transactionType?: boolean
    value?: boolean
    UserWallet?: boolean | UserWalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletLog"]>

  export type WalletLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletLogId?: boolean
    walletId?: boolean
    transactionType?: boolean
    value?: boolean
    UserWallet?: boolean | UserWalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletLog"]>

  export type WalletLogSelectScalar = {
    walletLogId?: boolean
    walletId?: boolean
    transactionType?: boolean
    value?: boolean
  }

  export type WalletLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserWallet?: boolean | UserWalletDefaultArgs<ExtArgs>
  }
  export type WalletLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserWallet?: boolean | UserWalletDefaultArgs<ExtArgs>
  }

  export type $WalletLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WalletLog"
    objects: {
      UserWallet: Prisma.$UserWalletPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      walletLogId: number
      walletId: number
      transactionType: number
      value: number
    }, ExtArgs["result"]["walletLog"]>
    composites: {}
  }

  type WalletLogGetPayload<S extends boolean | null | undefined | WalletLogDefaultArgs> = $Result.GetResult<Prisma.$WalletLogPayload, S>

  type WalletLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WalletLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WalletLogCountAggregateInputType | true
    }

  export interface WalletLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletLog'], meta: { name: 'WalletLog' } }
    /**
     * Find zero or one WalletLog that matches the filter.
     * @param {WalletLogFindUniqueArgs} args - Arguments to find a WalletLog
     * @example
     * // Get one WalletLog
     * const walletLog = await prisma.walletLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletLogFindUniqueArgs>(args: SelectSubset<T, WalletLogFindUniqueArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WalletLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WalletLogFindUniqueOrThrowArgs} args - Arguments to find a WalletLog
     * @example
     * // Get one WalletLog
     * const walletLog = await prisma.walletLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletLogFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WalletLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogFindFirstArgs} args - Arguments to find a WalletLog
     * @example
     * // Get one WalletLog
     * const walletLog = await prisma.walletLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletLogFindFirstArgs>(args?: SelectSubset<T, WalletLogFindFirstArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WalletLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogFindFirstOrThrowArgs} args - Arguments to find a WalletLog
     * @example
     * // Get one WalletLog
     * const walletLog = await prisma.walletLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletLogFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WalletLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletLogs
     * const walletLogs = await prisma.walletLog.findMany()
     * 
     * // Get first 10 WalletLogs
     * const walletLogs = await prisma.walletLog.findMany({ take: 10 })
     * 
     * // Only select the `walletLogId`
     * const walletLogWithWalletLogIdOnly = await prisma.walletLog.findMany({ select: { walletLogId: true } })
     * 
     */
    findMany<T extends WalletLogFindManyArgs>(args?: SelectSubset<T, WalletLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WalletLog.
     * @param {WalletLogCreateArgs} args - Arguments to create a WalletLog.
     * @example
     * // Create one WalletLog
     * const WalletLog = await prisma.walletLog.create({
     *   data: {
     *     // ... data to create a WalletLog
     *   }
     * })
     * 
     */
    create<T extends WalletLogCreateArgs>(args: SelectSubset<T, WalletLogCreateArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WalletLogs.
     * @param {WalletLogCreateManyArgs} args - Arguments to create many WalletLogs.
     * @example
     * // Create many WalletLogs
     * const walletLog = await prisma.walletLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletLogCreateManyArgs>(args?: SelectSubset<T, WalletLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WalletLogs and returns the data saved in the database.
     * @param {WalletLogCreateManyAndReturnArgs} args - Arguments to create many WalletLogs.
     * @example
     * // Create many WalletLogs
     * const walletLog = await prisma.walletLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WalletLogs and only return the `walletLogId`
     * const walletLogWithWalletLogIdOnly = await prisma.walletLog.createManyAndReturn({ 
     *   select: { walletLogId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletLogCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WalletLog.
     * @param {WalletLogDeleteArgs} args - Arguments to delete one WalletLog.
     * @example
     * // Delete one WalletLog
     * const WalletLog = await prisma.walletLog.delete({
     *   where: {
     *     // ... filter to delete one WalletLog
     *   }
     * })
     * 
     */
    delete<T extends WalletLogDeleteArgs>(args: SelectSubset<T, WalletLogDeleteArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WalletLog.
     * @param {WalletLogUpdateArgs} args - Arguments to update one WalletLog.
     * @example
     * // Update one WalletLog
     * const walletLog = await prisma.walletLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletLogUpdateArgs>(args: SelectSubset<T, WalletLogUpdateArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WalletLogs.
     * @param {WalletLogDeleteManyArgs} args - Arguments to filter WalletLogs to delete.
     * @example
     * // Delete a few WalletLogs
     * const { count } = await prisma.walletLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletLogDeleteManyArgs>(args?: SelectSubset<T, WalletLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletLogs
     * const walletLog = await prisma.walletLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletLogUpdateManyArgs>(args: SelectSubset<T, WalletLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WalletLog.
     * @param {WalletLogUpsertArgs} args - Arguments to update or create a WalletLog.
     * @example
     * // Update or create a WalletLog
     * const walletLog = await prisma.walletLog.upsert({
     *   create: {
     *     // ... data to create a WalletLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletLog we want to update
     *   }
     * })
     */
    upsert<T extends WalletLogUpsertArgs>(args: SelectSubset<T, WalletLogUpsertArgs<ExtArgs>>): Prisma__WalletLogClient<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WalletLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogCountArgs} args - Arguments to filter WalletLogs to count.
     * @example
     * // Count the number of WalletLogs
     * const count = await prisma.walletLog.count({
     *   where: {
     *     // ... the filter for the WalletLogs we want to count
     *   }
     * })
    **/
    count<T extends WalletLogCountArgs>(
      args?: Subset<T, WalletLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletLogAggregateArgs>(args: Subset<T, WalletLogAggregateArgs>): Prisma.PrismaPromise<GetWalletLogAggregateType<T>>

    /**
     * Group by WalletLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletLogGroupByArgs['orderBy'] }
        : { orderBy?: WalletLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WalletLog model
   */
  readonly fields: WalletLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    UserWallet<T extends UserWalletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserWalletDefaultArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WalletLog model
   */ 
  interface WalletLogFieldRefs {
    readonly walletLogId: FieldRef<"WalletLog", 'Int'>
    readonly walletId: FieldRef<"WalletLog", 'Int'>
    readonly transactionType: FieldRef<"WalletLog", 'Int'>
    readonly value: FieldRef<"WalletLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WalletLog findUnique
   */
  export type WalletLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter, which WalletLog to fetch.
     */
    where: WalletLogWhereUniqueInput
  }

  /**
   * WalletLog findUniqueOrThrow
   */
  export type WalletLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter, which WalletLog to fetch.
     */
    where: WalletLogWhereUniqueInput
  }

  /**
   * WalletLog findFirst
   */
  export type WalletLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter, which WalletLog to fetch.
     */
    where?: WalletLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletLogs to fetch.
     */
    orderBy?: WalletLogOrderByWithRelationInput | WalletLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletLogs.
     */
    cursor?: WalletLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletLogs.
     */
    distinct?: WalletLogScalarFieldEnum | WalletLogScalarFieldEnum[]
  }

  /**
   * WalletLog findFirstOrThrow
   */
  export type WalletLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter, which WalletLog to fetch.
     */
    where?: WalletLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletLogs to fetch.
     */
    orderBy?: WalletLogOrderByWithRelationInput | WalletLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletLogs.
     */
    cursor?: WalletLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletLogs.
     */
    distinct?: WalletLogScalarFieldEnum | WalletLogScalarFieldEnum[]
  }

  /**
   * WalletLog findMany
   */
  export type WalletLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter, which WalletLogs to fetch.
     */
    where?: WalletLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletLogs to fetch.
     */
    orderBy?: WalletLogOrderByWithRelationInput | WalletLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletLogs.
     */
    cursor?: WalletLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletLogs.
     */
    skip?: number
    distinct?: WalletLogScalarFieldEnum | WalletLogScalarFieldEnum[]
  }

  /**
   * WalletLog create
   */
  export type WalletLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletLog.
     */
    data: XOR<WalletLogCreateInput, WalletLogUncheckedCreateInput>
  }

  /**
   * WalletLog createMany
   */
  export type WalletLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WalletLogs.
     */
    data: WalletLogCreateManyInput | WalletLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WalletLog createManyAndReturn
   */
  export type WalletLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WalletLogs.
     */
    data: WalletLogCreateManyInput | WalletLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletLog update
   */
  export type WalletLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletLog.
     */
    data: XOR<WalletLogUpdateInput, WalletLogUncheckedUpdateInput>
    /**
     * Choose, which WalletLog to update.
     */
    where: WalletLogWhereUniqueInput
  }

  /**
   * WalletLog updateMany
   */
  export type WalletLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletLogs.
     */
    data: XOR<WalletLogUpdateManyMutationInput, WalletLogUncheckedUpdateManyInput>
    /**
     * Filter which WalletLogs to update
     */
    where?: WalletLogWhereInput
  }

  /**
   * WalletLog upsert
   */
  export type WalletLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletLog to update in case it exists.
     */
    where: WalletLogWhereUniqueInput
    /**
     * In case the WalletLog found by the `where` argument doesn't exist, create a new WalletLog with this data.
     */
    create: XOR<WalletLogCreateInput, WalletLogUncheckedCreateInput>
    /**
     * In case the WalletLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletLogUpdateInput, WalletLogUncheckedUpdateInput>
  }

  /**
   * WalletLog delete
   */
  export type WalletLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    /**
     * Filter which WalletLog to delete.
     */
    where: WalletLogWhereUniqueInput
  }

  /**
   * WalletLog deleteMany
   */
  export type WalletLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletLogs to delete
     */
    where?: WalletLogWhereInput
  }

  /**
   * WalletLog without action
   */
  export type WalletLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
  }


  /**
   * Model UserPayment
   */

  export type AggregateUserPayment = {
    _count: UserPaymentCountAggregateOutputType | null
    _avg: UserPaymentAvgAggregateOutputType | null
    _sum: UserPaymentSumAggregateOutputType | null
    _min: UserPaymentMinAggregateOutputType | null
    _max: UserPaymentMaxAggregateOutputType | null
  }

  export type UserPaymentAvgAggregateOutputType = {
    paymentId: number | null
    userId: number | null
    paymentType: number | null
  }

  export type UserPaymentSumAggregateOutputType = {
    paymentId: number | null
    userId: number | null
    paymentType: number | null
  }

  export type UserPaymentMinAggregateOutputType = {
    paymentId: number | null
    userId: number | null
    paymentType: number | null
    data1: string | null
    data2: string | null
    data3: string | null
  }

  export type UserPaymentMaxAggregateOutputType = {
    paymentId: number | null
    userId: number | null
    paymentType: number | null
    data1: string | null
    data2: string | null
    data3: string | null
  }

  export type UserPaymentCountAggregateOutputType = {
    paymentId: number
    userId: number
    paymentType: number
    data1: number
    data2: number
    data3: number
    _all: number
  }


  export type UserPaymentAvgAggregateInputType = {
    paymentId?: true
    userId?: true
    paymentType?: true
  }

  export type UserPaymentSumAggregateInputType = {
    paymentId?: true
    userId?: true
    paymentType?: true
  }

  export type UserPaymentMinAggregateInputType = {
    paymentId?: true
    userId?: true
    paymentType?: true
    data1?: true
    data2?: true
    data3?: true
  }

  export type UserPaymentMaxAggregateInputType = {
    paymentId?: true
    userId?: true
    paymentType?: true
    data1?: true
    data2?: true
    data3?: true
  }

  export type UserPaymentCountAggregateInputType = {
    paymentId?: true
    userId?: true
    paymentType?: true
    data1?: true
    data2?: true
    data3?: true
    _all?: true
  }

  export type UserPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPayment to aggregate.
     */
    where?: UserPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPayments to fetch.
     */
    orderBy?: UserPaymentOrderByWithRelationInput | UserPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPayments
    **/
    _count?: true | UserPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPaymentMaxAggregateInputType
  }

  export type GetUserPaymentAggregateType<T extends UserPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPayment[P]>
      : GetScalarType<T[P], AggregateUserPayment[P]>
  }




  export type UserPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPaymentWhereInput
    orderBy?: UserPaymentOrderByWithAggregationInput | UserPaymentOrderByWithAggregationInput[]
    by: UserPaymentScalarFieldEnum[] | UserPaymentScalarFieldEnum
    having?: UserPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPaymentCountAggregateInputType | true
    _avg?: UserPaymentAvgAggregateInputType
    _sum?: UserPaymentSumAggregateInputType
    _min?: UserPaymentMinAggregateInputType
    _max?: UserPaymentMaxAggregateInputType
  }

  export type UserPaymentGroupByOutputType = {
    paymentId: number
    userId: number
    paymentType: number
    data1: string | null
    data2: string | null
    data3: string | null
    _count: UserPaymentCountAggregateOutputType | null
    _avg: UserPaymentAvgAggregateOutputType | null
    _sum: UserPaymentSumAggregateOutputType | null
    _min: UserPaymentMinAggregateOutputType | null
    _max: UserPaymentMaxAggregateOutputType | null
  }

  type GetUserPaymentGroupByPayload<T extends UserPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], UserPaymentGroupByOutputType[P]>
        }
      >
    >


  export type UserPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    paymentId?: boolean
    userId?: boolean
    paymentType?: boolean
    data1?: boolean
    data2?: boolean
    data3?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPayment"]>

  export type UserPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    paymentId?: boolean
    userId?: boolean
    paymentType?: boolean
    data1?: boolean
    data2?: boolean
    data3?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPayment"]>

  export type UserPaymentSelectScalar = {
    paymentId?: boolean
    userId?: boolean
    paymentType?: boolean
    data1?: boolean
    data2?: boolean
    data3?: boolean
  }

  export type UserPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPayment"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      paymentId: number
      userId: number
      paymentType: number
      data1: string | null
      data2: string | null
      data3: string | null
    }, ExtArgs["result"]["userPayment"]>
    composites: {}
  }

  type UserPaymentGetPayload<S extends boolean | null | undefined | UserPaymentDefaultArgs> = $Result.GetResult<Prisma.$UserPaymentPayload, S>

  type UserPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPaymentCountAggregateInputType | true
    }

  export interface UserPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPayment'], meta: { name: 'UserPayment' } }
    /**
     * Find zero or one UserPayment that matches the filter.
     * @param {UserPaymentFindUniqueArgs} args - Arguments to find a UserPayment
     * @example
     * // Get one UserPayment
     * const userPayment = await prisma.userPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPaymentFindUniqueArgs>(args: SelectSubset<T, UserPaymentFindUniqueArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPayment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPaymentFindUniqueOrThrowArgs} args - Arguments to find a UserPayment
     * @example
     * // Get one UserPayment
     * const userPayment = await prisma.userPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentFindFirstArgs} args - Arguments to find a UserPayment
     * @example
     * // Get one UserPayment
     * const userPayment = await prisma.userPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPaymentFindFirstArgs>(args?: SelectSubset<T, UserPaymentFindFirstArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentFindFirstOrThrowArgs} args - Arguments to find a UserPayment
     * @example
     * // Get one UserPayment
     * const userPayment = await prisma.userPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPayments
     * const userPayments = await prisma.userPayment.findMany()
     * 
     * // Get first 10 UserPayments
     * const userPayments = await prisma.userPayment.findMany({ take: 10 })
     * 
     * // Only select the `paymentId`
     * const userPaymentWithPaymentIdOnly = await prisma.userPayment.findMany({ select: { paymentId: true } })
     * 
     */
    findMany<T extends UserPaymentFindManyArgs>(args?: SelectSubset<T, UserPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPayment.
     * @param {UserPaymentCreateArgs} args - Arguments to create a UserPayment.
     * @example
     * // Create one UserPayment
     * const UserPayment = await prisma.userPayment.create({
     *   data: {
     *     // ... data to create a UserPayment
     *   }
     * })
     * 
     */
    create<T extends UserPaymentCreateArgs>(args: SelectSubset<T, UserPaymentCreateArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPayments.
     * @param {UserPaymentCreateManyArgs} args - Arguments to create many UserPayments.
     * @example
     * // Create many UserPayments
     * const userPayment = await prisma.userPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPaymentCreateManyArgs>(args?: SelectSubset<T, UserPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPayments and returns the data saved in the database.
     * @param {UserPaymentCreateManyAndReturnArgs} args - Arguments to create many UserPayments.
     * @example
     * // Create many UserPayments
     * const userPayment = await prisma.userPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPayments and only return the `paymentId`
     * const userPaymentWithPaymentIdOnly = await prisma.userPayment.createManyAndReturn({ 
     *   select: { paymentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPayment.
     * @param {UserPaymentDeleteArgs} args - Arguments to delete one UserPayment.
     * @example
     * // Delete one UserPayment
     * const UserPayment = await prisma.userPayment.delete({
     *   where: {
     *     // ... filter to delete one UserPayment
     *   }
     * })
     * 
     */
    delete<T extends UserPaymentDeleteArgs>(args: SelectSubset<T, UserPaymentDeleteArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPayment.
     * @param {UserPaymentUpdateArgs} args - Arguments to update one UserPayment.
     * @example
     * // Update one UserPayment
     * const userPayment = await prisma.userPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPaymentUpdateArgs>(args: SelectSubset<T, UserPaymentUpdateArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPayments.
     * @param {UserPaymentDeleteManyArgs} args - Arguments to filter UserPayments to delete.
     * @example
     * // Delete a few UserPayments
     * const { count } = await prisma.userPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPaymentDeleteManyArgs>(args?: SelectSubset<T, UserPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPayments
     * const userPayment = await prisma.userPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPaymentUpdateManyArgs>(args: SelectSubset<T, UserPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPayment.
     * @param {UserPaymentUpsertArgs} args - Arguments to update or create a UserPayment.
     * @example
     * // Update or create a UserPayment
     * const userPayment = await prisma.userPayment.upsert({
     *   create: {
     *     // ... data to create a UserPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPayment we want to update
     *   }
     * })
     */
    upsert<T extends UserPaymentUpsertArgs>(args: SelectSubset<T, UserPaymentUpsertArgs<ExtArgs>>): Prisma__UserPaymentClient<$Result.GetResult<Prisma.$UserPaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentCountArgs} args - Arguments to filter UserPayments to count.
     * @example
     * // Count the number of UserPayments
     * const count = await prisma.userPayment.count({
     *   where: {
     *     // ... the filter for the UserPayments we want to count
     *   }
     * })
    **/
    count<T extends UserPaymentCountArgs>(
      args?: Subset<T, UserPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPaymentAggregateArgs>(args: Subset<T, UserPaymentAggregateArgs>): Prisma.PrismaPromise<GetUserPaymentAggregateType<T>>

    /**
     * Group by UserPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPaymentGroupByArgs['orderBy'] }
        : { orderBy?: UserPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPayment model
   */
  readonly fields: UserPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPayment model
   */ 
  interface UserPaymentFieldRefs {
    readonly paymentId: FieldRef<"UserPayment", 'Int'>
    readonly userId: FieldRef<"UserPayment", 'Int'>
    readonly paymentType: FieldRef<"UserPayment", 'Int'>
    readonly data1: FieldRef<"UserPayment", 'String'>
    readonly data2: FieldRef<"UserPayment", 'String'>
    readonly data3: FieldRef<"UserPayment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserPayment findUnique
   */
  export type UserPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter, which UserPayment to fetch.
     */
    where: UserPaymentWhereUniqueInput
  }

  /**
   * UserPayment findUniqueOrThrow
   */
  export type UserPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter, which UserPayment to fetch.
     */
    where: UserPaymentWhereUniqueInput
  }

  /**
   * UserPayment findFirst
   */
  export type UserPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter, which UserPayment to fetch.
     */
    where?: UserPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPayments to fetch.
     */
    orderBy?: UserPaymentOrderByWithRelationInput | UserPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPayments.
     */
    cursor?: UserPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPayments.
     */
    distinct?: UserPaymentScalarFieldEnum | UserPaymentScalarFieldEnum[]
  }

  /**
   * UserPayment findFirstOrThrow
   */
  export type UserPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter, which UserPayment to fetch.
     */
    where?: UserPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPayments to fetch.
     */
    orderBy?: UserPaymentOrderByWithRelationInput | UserPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPayments.
     */
    cursor?: UserPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPayments.
     */
    distinct?: UserPaymentScalarFieldEnum | UserPaymentScalarFieldEnum[]
  }

  /**
   * UserPayment findMany
   */
  export type UserPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter, which UserPayments to fetch.
     */
    where?: UserPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPayments to fetch.
     */
    orderBy?: UserPaymentOrderByWithRelationInput | UserPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPayments.
     */
    cursor?: UserPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPayments.
     */
    skip?: number
    distinct?: UserPaymentScalarFieldEnum | UserPaymentScalarFieldEnum[]
  }

  /**
   * UserPayment create
   */
  export type UserPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPayment.
     */
    data: XOR<UserPaymentCreateInput, UserPaymentUncheckedCreateInput>
  }

  /**
   * UserPayment createMany
   */
  export type UserPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPayments.
     */
    data: UserPaymentCreateManyInput | UserPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPayment createManyAndReturn
   */
  export type UserPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPayments.
     */
    data: UserPaymentCreateManyInput | UserPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPayment update
   */
  export type UserPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPayment.
     */
    data: XOR<UserPaymentUpdateInput, UserPaymentUncheckedUpdateInput>
    /**
     * Choose, which UserPayment to update.
     */
    where: UserPaymentWhereUniqueInput
  }

  /**
   * UserPayment updateMany
   */
  export type UserPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPayments.
     */
    data: XOR<UserPaymentUpdateManyMutationInput, UserPaymentUncheckedUpdateManyInput>
    /**
     * Filter which UserPayments to update
     */
    where?: UserPaymentWhereInput
  }

  /**
   * UserPayment upsert
   */
  export type UserPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPayment to update in case it exists.
     */
    where: UserPaymentWhereUniqueInput
    /**
     * In case the UserPayment found by the `where` argument doesn't exist, create a new UserPayment with this data.
     */
    create: XOR<UserPaymentCreateInput, UserPaymentUncheckedCreateInput>
    /**
     * In case the UserPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPaymentUpdateInput, UserPaymentUncheckedUpdateInput>
  }

  /**
   * UserPayment delete
   */
  export type UserPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
    /**
     * Filter which UserPayment to delete.
     */
    where: UserPaymentWhereUniqueInput
  }

  /**
   * UserPayment deleteMany
   */
  export type UserPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPayments to delete
     */
    where?: UserPaymentWhereInput
  }

  /**
   * UserPayment without action
   */
  export type UserPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPayment
     */
    select?: UserPaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPaymentInclude<ExtArgs> | null
  }


  /**
   * Model UserWallet
   */

  export type AggregateUserWallet = {
    _count: UserWalletCountAggregateOutputType | null
    _avg: UserWalletAvgAggregateOutputType | null
    _sum: UserWalletSumAggregateOutputType | null
    _min: UserWalletMinAggregateOutputType | null
    _max: UserWalletMaxAggregateOutputType | null
  }

  export type UserWalletAvgAggregateOutputType = {
    walletId: number | null
    userId: number | null
    currentValue: number | null
  }

  export type UserWalletSumAggregateOutputType = {
    walletId: number | null
    userId: number | null
    currentValue: number | null
  }

  export type UserWalletMinAggregateOutputType = {
    walletId: number | null
    userId: number | null
    currentValue: number | null
  }

  export type UserWalletMaxAggregateOutputType = {
    walletId: number | null
    userId: number | null
    currentValue: number | null
  }

  export type UserWalletCountAggregateOutputType = {
    walletId: number
    userId: number
    currentValue: number
    _all: number
  }


  export type UserWalletAvgAggregateInputType = {
    walletId?: true
    userId?: true
    currentValue?: true
  }

  export type UserWalletSumAggregateInputType = {
    walletId?: true
    userId?: true
    currentValue?: true
  }

  export type UserWalletMinAggregateInputType = {
    walletId?: true
    userId?: true
    currentValue?: true
  }

  export type UserWalletMaxAggregateInputType = {
    walletId?: true
    userId?: true
    currentValue?: true
  }

  export type UserWalletCountAggregateInputType = {
    walletId?: true
    userId?: true
    currentValue?: true
    _all?: true
  }

  export type UserWalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWallet to aggregate.
     */
    where?: UserWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWallets to fetch.
     */
    orderBy?: UserWalletOrderByWithRelationInput | UserWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserWallets
    **/
    _count?: true | UserWalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserWalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserWalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserWalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserWalletMaxAggregateInputType
  }

  export type GetUserWalletAggregateType<T extends UserWalletAggregateArgs> = {
        [P in keyof T & keyof AggregateUserWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserWallet[P]>
      : GetScalarType<T[P], AggregateUserWallet[P]>
  }




  export type UserWalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWalletWhereInput
    orderBy?: UserWalletOrderByWithAggregationInput | UserWalletOrderByWithAggregationInput[]
    by: UserWalletScalarFieldEnum[] | UserWalletScalarFieldEnum
    having?: UserWalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserWalletCountAggregateInputType | true
    _avg?: UserWalletAvgAggregateInputType
    _sum?: UserWalletSumAggregateInputType
    _min?: UserWalletMinAggregateInputType
    _max?: UserWalletMaxAggregateInputType
  }

  export type UserWalletGroupByOutputType = {
    walletId: number
    userId: number
    currentValue: number
    _count: UserWalletCountAggregateOutputType | null
    _avg: UserWalletAvgAggregateOutputType | null
    _sum: UserWalletSumAggregateOutputType | null
    _min: UserWalletMinAggregateOutputType | null
    _max: UserWalletMaxAggregateOutputType | null
  }

  type GetUserWalletGroupByPayload<T extends UserWalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserWalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserWalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserWalletGroupByOutputType[P]>
            : GetScalarType<T[P], UserWalletGroupByOutputType[P]>
        }
      >
    >


  export type UserWalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletId?: boolean
    userId?: boolean
    currentValue?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    WalletLogs?: boolean | UserWallet$WalletLogsArgs<ExtArgs>
    _count?: boolean | UserWalletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWallet"]>

  export type UserWalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    walletId?: boolean
    userId?: boolean
    currentValue?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userWallet"]>

  export type UserWalletSelectScalar = {
    walletId?: boolean
    userId?: boolean
    currentValue?: boolean
  }

  export type UserWalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    WalletLogs?: boolean | UserWallet$WalletLogsArgs<ExtArgs>
    _count?: boolean | UserWalletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserWalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserWalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserWallet"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      WalletLogs: Prisma.$WalletLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      walletId: number
      userId: number
      currentValue: number
    }, ExtArgs["result"]["userWallet"]>
    composites: {}
  }

  type UserWalletGetPayload<S extends boolean | null | undefined | UserWalletDefaultArgs> = $Result.GetResult<Prisma.$UserWalletPayload, S>

  type UserWalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserWalletFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserWalletCountAggregateInputType | true
    }

  export interface UserWalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWallet'], meta: { name: 'UserWallet' } }
    /**
     * Find zero or one UserWallet that matches the filter.
     * @param {UserWalletFindUniqueArgs} args - Arguments to find a UserWallet
     * @example
     * // Get one UserWallet
     * const userWallet = await prisma.userWallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserWalletFindUniqueArgs>(args: SelectSubset<T, UserWalletFindUniqueArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserWallet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserWalletFindUniqueOrThrowArgs} args - Arguments to find a UserWallet
     * @example
     * // Get one UserWallet
     * const userWallet = await prisma.userWallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserWalletFindUniqueOrThrowArgs>(args: SelectSubset<T, UserWalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserWallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletFindFirstArgs} args - Arguments to find a UserWallet
     * @example
     * // Get one UserWallet
     * const userWallet = await prisma.userWallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserWalletFindFirstArgs>(args?: SelectSubset<T, UserWalletFindFirstArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserWallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletFindFirstOrThrowArgs} args - Arguments to find a UserWallet
     * @example
     * // Get one UserWallet
     * const userWallet = await prisma.userWallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserWalletFindFirstOrThrowArgs>(args?: SelectSubset<T, UserWalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserWallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserWallets
     * const userWallets = await prisma.userWallet.findMany()
     * 
     * // Get first 10 UserWallets
     * const userWallets = await prisma.userWallet.findMany({ take: 10 })
     * 
     * // Only select the `walletId`
     * const userWalletWithWalletIdOnly = await prisma.userWallet.findMany({ select: { walletId: true } })
     * 
     */
    findMany<T extends UserWalletFindManyArgs>(args?: SelectSubset<T, UserWalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserWallet.
     * @param {UserWalletCreateArgs} args - Arguments to create a UserWallet.
     * @example
     * // Create one UserWallet
     * const UserWallet = await prisma.userWallet.create({
     *   data: {
     *     // ... data to create a UserWallet
     *   }
     * })
     * 
     */
    create<T extends UserWalletCreateArgs>(args: SelectSubset<T, UserWalletCreateArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserWallets.
     * @param {UserWalletCreateManyArgs} args - Arguments to create many UserWallets.
     * @example
     * // Create many UserWallets
     * const userWallet = await prisma.userWallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserWalletCreateManyArgs>(args?: SelectSubset<T, UserWalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserWallets and returns the data saved in the database.
     * @param {UserWalletCreateManyAndReturnArgs} args - Arguments to create many UserWallets.
     * @example
     * // Create many UserWallets
     * const userWallet = await prisma.userWallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserWallets and only return the `walletId`
     * const userWalletWithWalletIdOnly = await prisma.userWallet.createManyAndReturn({ 
     *   select: { walletId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserWalletCreateManyAndReturnArgs>(args?: SelectSubset<T, UserWalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserWallet.
     * @param {UserWalletDeleteArgs} args - Arguments to delete one UserWallet.
     * @example
     * // Delete one UserWallet
     * const UserWallet = await prisma.userWallet.delete({
     *   where: {
     *     // ... filter to delete one UserWallet
     *   }
     * })
     * 
     */
    delete<T extends UserWalletDeleteArgs>(args: SelectSubset<T, UserWalletDeleteArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserWallet.
     * @param {UserWalletUpdateArgs} args - Arguments to update one UserWallet.
     * @example
     * // Update one UserWallet
     * const userWallet = await prisma.userWallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserWalletUpdateArgs>(args: SelectSubset<T, UserWalletUpdateArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserWallets.
     * @param {UserWalletDeleteManyArgs} args - Arguments to filter UserWallets to delete.
     * @example
     * // Delete a few UserWallets
     * const { count } = await prisma.userWallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserWalletDeleteManyArgs>(args?: SelectSubset<T, UserWalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserWallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserWallets
     * const userWallet = await prisma.userWallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserWalletUpdateManyArgs>(args: SelectSubset<T, UserWalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserWallet.
     * @param {UserWalletUpsertArgs} args - Arguments to update or create a UserWallet.
     * @example
     * // Update or create a UserWallet
     * const userWallet = await prisma.userWallet.upsert({
     *   create: {
     *     // ... data to create a UserWallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserWallet we want to update
     *   }
     * })
     */
    upsert<T extends UserWalletUpsertArgs>(args: SelectSubset<T, UserWalletUpsertArgs<ExtArgs>>): Prisma__UserWalletClient<$Result.GetResult<Prisma.$UserWalletPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserWallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletCountArgs} args - Arguments to filter UserWallets to count.
     * @example
     * // Count the number of UserWallets
     * const count = await prisma.userWallet.count({
     *   where: {
     *     // ... the filter for the UserWallets we want to count
     *   }
     * })
    **/
    count<T extends UserWalletCountArgs>(
      args?: Subset<T, UserWalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserWalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserWallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserWalletAggregateArgs>(args: Subset<T, UserWalletAggregateArgs>): Prisma.PrismaPromise<GetUserWalletAggregateType<T>>

    /**
     * Group by UserWallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserWalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserWalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserWalletGroupByArgs['orderBy'] }
        : { orderBy?: UserWalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserWalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserWallet model
   */
  readonly fields: UserWalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserWallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserWalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    WalletLogs<T extends UserWallet$WalletLogsArgs<ExtArgs> = {}>(args?: Subset<T, UserWallet$WalletLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserWallet model
   */ 
  interface UserWalletFieldRefs {
    readonly walletId: FieldRef<"UserWallet", 'Int'>
    readonly userId: FieldRef<"UserWallet", 'Int'>
    readonly currentValue: FieldRef<"UserWallet", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserWallet findUnique
   */
  export type UserWalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter, which UserWallet to fetch.
     */
    where: UserWalletWhereUniqueInput
  }

  /**
   * UserWallet findUniqueOrThrow
   */
  export type UserWalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter, which UserWallet to fetch.
     */
    where: UserWalletWhereUniqueInput
  }

  /**
   * UserWallet findFirst
   */
  export type UserWalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter, which UserWallet to fetch.
     */
    where?: UserWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWallets to fetch.
     */
    orderBy?: UserWalletOrderByWithRelationInput | UserWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWallets.
     */
    cursor?: UserWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWallets.
     */
    distinct?: UserWalletScalarFieldEnum | UserWalletScalarFieldEnum[]
  }

  /**
   * UserWallet findFirstOrThrow
   */
  export type UserWalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter, which UserWallet to fetch.
     */
    where?: UserWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWallets to fetch.
     */
    orderBy?: UserWalletOrderByWithRelationInput | UserWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserWallets.
     */
    cursor?: UserWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserWallets.
     */
    distinct?: UserWalletScalarFieldEnum | UserWalletScalarFieldEnum[]
  }

  /**
   * UserWallet findMany
   */
  export type UserWalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter, which UserWallets to fetch.
     */
    where?: UserWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserWallets to fetch.
     */
    orderBy?: UserWalletOrderByWithRelationInput | UserWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserWallets.
     */
    cursor?: UserWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserWallets.
     */
    skip?: number
    distinct?: UserWalletScalarFieldEnum | UserWalletScalarFieldEnum[]
  }

  /**
   * UserWallet create
   */
  export type UserWalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * The data needed to create a UserWallet.
     */
    data: XOR<UserWalletCreateInput, UserWalletUncheckedCreateInput>
  }

  /**
   * UserWallet createMany
   */
  export type UserWalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserWallets.
     */
    data: UserWalletCreateManyInput | UserWalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserWallet createManyAndReturn
   */
  export type UserWalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserWallets.
     */
    data: UserWalletCreateManyInput | UserWalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserWallet update
   */
  export type UserWalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * The data needed to update a UserWallet.
     */
    data: XOR<UserWalletUpdateInput, UserWalletUncheckedUpdateInput>
    /**
     * Choose, which UserWallet to update.
     */
    where: UserWalletWhereUniqueInput
  }

  /**
   * UserWallet updateMany
   */
  export type UserWalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserWallets.
     */
    data: XOR<UserWalletUpdateManyMutationInput, UserWalletUncheckedUpdateManyInput>
    /**
     * Filter which UserWallets to update
     */
    where?: UserWalletWhereInput
  }

  /**
   * UserWallet upsert
   */
  export type UserWalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * The filter to search for the UserWallet to update in case it exists.
     */
    where: UserWalletWhereUniqueInput
    /**
     * In case the UserWallet found by the `where` argument doesn't exist, create a new UserWallet with this data.
     */
    create: XOR<UserWalletCreateInput, UserWalletUncheckedCreateInput>
    /**
     * In case the UserWallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserWalletUpdateInput, UserWalletUncheckedUpdateInput>
  }

  /**
   * UserWallet delete
   */
  export type UserWalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
    /**
     * Filter which UserWallet to delete.
     */
    where: UserWalletWhereUniqueInput
  }

  /**
   * UserWallet deleteMany
   */
  export type UserWalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserWallets to delete
     */
    where?: UserWalletWhereInput
  }

  /**
   * UserWallet.WalletLogs
   */
  export type UserWallet$WalletLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletLog
     */
    select?: WalletLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletLogInclude<ExtArgs> | null
    where?: WalletLogWhereInput
    orderBy?: WalletLogOrderByWithRelationInput | WalletLogOrderByWithRelationInput[]
    cursor?: WalletLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletLogScalarFieldEnum | WalletLogScalarFieldEnum[]
  }

  /**
   * UserWallet without action
   */
  export type UserWalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserWallet
     */
    select?: UserWalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserWalletInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationAvgAggregateOutputType = {
    verificationId: number | null
    userId: number | null
    citizenId: number | null
    verificationStatus: number | null
  }

  export type VerificationSumAggregateOutputType = {
    verificationId: number | null
    userId: number | null
    citizenId: bigint | null
    verificationStatus: number | null
  }

  export type VerificationMinAggregateOutputType = {
    verificationId: number | null
    userId: number | null
    citizenId: bigint | null
    verificationStatus: number | null
    picture: string | null
  }

  export type VerificationMaxAggregateOutputType = {
    verificationId: number | null
    userId: number | null
    citizenId: bigint | null
    verificationStatus: number | null
    picture: string | null
  }

  export type VerificationCountAggregateOutputType = {
    verificationId: number
    userId: number
    citizenId: number
    verificationStatus: number
    picture: number
    _all: number
  }


  export type VerificationAvgAggregateInputType = {
    verificationId?: true
    userId?: true
    citizenId?: true
    verificationStatus?: true
  }

  export type VerificationSumAggregateInputType = {
    verificationId?: true
    userId?: true
    citizenId?: true
    verificationStatus?: true
  }

  export type VerificationMinAggregateInputType = {
    verificationId?: true
    userId?: true
    citizenId?: true
    verificationStatus?: true
    picture?: true
  }

  export type VerificationMaxAggregateInputType = {
    verificationId?: true
    userId?: true
    citizenId?: true
    verificationStatus?: true
    picture?: true
  }

  export type VerificationCountAggregateInputType = {
    verificationId?: true
    userId?: true
    citizenId?: true
    verificationStatus?: true
    picture?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _avg?: VerificationAvgAggregateInputType
    _sum?: VerificationSumAggregateInputType
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    verificationId: number
    userId: number
    citizenId: bigint
    verificationStatus: number
    picture: string
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    verificationId?: boolean
    userId?: boolean
    citizenId?: boolean
    verificationStatus?: boolean
    picture?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    verificationId?: boolean
    userId?: boolean
    citizenId?: boolean
    verificationStatus?: boolean
    picture?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    verificationId?: boolean
    userId?: boolean
    citizenId?: boolean
    verificationStatus?: boolean
    picture?: boolean
  }

  export type VerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VerificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      verificationId: number
      userId: number
      citizenId: bigint
      verificationStatus: number
      picture: string
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `verificationId`
     * const verificationWithVerificationIdOnly = await prisma.verification.findMany({ select: { verificationId: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `verificationId`
     * const verificationWithVerificationIdOnly = await prisma.verification.createManyAndReturn({ 
     *   select: { verificationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */ 
  interface VerificationFieldRefs {
    readonly verificationId: FieldRef<"Verification", 'Int'>
    readonly userId: FieldRef<"Verification", 'Int'>
    readonly citizenId: FieldRef<"Verification", 'BigInt'>
    readonly verificationStatus: FieldRef<"Verification", 'Int'>
    readonly picture: FieldRef<"Verification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FavoriteScalarFieldEnum: {
    favoriteId: 'favoriteId',
    userId: 'userId',
    favoriteItem: 'favoriteItem'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const UserLogScalarFieldEnum: {
    userLogId: 'userLogId',
    userId: 'userId',
    editType: 'editType',
    editValue: 'editValue'
  };

  export type UserLogScalarFieldEnum = (typeof UserLogScalarFieldEnum)[keyof typeof UserLogScalarFieldEnum]


  export const AuctionLogScalarFieldEnum: {
    auctionLogId: 'auctionLogId',
    userId: 'userId',
    auctionId: 'auctionId',
    bidPrice: 'bidPrice',
    timestamp: 'timestamp'
  };

  export type AuctionLogScalarFieldEnum = (typeof AuctionLogScalarFieldEnum)[keyof typeof AuctionLogScalarFieldEnum]


  export const UserScalarFieldEnum: {
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    email: 'email',
    phone: 'phone',
    createdOn: 'createdOn'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AuctionScalarFieldEnum: {
    auctionId: 'auctionId',
    userId: 'userId',
    productId: 'productId',
    startPrice: 'startPrice',
    minimumBid: 'minimumBid',
    start: 'start',
    end: 'end'
  };

  export type AuctionScalarFieldEnum = (typeof AuctionScalarFieldEnum)[keyof typeof AuctionScalarFieldEnum]


  export const OpenOrderScalarFieldEnum: {
    openOrderId: 'openOrderId',
    userId: 'userId',
    productName: 'productName',
    categoryId: 'categoryId',
    productDescription: 'productDescription',
    productImage: 'productImage'
  };

  export type OpenOrderScalarFieldEnum = (typeof OpenOrderScalarFieldEnum)[keyof typeof OpenOrderScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    productId: 'productId',
    userId: 'userId',
    productName: 'productName',
    categoryId: 'categoryId',
    productDescription: 'productDescription',
    productImage: 'productImage'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const UserAddressScalarFieldEnum: {
    addressId: 'addressId',
    userId: 'userId',
    province: 'province',
    district: 'district',
    subDistrict: 'subDistrict',
    postcode: 'postcode',
    address: 'address',
    note: 'note',
    receiverName: 'receiverName',
    phone: 'phone'
  };

  export type UserAddressScalarFieldEnum = (typeof UserAddressScalarFieldEnum)[keyof typeof UserAddressScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    categoryId: 'categoryId',
    categoryName: 'categoryName',
    detail: 'detail'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const WalletLogScalarFieldEnum: {
    walletLogId: 'walletLogId',
    walletId: 'walletId',
    transactionType: 'transactionType',
    value: 'value'
  };

  export type WalletLogScalarFieldEnum = (typeof WalletLogScalarFieldEnum)[keyof typeof WalletLogScalarFieldEnum]


  export const UserPaymentScalarFieldEnum: {
    paymentId: 'paymentId',
    userId: 'userId',
    paymentType: 'paymentType',
    data1: 'data1',
    data2: 'data2',
    data3: 'data3'
  };

  export type UserPaymentScalarFieldEnum = (typeof UserPaymentScalarFieldEnum)[keyof typeof UserPaymentScalarFieldEnum]


  export const UserWalletScalarFieldEnum: {
    walletId: 'walletId',
    userId: 'userId',
    currentValue: 'currentValue'
  };

  export type UserWalletScalarFieldEnum = (typeof UserWalletScalarFieldEnum)[keyof typeof UserWalletScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    verificationId: 'verificationId',
    userId: 'userId',
    citizenId: 'citizenId',
    verificationStatus: 'verificationStatus',
    picture: 'picture'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type FavoriteWhereInput = {
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    favoriteId?: IntFilter<"Favorite"> | number
    userId?: IntFilter<"Favorite"> | number
    favoriteItem?: StringFilter<"Favorite"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FavoriteOrderByWithRelationInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
    favoriteItem?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type FavoriteWhereUniqueInput = Prisma.AtLeast<{
    favoriteId?: number
    AND?: FavoriteWhereInput | FavoriteWhereInput[]
    OR?: FavoriteWhereInput[]
    NOT?: FavoriteWhereInput | FavoriteWhereInput[]
    userId?: IntFilter<"Favorite"> | number
    favoriteItem?: StringFilter<"Favorite"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "favoriteId">

  export type FavoriteOrderByWithAggregationInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
    favoriteItem?: SortOrder
    _count?: FavoriteCountOrderByAggregateInput
    _avg?: FavoriteAvgOrderByAggregateInput
    _max?: FavoriteMaxOrderByAggregateInput
    _min?: FavoriteMinOrderByAggregateInput
    _sum?: FavoriteSumOrderByAggregateInput
  }

  export type FavoriteScalarWhereWithAggregatesInput = {
    AND?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    OR?: FavoriteScalarWhereWithAggregatesInput[]
    NOT?: FavoriteScalarWhereWithAggregatesInput | FavoriteScalarWhereWithAggregatesInput[]
    favoriteId?: IntWithAggregatesFilter<"Favorite"> | number
    userId?: IntWithAggregatesFilter<"Favorite"> | number
    favoriteItem?: StringWithAggregatesFilter<"Favorite"> | string
  }

  export type UserLogWhereInput = {
    AND?: UserLogWhereInput | UserLogWhereInput[]
    OR?: UserLogWhereInput[]
    NOT?: UserLogWhereInput | UserLogWhereInput[]
    userLogId?: IntFilter<"UserLog"> | number
    userId?: IntFilter<"UserLog"> | number
    editType?: IntFilter<"UserLog"> | number
    editValue?: IntFilter<"UserLog"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserLogOrderByWithRelationInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type UserLogWhereUniqueInput = Prisma.AtLeast<{
    userLogId?: number
    AND?: UserLogWhereInput | UserLogWhereInput[]
    OR?: UserLogWhereInput[]
    NOT?: UserLogWhereInput | UserLogWhereInput[]
    userId?: IntFilter<"UserLog"> | number
    editType?: IntFilter<"UserLog"> | number
    editValue?: IntFilter<"UserLog"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "userLogId">

  export type UserLogOrderByWithAggregationInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
    _count?: UserLogCountOrderByAggregateInput
    _avg?: UserLogAvgOrderByAggregateInput
    _max?: UserLogMaxOrderByAggregateInput
    _min?: UserLogMinOrderByAggregateInput
    _sum?: UserLogSumOrderByAggregateInput
  }

  export type UserLogScalarWhereWithAggregatesInput = {
    AND?: UserLogScalarWhereWithAggregatesInput | UserLogScalarWhereWithAggregatesInput[]
    OR?: UserLogScalarWhereWithAggregatesInput[]
    NOT?: UserLogScalarWhereWithAggregatesInput | UserLogScalarWhereWithAggregatesInput[]
    userLogId?: IntWithAggregatesFilter<"UserLog"> | number
    userId?: IntWithAggregatesFilter<"UserLog"> | number
    editType?: IntWithAggregatesFilter<"UserLog"> | number
    editValue?: IntWithAggregatesFilter<"UserLog"> | number
  }

  export type AuctionLogWhereInput = {
    AND?: AuctionLogWhereInput | AuctionLogWhereInput[]
    OR?: AuctionLogWhereInput[]
    NOT?: AuctionLogWhereInput | AuctionLogWhereInput[]
    auctionLogId?: IntFilter<"AuctionLog"> | number
    userId?: IntFilter<"AuctionLog"> | number
    auctionId?: IntFilter<"AuctionLog"> | number
    bidPrice?: IntFilter<"AuctionLog"> | number
    timestamp?: DateTimeFilter<"AuctionLog"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Auction?: XOR<AuctionRelationFilter, AuctionWhereInput>
  }

  export type AuctionLogOrderByWithRelationInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
    timestamp?: SortOrder
    User?: UserOrderByWithRelationInput
    Auction?: AuctionOrderByWithRelationInput
  }

  export type AuctionLogWhereUniqueInput = Prisma.AtLeast<{
    auctionLogId?: number
    AND?: AuctionLogWhereInput | AuctionLogWhereInput[]
    OR?: AuctionLogWhereInput[]
    NOT?: AuctionLogWhereInput | AuctionLogWhereInput[]
    userId?: IntFilter<"AuctionLog"> | number
    auctionId?: IntFilter<"AuctionLog"> | number
    bidPrice?: IntFilter<"AuctionLog"> | number
    timestamp?: DateTimeFilter<"AuctionLog"> | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Auction?: XOR<AuctionRelationFilter, AuctionWhereInput>
  }, "auctionLogId">

  export type AuctionLogOrderByWithAggregationInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
    timestamp?: SortOrder
    _count?: AuctionLogCountOrderByAggregateInput
    _avg?: AuctionLogAvgOrderByAggregateInput
    _max?: AuctionLogMaxOrderByAggregateInput
    _min?: AuctionLogMinOrderByAggregateInput
    _sum?: AuctionLogSumOrderByAggregateInput
  }

  export type AuctionLogScalarWhereWithAggregatesInput = {
    AND?: AuctionLogScalarWhereWithAggregatesInput | AuctionLogScalarWhereWithAggregatesInput[]
    OR?: AuctionLogScalarWhereWithAggregatesInput[]
    NOT?: AuctionLogScalarWhereWithAggregatesInput | AuctionLogScalarWhereWithAggregatesInput[]
    auctionLogId?: IntWithAggregatesFilter<"AuctionLog"> | number
    userId?: IntWithAggregatesFilter<"AuctionLog"> | number
    auctionId?: IntWithAggregatesFilter<"AuctionLog"> | number
    bidPrice?: IntWithAggregatesFilter<"AuctionLog"> | number
    timestamp?: DateTimeWithAggregatesFilter<"AuctionLog"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    userId?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    createdOn?: DateTimeFilter<"User"> | Date | string
    Products?: ProductListRelationFilter
    Favorites?: FavoriteListRelationFilter
    UserLogs?: UserLogListRelationFilter
    Auctions?: AuctionListRelationFilter
    OpenOrders?: OpenOrderListRelationFilter
    UserAddresses?: UserAddressListRelationFilter
    UserPayments?: UserPaymentListRelationFilter
    UserWallets?: UserWalletListRelationFilter
    Verifications?: VerificationListRelationFilter
    AuctionLogs?: AuctionLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdOn?: SortOrder
    Products?: ProductOrderByRelationAggregateInput
    Favorites?: FavoriteOrderByRelationAggregateInput
    UserLogs?: UserLogOrderByRelationAggregateInput
    Auctions?: AuctionOrderByRelationAggregateInput
    OpenOrders?: OpenOrderOrderByRelationAggregateInput
    UserAddresses?: UserAddressOrderByRelationAggregateInput
    UserPayments?: UserPaymentOrderByRelationAggregateInput
    UserWallets?: UserWalletOrderByRelationAggregateInput
    Verifications?: VerificationOrderByRelationAggregateInput
    AuctionLogs?: AuctionLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    username?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    createdOn?: DateTimeFilter<"User"> | Date | string
    Products?: ProductListRelationFilter
    Favorites?: FavoriteListRelationFilter
    UserLogs?: UserLogListRelationFilter
    Auctions?: AuctionListRelationFilter
    OpenOrders?: OpenOrderListRelationFilter
    UserAddresses?: UserAddressListRelationFilter
    UserPayments?: UserPaymentListRelationFilter
    UserWallets?: UserWalletListRelationFilter
    Verifications?: VerificationListRelationFilter
    AuctionLogs?: AuctionLogListRelationFilter
  }, "userId" | "username" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdOn?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    createdOn?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AuctionWhereInput = {
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    auctionId?: IntFilter<"Auction"> | number
    userId?: IntFilter<"Auction"> | number
    productId?: IntFilter<"Auction"> | number
    startPrice?: IntFilter<"Auction"> | number
    minimumBid?: IntFilter<"Auction"> | number
    start?: IntFilter<"Auction"> | number
    end?: IntFilter<"Auction"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    AuctionLogs?: AuctionLogListRelationFilter
  }

  export type AuctionOrderByWithRelationInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
    User?: UserOrderByWithRelationInput
    AuctionLogs?: AuctionLogOrderByRelationAggregateInput
  }

  export type AuctionWhereUniqueInput = Prisma.AtLeast<{
    auctionId?: number
    AND?: AuctionWhereInput | AuctionWhereInput[]
    OR?: AuctionWhereInput[]
    NOT?: AuctionWhereInput | AuctionWhereInput[]
    userId?: IntFilter<"Auction"> | number
    productId?: IntFilter<"Auction"> | number
    startPrice?: IntFilter<"Auction"> | number
    minimumBid?: IntFilter<"Auction"> | number
    start?: IntFilter<"Auction"> | number
    end?: IntFilter<"Auction"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    AuctionLogs?: AuctionLogListRelationFilter
  }, "auctionId">

  export type AuctionOrderByWithAggregationInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
    _count?: AuctionCountOrderByAggregateInput
    _avg?: AuctionAvgOrderByAggregateInput
    _max?: AuctionMaxOrderByAggregateInput
    _min?: AuctionMinOrderByAggregateInput
    _sum?: AuctionSumOrderByAggregateInput
  }

  export type AuctionScalarWhereWithAggregatesInput = {
    AND?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    OR?: AuctionScalarWhereWithAggregatesInput[]
    NOT?: AuctionScalarWhereWithAggregatesInput | AuctionScalarWhereWithAggregatesInput[]
    auctionId?: IntWithAggregatesFilter<"Auction"> | number
    userId?: IntWithAggregatesFilter<"Auction"> | number
    productId?: IntWithAggregatesFilter<"Auction"> | number
    startPrice?: IntWithAggregatesFilter<"Auction"> | number
    minimumBid?: IntWithAggregatesFilter<"Auction"> | number
    start?: IntWithAggregatesFilter<"Auction"> | number
    end?: IntWithAggregatesFilter<"Auction"> | number
  }

  export type OpenOrderWhereInput = {
    AND?: OpenOrderWhereInput | OpenOrderWhereInput[]
    OR?: OpenOrderWhereInput[]
    NOT?: OpenOrderWhereInput | OpenOrderWhereInput[]
    openOrderId?: IntFilter<"OpenOrder"> | number
    userId?: IntFilter<"OpenOrder"> | number
    productName?: StringFilter<"OpenOrder"> | string
    categoryId?: IntFilter<"OpenOrder"> | number
    productDescription?: StringFilter<"OpenOrder"> | string
    productImage?: StringFilter<"OpenOrder"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OpenOrderOrderByWithRelationInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type OpenOrderWhereUniqueInput = Prisma.AtLeast<{
    openOrderId?: number
    AND?: OpenOrderWhereInput | OpenOrderWhereInput[]
    OR?: OpenOrderWhereInput[]
    NOT?: OpenOrderWhereInput | OpenOrderWhereInput[]
    userId?: IntFilter<"OpenOrder"> | number
    productName?: StringFilter<"OpenOrder"> | string
    categoryId?: IntFilter<"OpenOrder"> | number
    productDescription?: StringFilter<"OpenOrder"> | string
    productImage?: StringFilter<"OpenOrder"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "openOrderId">

  export type OpenOrderOrderByWithAggregationInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
    _count?: OpenOrderCountOrderByAggregateInput
    _avg?: OpenOrderAvgOrderByAggregateInput
    _max?: OpenOrderMaxOrderByAggregateInput
    _min?: OpenOrderMinOrderByAggregateInput
    _sum?: OpenOrderSumOrderByAggregateInput
  }

  export type OpenOrderScalarWhereWithAggregatesInput = {
    AND?: OpenOrderScalarWhereWithAggregatesInput | OpenOrderScalarWhereWithAggregatesInput[]
    OR?: OpenOrderScalarWhereWithAggregatesInput[]
    NOT?: OpenOrderScalarWhereWithAggregatesInput | OpenOrderScalarWhereWithAggregatesInput[]
    openOrderId?: IntWithAggregatesFilter<"OpenOrder"> | number
    userId?: IntWithAggregatesFilter<"OpenOrder"> | number
    productName?: StringWithAggregatesFilter<"OpenOrder"> | string
    categoryId?: IntWithAggregatesFilter<"OpenOrder"> | number
    productDescription?: StringWithAggregatesFilter<"OpenOrder"> | string
    productImage?: StringWithAggregatesFilter<"OpenOrder"> | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    productId?: IntFilter<"Product"> | number
    userId?: IntFilter<"Product"> | number
    productName?: StringFilter<"Product"> | string
    categoryId?: IntFilter<"Product"> | number
    productDescription?: StringFilter<"Product"> | string
    productImage?: StringFilter<"Product"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    productId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
    User?: UserOrderByWithRelationInput
    Category?: CategoryOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    productId?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    userId?: IntFilter<"Product"> | number
    productName?: StringFilter<"Product"> | string
    categoryId?: IntFilter<"Product"> | number
    productDescription?: StringFilter<"Product"> | string
    productImage?: StringFilter<"Product"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }, "productId">

  export type ProductOrderByWithAggregationInput = {
    productId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    productId?: IntWithAggregatesFilter<"Product"> | number
    userId?: IntWithAggregatesFilter<"Product"> | number
    productName?: StringWithAggregatesFilter<"Product"> | string
    categoryId?: IntWithAggregatesFilter<"Product"> | number
    productDescription?: StringWithAggregatesFilter<"Product"> | string
    productImage?: StringWithAggregatesFilter<"Product"> | string
  }

  export type UserAddressWhereInput = {
    AND?: UserAddressWhereInput | UserAddressWhereInput[]
    OR?: UserAddressWhereInput[]
    NOT?: UserAddressWhereInput | UserAddressWhereInput[]
    addressId?: IntFilter<"UserAddress"> | number
    userId?: IntFilter<"UserAddress"> | number
    province?: StringFilter<"UserAddress"> | string
    district?: StringFilter<"UserAddress"> | string
    subDistrict?: StringNullableFilter<"UserAddress"> | string | null
    postcode?: IntFilter<"UserAddress"> | number
    address?: StringNullableFilter<"UserAddress"> | string | null
    note?: StringNullableFilter<"UserAddress"> | string | null
    receiverName?: StringFilter<"UserAddress"> | string
    phone?: BigIntFilter<"UserAddress"> | bigint | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserAddressOrderByWithRelationInput = {
    addressId?: SortOrder
    userId?: SortOrder
    province?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrderInput | SortOrder
    postcode?: SortOrder
    address?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    receiverName?: SortOrder
    phone?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type UserAddressWhereUniqueInput = Prisma.AtLeast<{
    addressId?: number
    AND?: UserAddressWhereInput | UserAddressWhereInput[]
    OR?: UserAddressWhereInput[]
    NOT?: UserAddressWhereInput | UserAddressWhereInput[]
    userId?: IntFilter<"UserAddress"> | number
    province?: StringFilter<"UserAddress"> | string
    district?: StringFilter<"UserAddress"> | string
    subDistrict?: StringNullableFilter<"UserAddress"> | string | null
    postcode?: IntFilter<"UserAddress"> | number
    address?: StringNullableFilter<"UserAddress"> | string | null
    note?: StringNullableFilter<"UserAddress"> | string | null
    receiverName?: StringFilter<"UserAddress"> | string
    phone?: BigIntFilter<"UserAddress"> | bigint | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "addressId">

  export type UserAddressOrderByWithAggregationInput = {
    addressId?: SortOrder
    userId?: SortOrder
    province?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrderInput | SortOrder
    postcode?: SortOrder
    address?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    receiverName?: SortOrder
    phone?: SortOrder
    _count?: UserAddressCountOrderByAggregateInput
    _avg?: UserAddressAvgOrderByAggregateInput
    _max?: UserAddressMaxOrderByAggregateInput
    _min?: UserAddressMinOrderByAggregateInput
    _sum?: UserAddressSumOrderByAggregateInput
  }

  export type UserAddressScalarWhereWithAggregatesInput = {
    AND?: UserAddressScalarWhereWithAggregatesInput | UserAddressScalarWhereWithAggregatesInput[]
    OR?: UserAddressScalarWhereWithAggregatesInput[]
    NOT?: UserAddressScalarWhereWithAggregatesInput | UserAddressScalarWhereWithAggregatesInput[]
    addressId?: IntWithAggregatesFilter<"UserAddress"> | number
    userId?: IntWithAggregatesFilter<"UserAddress"> | number
    province?: StringWithAggregatesFilter<"UserAddress"> | string
    district?: StringWithAggregatesFilter<"UserAddress"> | string
    subDistrict?: StringNullableWithAggregatesFilter<"UserAddress"> | string | null
    postcode?: IntWithAggregatesFilter<"UserAddress"> | number
    address?: StringNullableWithAggregatesFilter<"UserAddress"> | string | null
    note?: StringNullableWithAggregatesFilter<"UserAddress"> | string | null
    receiverName?: StringWithAggregatesFilter<"UserAddress"> | string
    phone?: BigIntWithAggregatesFilter<"UserAddress"> | bigint | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryId?: IntFilter<"Category"> | number
    categoryName?: StringFilter<"Category"> | string
    detail?: StringNullableFilter<"Category"> | string | null
    Products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    categoryId?: SortOrder
    categoryName?: SortOrder
    detail?: SortOrderInput | SortOrder
    Products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    categoryId?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryName?: StringFilter<"Category"> | string
    detail?: StringNullableFilter<"Category"> | string | null
    Products?: ProductListRelationFilter
  }, "categoryId">

  export type CategoryOrderByWithAggregationInput = {
    categoryId?: SortOrder
    categoryName?: SortOrder
    detail?: SortOrderInput | SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    categoryId?: IntWithAggregatesFilter<"Category"> | number
    categoryName?: StringWithAggregatesFilter<"Category"> | string
    detail?: StringNullableWithAggregatesFilter<"Category"> | string | null
  }

  export type WalletLogWhereInput = {
    AND?: WalletLogWhereInput | WalletLogWhereInput[]
    OR?: WalletLogWhereInput[]
    NOT?: WalletLogWhereInput | WalletLogWhereInput[]
    walletLogId?: IntFilter<"WalletLog"> | number
    walletId?: IntFilter<"WalletLog"> | number
    transactionType?: IntFilter<"WalletLog"> | number
    value?: IntFilter<"WalletLog"> | number
    UserWallet?: XOR<UserWalletRelationFilter, UserWalletWhereInput>
  }

  export type WalletLogOrderByWithRelationInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
    UserWallet?: UserWalletOrderByWithRelationInput
  }

  export type WalletLogWhereUniqueInput = Prisma.AtLeast<{
    walletLogId?: number
    AND?: WalletLogWhereInput | WalletLogWhereInput[]
    OR?: WalletLogWhereInput[]
    NOT?: WalletLogWhereInput | WalletLogWhereInput[]
    walletId?: IntFilter<"WalletLog"> | number
    transactionType?: IntFilter<"WalletLog"> | number
    value?: IntFilter<"WalletLog"> | number
    UserWallet?: XOR<UserWalletRelationFilter, UserWalletWhereInput>
  }, "walletLogId">

  export type WalletLogOrderByWithAggregationInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
    _count?: WalletLogCountOrderByAggregateInput
    _avg?: WalletLogAvgOrderByAggregateInput
    _max?: WalletLogMaxOrderByAggregateInput
    _min?: WalletLogMinOrderByAggregateInput
    _sum?: WalletLogSumOrderByAggregateInput
  }

  export type WalletLogScalarWhereWithAggregatesInput = {
    AND?: WalletLogScalarWhereWithAggregatesInput | WalletLogScalarWhereWithAggregatesInput[]
    OR?: WalletLogScalarWhereWithAggregatesInput[]
    NOT?: WalletLogScalarWhereWithAggregatesInput | WalletLogScalarWhereWithAggregatesInput[]
    walletLogId?: IntWithAggregatesFilter<"WalletLog"> | number
    walletId?: IntWithAggregatesFilter<"WalletLog"> | number
    transactionType?: IntWithAggregatesFilter<"WalletLog"> | number
    value?: IntWithAggregatesFilter<"WalletLog"> | number
  }

  export type UserPaymentWhereInput = {
    AND?: UserPaymentWhereInput | UserPaymentWhereInput[]
    OR?: UserPaymentWhereInput[]
    NOT?: UserPaymentWhereInput | UserPaymentWhereInput[]
    paymentId?: IntFilter<"UserPayment"> | number
    userId?: IntFilter<"UserPayment"> | number
    paymentType?: IntFilter<"UserPayment"> | number
    data1?: StringNullableFilter<"UserPayment"> | string | null
    data2?: StringNullableFilter<"UserPayment"> | string | null
    data3?: StringNullableFilter<"UserPayment"> | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPaymentOrderByWithRelationInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
    data1?: SortOrderInput | SortOrder
    data2?: SortOrderInput | SortOrder
    data3?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type UserPaymentWhereUniqueInput = Prisma.AtLeast<{
    paymentId?: number
    AND?: UserPaymentWhereInput | UserPaymentWhereInput[]
    OR?: UserPaymentWhereInput[]
    NOT?: UserPaymentWhereInput | UserPaymentWhereInput[]
    userId?: IntFilter<"UserPayment"> | number
    paymentType?: IntFilter<"UserPayment"> | number
    data1?: StringNullableFilter<"UserPayment"> | string | null
    data2?: StringNullableFilter<"UserPayment"> | string | null
    data3?: StringNullableFilter<"UserPayment"> | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "paymentId">

  export type UserPaymentOrderByWithAggregationInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
    data1?: SortOrderInput | SortOrder
    data2?: SortOrderInput | SortOrder
    data3?: SortOrderInput | SortOrder
    _count?: UserPaymentCountOrderByAggregateInput
    _avg?: UserPaymentAvgOrderByAggregateInput
    _max?: UserPaymentMaxOrderByAggregateInput
    _min?: UserPaymentMinOrderByAggregateInput
    _sum?: UserPaymentSumOrderByAggregateInput
  }

  export type UserPaymentScalarWhereWithAggregatesInput = {
    AND?: UserPaymentScalarWhereWithAggregatesInput | UserPaymentScalarWhereWithAggregatesInput[]
    OR?: UserPaymentScalarWhereWithAggregatesInput[]
    NOT?: UserPaymentScalarWhereWithAggregatesInput | UserPaymentScalarWhereWithAggregatesInput[]
    paymentId?: IntWithAggregatesFilter<"UserPayment"> | number
    userId?: IntWithAggregatesFilter<"UserPayment"> | number
    paymentType?: IntWithAggregatesFilter<"UserPayment"> | number
    data1?: StringNullableWithAggregatesFilter<"UserPayment"> | string | null
    data2?: StringNullableWithAggregatesFilter<"UserPayment"> | string | null
    data3?: StringNullableWithAggregatesFilter<"UserPayment"> | string | null
  }

  export type UserWalletWhereInput = {
    AND?: UserWalletWhereInput | UserWalletWhereInput[]
    OR?: UserWalletWhereInput[]
    NOT?: UserWalletWhereInput | UserWalletWhereInput[]
    walletId?: IntFilter<"UserWallet"> | number
    userId?: IntFilter<"UserWallet"> | number
    currentValue?: IntFilter<"UserWallet"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    WalletLogs?: WalletLogListRelationFilter
  }

  export type UserWalletOrderByWithRelationInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
    User?: UserOrderByWithRelationInput
    WalletLogs?: WalletLogOrderByRelationAggregateInput
  }

  export type UserWalletWhereUniqueInput = Prisma.AtLeast<{
    walletId?: number
    AND?: UserWalletWhereInput | UserWalletWhereInput[]
    OR?: UserWalletWhereInput[]
    NOT?: UserWalletWhereInput | UserWalletWhereInput[]
    userId?: IntFilter<"UserWallet"> | number
    currentValue?: IntFilter<"UserWallet"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    WalletLogs?: WalletLogListRelationFilter
  }, "walletId">

  export type UserWalletOrderByWithAggregationInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
    _count?: UserWalletCountOrderByAggregateInput
    _avg?: UserWalletAvgOrderByAggregateInput
    _max?: UserWalletMaxOrderByAggregateInput
    _min?: UserWalletMinOrderByAggregateInput
    _sum?: UserWalletSumOrderByAggregateInput
  }

  export type UserWalletScalarWhereWithAggregatesInput = {
    AND?: UserWalletScalarWhereWithAggregatesInput | UserWalletScalarWhereWithAggregatesInput[]
    OR?: UserWalletScalarWhereWithAggregatesInput[]
    NOT?: UserWalletScalarWhereWithAggregatesInput | UserWalletScalarWhereWithAggregatesInput[]
    walletId?: IntWithAggregatesFilter<"UserWallet"> | number
    userId?: IntWithAggregatesFilter<"UserWallet"> | number
    currentValue?: IntWithAggregatesFilter<"UserWallet"> | number
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    verificationId?: IntFilter<"Verification"> | number
    userId?: IntFilter<"Verification"> | number
    citizenId?: BigIntFilter<"Verification"> | bigint | number
    verificationStatus?: IntFilter<"Verification"> | number
    picture?: StringFilter<"Verification"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type VerificationOrderByWithRelationInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
    picture?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    verificationId?: number
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    userId?: IntFilter<"Verification"> | number
    citizenId?: BigIntFilter<"Verification"> | bigint | number
    verificationStatus?: IntFilter<"Verification"> | number
    picture?: StringFilter<"Verification"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "verificationId">

  export type VerificationOrderByWithAggregationInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
    picture?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _avg?: VerificationAvgOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
    _sum?: VerificationSumOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    verificationId?: IntWithAggregatesFilter<"Verification"> | number
    userId?: IntWithAggregatesFilter<"Verification"> | number
    citizenId?: BigIntWithAggregatesFilter<"Verification"> | bigint | number
    verificationStatus?: IntWithAggregatesFilter<"Verification"> | number
    picture?: StringWithAggregatesFilter<"Verification"> | string
  }

  export type FavoriteCreateInput = {
    favoriteItem: string
    User: UserCreateNestedOneWithoutFavoritesInput
  }

  export type FavoriteUncheckedCreateInput = {
    favoriteId?: number
    userId: number
    favoriteItem: string
  }

  export type FavoriteUpdateInput = {
    favoriteItem?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoriteUncheckedUpdateInput = {
    favoriteId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteCreateManyInput = {
    favoriteId?: number
    userId: number
    favoriteItem: string
  }

  export type FavoriteUpdateManyMutationInput = {
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUncheckedUpdateManyInput = {
    favoriteId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type UserLogCreateInput = {
    editType: number
    editValue: number
    User: UserCreateNestedOneWithoutUserLogsInput
  }

  export type UserLogUncheckedCreateInput = {
    userLogId?: number
    userId: number
    editType: number
    editValue: number
  }

  export type UserLogUpdateInput = {
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutUserLogsNestedInput
  }

  export type UserLogUncheckedUpdateInput = {
    userLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserLogCreateManyInput = {
    userLogId?: number
    userId: number
    editType: number
    editValue: number
  }

  export type UserLogUpdateManyMutationInput = {
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserLogUncheckedUpdateManyInput = {
    userLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type AuctionLogCreateInput = {
    bidPrice: number
    timestamp: Date | string
    User: UserCreateNestedOneWithoutAuctionLogsInput
    Auction: AuctionCreateNestedOneWithoutAuctionLogsInput
  }

  export type AuctionLogUncheckedCreateInput = {
    auctionLogId?: number
    userId: number
    auctionId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type AuctionLogUpdateInput = {
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAuctionLogsNestedInput
    Auction?: AuctionUpdateOneRequiredWithoutAuctionLogsNestedInput
  }

  export type AuctionLogUncheckedUpdateInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionLogCreateManyInput = {
    auctionLogId?: number
    userId: number
    auctionId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type AuctionLogUpdateManyMutationInput = {
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionLogUncheckedUpdateManyInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionCreateInput = {
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    User: UserCreateNestedOneWithoutAuctionsInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUncheckedCreateInput = {
    auctionId?: number
    userId: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutAuctionsNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateInput = {
    auctionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionCreateManyInput = {
    auctionId?: number
    userId: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
  }

  export type AuctionUpdateManyMutationInput = {
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
  }

  export type AuctionUncheckedUpdateManyInput = {
    auctionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
  }

  export type OpenOrderCreateInput = {
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
    User: UserCreateNestedOneWithoutOpenOrdersInput
  }

  export type OpenOrderUncheckedCreateInput = {
    openOrderId?: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type OpenOrderUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutOpenOrdersNestedInput
  }

  export type OpenOrderUncheckedUpdateInput = {
    openOrderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type OpenOrderCreateManyInput = {
    openOrderId?: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type OpenOrderUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type OpenOrderUncheckedUpdateManyInput = {
    openOrderId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    productName: string
    productDescription: string
    productImage: string
    User: UserCreateNestedOneWithoutProductsInput
    Category: CategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    productId?: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type ProductUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
    Category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyInput = {
    productId?: number
    userId: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type ProductUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type UserAddressCreateInput = {
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
    User: UserCreateNestedOneWithoutUserAddressesInput
  }

  export type UserAddressUncheckedCreateInput = {
    addressId?: number
    userId: number
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
  }

  export type UserAddressUpdateInput = {
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
    User?: UserUpdateOneRequiredWithoutUserAddressesNestedInput
  }

  export type UserAddressUncheckedUpdateInput = {
    addressId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserAddressCreateManyInput = {
    addressId?: number
    userId: number
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
  }

  export type UserAddressUpdateManyMutationInput = {
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserAddressUncheckedUpdateManyInput = {
    addressId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryCreateInput = {
    categoryName: string
    detail?: string | null
    Products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    categoryId?: number
    categoryName: string
    detail?: string | null
    Products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    Products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
    Products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    categoryId?: number
    categoryName: string
    detail?: string | null
  }

  export type CategoryUpdateManyMutationInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateManyInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WalletLogCreateInput = {
    transactionType: number
    value: number
    UserWallet: UserWalletCreateNestedOneWithoutWalletLogsInput
  }

  export type WalletLogUncheckedCreateInput = {
    walletLogId?: number
    walletId: number
    transactionType: number
    value: number
  }

  export type WalletLogUpdateInput = {
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
    UserWallet?: UserWalletUpdateOneRequiredWithoutWalletLogsNestedInput
  }

  export type WalletLogUncheckedUpdateInput = {
    walletLogId?: IntFieldUpdateOperationsInput | number
    walletId?: IntFieldUpdateOperationsInput | number
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type WalletLogCreateManyInput = {
    walletLogId?: number
    walletId: number
    transactionType: number
    value: number
  }

  export type WalletLogUpdateManyMutationInput = {
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type WalletLogUncheckedUpdateManyInput = {
    walletLogId?: IntFieldUpdateOperationsInput | number
    walletId?: IntFieldUpdateOperationsInput | number
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type UserPaymentCreateInput = {
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
    User: UserCreateNestedOneWithoutUserPaymentsInput
  }

  export type UserPaymentUncheckedCreateInput = {
    paymentId?: number
    userId: number
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
  }

  export type UserPaymentUpdateInput = {
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutUserPaymentsNestedInput
  }

  export type UserPaymentUncheckedUpdateInput = {
    paymentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPaymentCreateManyInput = {
    paymentId?: number
    userId: number
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
  }

  export type UserPaymentUpdateManyMutationInput = {
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPaymentUncheckedUpdateManyInput = {
    paymentId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserWalletCreateInput = {
    currentValue: number
    User: UserCreateNestedOneWithoutUserWalletsInput
    WalletLogs?: WalletLogCreateNestedManyWithoutUserWalletInput
  }

  export type UserWalletUncheckedCreateInput = {
    walletId?: number
    userId: number
    currentValue: number
    WalletLogs?: WalletLogUncheckedCreateNestedManyWithoutUserWalletInput
  }

  export type UserWalletUpdateInput = {
    currentValue?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutUserWalletsNestedInput
    WalletLogs?: WalletLogUpdateManyWithoutUserWalletNestedInput
  }

  export type UserWalletUncheckedUpdateInput = {
    walletId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    currentValue?: IntFieldUpdateOperationsInput | number
    WalletLogs?: WalletLogUncheckedUpdateManyWithoutUserWalletNestedInput
  }

  export type UserWalletCreateManyInput = {
    walletId?: number
    userId: number
    currentValue: number
  }

  export type UserWalletUpdateManyMutationInput = {
    currentValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserWalletUncheckedUpdateManyInput = {
    walletId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    currentValue?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationCreateInput = {
    citizenId: bigint | number
    verificationStatus: number
    picture: string
    User: UserCreateNestedOneWithoutVerificationsInput
  }

  export type VerificationUncheckedCreateInput = {
    verificationId?: number
    userId: number
    citizenId: bigint | number
    verificationStatus: number
    picture: string
  }

  export type VerificationUpdateInput = {
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutVerificationsNestedInput
  }

  export type VerificationUncheckedUpdateInput = {
    verificationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationCreateManyInput = {
    verificationId?: number
    userId: number
    citizenId: bigint | number
    verificationStatus: number
    picture: string
  }

  export type VerificationUpdateManyMutationInput = {
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    verificationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FavoriteCountOrderByAggregateInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
    favoriteItem?: SortOrder
  }

  export type FavoriteAvgOrderByAggregateInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
  }

  export type FavoriteMaxOrderByAggregateInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
    favoriteItem?: SortOrder
  }

  export type FavoriteMinOrderByAggregateInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
    favoriteItem?: SortOrder
  }

  export type FavoriteSumOrderByAggregateInput = {
    favoriteId?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserLogCountOrderByAggregateInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
  }

  export type UserLogAvgOrderByAggregateInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
  }

  export type UserLogMaxOrderByAggregateInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
  }

  export type UserLogMinOrderByAggregateInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
  }

  export type UserLogSumOrderByAggregateInput = {
    userLogId?: SortOrder
    userId?: SortOrder
    editType?: SortOrder
    editValue?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AuctionRelationFilter = {
    is?: AuctionWhereInput
    isNot?: AuctionWhereInput
  }

  export type AuctionLogCountOrderByAggregateInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
    timestamp?: SortOrder
  }

  export type AuctionLogAvgOrderByAggregateInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
  }

  export type AuctionLogMaxOrderByAggregateInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
    timestamp?: SortOrder
  }

  export type AuctionLogMinOrderByAggregateInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
    timestamp?: SortOrder
  }

  export type AuctionLogSumOrderByAggregateInput = {
    auctionLogId?: SortOrder
    userId?: SortOrder
    auctionId?: SortOrder
    bidPrice?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type FavoriteListRelationFilter = {
    every?: FavoriteWhereInput
    some?: FavoriteWhereInput
    none?: FavoriteWhereInput
  }

  export type UserLogListRelationFilter = {
    every?: UserLogWhereInput
    some?: UserLogWhereInput
    none?: UserLogWhereInput
  }

  export type AuctionListRelationFilter = {
    every?: AuctionWhereInput
    some?: AuctionWhereInput
    none?: AuctionWhereInput
  }

  export type OpenOrderListRelationFilter = {
    every?: OpenOrderWhereInput
    some?: OpenOrderWhereInput
    none?: OpenOrderWhereInput
  }

  export type UserAddressListRelationFilter = {
    every?: UserAddressWhereInput
    some?: UserAddressWhereInput
    none?: UserAddressWhereInput
  }

  export type UserPaymentListRelationFilter = {
    every?: UserPaymentWhereInput
    some?: UserPaymentWhereInput
    none?: UserPaymentWhereInput
  }

  export type UserWalletListRelationFilter = {
    every?: UserWalletWhereInput
    some?: UserWalletWhereInput
    none?: UserWalletWhereInput
  }

  export type VerificationListRelationFilter = {
    every?: VerificationWhereInput
    some?: VerificationWhereInput
    none?: VerificationWhereInput
  }

  export type AuctionLogListRelationFilter = {
    every?: AuctionLogWhereInput
    some?: AuctionLogWhereInput
    none?: AuctionLogWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuctionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OpenOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWalletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuctionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdOn?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdOn?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdOn?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AuctionCountOrderByAggregateInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type AuctionAvgOrderByAggregateInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type AuctionMaxOrderByAggregateInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type AuctionMinOrderByAggregateInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type AuctionSumOrderByAggregateInput = {
    auctionId?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    startPrice?: SortOrder
    minimumBid?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type OpenOrderCountOrderByAggregateInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type OpenOrderAvgOrderByAggregateInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type OpenOrderMaxOrderByAggregateInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type OpenOrderMinOrderByAggregateInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type OpenOrderSumOrderByAggregateInput = {
    openOrderId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ProductCountOrderByAggregateInput = {
    productId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    productId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    productId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    productId?: SortOrder
    userId?: SortOrder
    productName?: SortOrder
    categoryId?: SortOrder
    productDescription?: SortOrder
    productImage?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    productId?: SortOrder
    userId?: SortOrder
    categoryId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserAddressCountOrderByAggregateInput = {
    addressId?: SortOrder
    userId?: SortOrder
    province?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    postcode?: SortOrder
    address?: SortOrder
    note?: SortOrder
    receiverName?: SortOrder
    phone?: SortOrder
  }

  export type UserAddressAvgOrderByAggregateInput = {
    addressId?: SortOrder
    userId?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
  }

  export type UserAddressMaxOrderByAggregateInput = {
    addressId?: SortOrder
    userId?: SortOrder
    province?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    postcode?: SortOrder
    address?: SortOrder
    note?: SortOrder
    receiverName?: SortOrder
    phone?: SortOrder
  }

  export type UserAddressMinOrderByAggregateInput = {
    addressId?: SortOrder
    userId?: SortOrder
    province?: SortOrder
    district?: SortOrder
    subDistrict?: SortOrder
    postcode?: SortOrder
    address?: SortOrder
    note?: SortOrder
    receiverName?: SortOrder
    phone?: SortOrder
  }

  export type UserAddressSumOrderByAggregateInput = {
    addressId?: SortOrder
    userId?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type CategoryCountOrderByAggregateInput = {
    categoryId?: SortOrder
    categoryName?: SortOrder
    detail?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    categoryId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    categoryId?: SortOrder
    categoryName?: SortOrder
    detail?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    categoryId?: SortOrder
    categoryName?: SortOrder
    detail?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    categoryId?: SortOrder
  }

  export type UserWalletRelationFilter = {
    is?: UserWalletWhereInput
    isNot?: UserWalletWhereInput
  }

  export type WalletLogCountOrderByAggregateInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
  }

  export type WalletLogAvgOrderByAggregateInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
  }

  export type WalletLogMaxOrderByAggregateInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
  }

  export type WalletLogMinOrderByAggregateInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
  }

  export type WalletLogSumOrderByAggregateInput = {
    walletLogId?: SortOrder
    walletId?: SortOrder
    transactionType?: SortOrder
    value?: SortOrder
  }

  export type UserPaymentCountOrderByAggregateInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
    data1?: SortOrder
    data2?: SortOrder
    data3?: SortOrder
  }

  export type UserPaymentAvgOrderByAggregateInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
  }

  export type UserPaymentMaxOrderByAggregateInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
    data1?: SortOrder
    data2?: SortOrder
    data3?: SortOrder
  }

  export type UserPaymentMinOrderByAggregateInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
    data1?: SortOrder
    data2?: SortOrder
    data3?: SortOrder
  }

  export type UserPaymentSumOrderByAggregateInput = {
    paymentId?: SortOrder
    userId?: SortOrder
    paymentType?: SortOrder
  }

  export type WalletLogListRelationFilter = {
    every?: WalletLogWhereInput
    some?: WalletLogWhereInput
    none?: WalletLogWhereInput
  }

  export type WalletLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserWalletCountOrderByAggregateInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
  }

  export type UserWalletAvgOrderByAggregateInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
  }

  export type UserWalletMaxOrderByAggregateInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
  }

  export type UserWalletMinOrderByAggregateInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
  }

  export type UserWalletSumOrderByAggregateInput = {
    walletId?: SortOrder
    userId?: SortOrder
    currentValue?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
    picture?: SortOrder
  }

  export type VerificationAvgOrderByAggregateInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
    picture?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
    picture?: SortOrder
  }

  export type VerificationSumOrderByAggregateInput = {
    verificationId?: SortOrder
    userId?: SortOrder
    citizenId?: SortOrder
    verificationStatus?: SortOrder
  }

  export type UserCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoritesInput
    upsert?: UserUpsertWithoutFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoritesInput, UserUpdateWithoutFavoritesInput>, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutUserLogsInput = {
    create?: XOR<UserCreateWithoutUserLogsInput, UserUncheckedCreateWithoutUserLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserLogsNestedInput = {
    create?: XOR<UserCreateWithoutUserLogsInput, UserUncheckedCreateWithoutUserLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserLogsInput
    upsert?: UserUpsertWithoutUserLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserLogsInput, UserUpdateWithoutUserLogsInput>, UserUncheckedUpdateWithoutUserLogsInput>
  }

  export type UserCreateNestedOneWithoutAuctionLogsInput = {
    create?: XOR<UserCreateWithoutAuctionLogsInput, UserUncheckedCreateWithoutAuctionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionLogsInput
    connect?: UserWhereUniqueInput
  }

  export type AuctionCreateNestedOneWithoutAuctionLogsInput = {
    create?: XOR<AuctionCreateWithoutAuctionLogsInput, AuctionUncheckedCreateWithoutAuctionLogsInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutAuctionLogsInput
    connect?: AuctionWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutAuctionLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuctionLogsInput, UserUncheckedCreateWithoutAuctionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionLogsInput
    upsert?: UserUpsertWithoutAuctionLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuctionLogsInput, UserUpdateWithoutAuctionLogsInput>, UserUncheckedUpdateWithoutAuctionLogsInput>
  }

  export type AuctionUpdateOneRequiredWithoutAuctionLogsNestedInput = {
    create?: XOR<AuctionCreateWithoutAuctionLogsInput, AuctionUncheckedCreateWithoutAuctionLogsInput>
    connectOrCreate?: AuctionCreateOrConnectWithoutAuctionLogsInput
    upsert?: AuctionUpsertWithoutAuctionLogsInput
    connect?: AuctionWhereUniqueInput
    update?: XOR<XOR<AuctionUpdateToOneWithWhereWithoutAuctionLogsInput, AuctionUpdateWithoutAuctionLogsInput>, AuctionUncheckedUpdateWithoutAuctionLogsInput>
  }

  export type ProductCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type FavoriteCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type UserLogCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput> | UserLogCreateWithoutUserInput[] | UserLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLogCreateOrConnectWithoutUserInput | UserLogCreateOrConnectWithoutUserInput[]
    createMany?: UserLogCreateManyUserInputEnvelope
    connect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
  }

  export type AuctionCreateNestedManyWithoutUserInput = {
    create?: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput> | AuctionCreateWithoutUserInput[] | AuctionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutUserInput | AuctionCreateOrConnectWithoutUserInput[]
    createMany?: AuctionCreateManyUserInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type OpenOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput> | OpenOrderCreateWithoutUserInput[] | OpenOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpenOrderCreateOrConnectWithoutUserInput | OpenOrderCreateOrConnectWithoutUserInput[]
    createMany?: OpenOrderCreateManyUserInputEnvelope
    connect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
  }

  export type UserAddressCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput> | UserAddressCreateWithoutUserInput[] | UserAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAddressCreateOrConnectWithoutUserInput | UserAddressCreateOrConnectWithoutUserInput[]
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
  }

  export type UserPaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput> | UserPaymentCreateWithoutUserInput[] | UserPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentCreateOrConnectWithoutUserInput | UserPaymentCreateOrConnectWithoutUserInput[]
    createMany?: UserPaymentCreateManyUserInputEnvelope
    connect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
  }

  export type UserWalletCreateNestedManyWithoutUserInput = {
    create?: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput> | UserWalletCreateWithoutUserInput[] | UserWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserWalletCreateOrConnectWithoutUserInput | UserWalletCreateOrConnectWithoutUserInput[]
    createMany?: UserWalletCreateManyUserInputEnvelope
    connect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
  }

  export type VerificationCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
  }

  export type AuctionLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput> | AuctionLogCreateWithoutUserInput[] | AuctionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutUserInput | AuctionLogCreateOrConnectWithoutUserInput[]
    createMany?: AuctionLogCreateManyUserInputEnvelope
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type FavoriteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
  }

  export type UserLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput> | UserLogCreateWithoutUserInput[] | UserLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLogCreateOrConnectWithoutUserInput | UserLogCreateOrConnectWithoutUserInput[]
    createMany?: UserLogCreateManyUserInputEnvelope
    connect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
  }

  export type AuctionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput> | AuctionCreateWithoutUserInput[] | AuctionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutUserInput | AuctionCreateOrConnectWithoutUserInput[]
    createMany?: AuctionCreateManyUserInputEnvelope
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
  }

  export type OpenOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput> | OpenOrderCreateWithoutUserInput[] | OpenOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpenOrderCreateOrConnectWithoutUserInput | OpenOrderCreateOrConnectWithoutUserInput[]
    createMany?: OpenOrderCreateManyUserInputEnvelope
    connect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
  }

  export type UserAddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput> | UserAddressCreateWithoutUserInput[] | UserAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAddressCreateOrConnectWithoutUserInput | UserAddressCreateOrConnectWithoutUserInput[]
    createMany?: UserAddressCreateManyUserInputEnvelope
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
  }

  export type UserPaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput> | UserPaymentCreateWithoutUserInput[] | UserPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentCreateOrConnectWithoutUserInput | UserPaymentCreateOrConnectWithoutUserInput[]
    createMany?: UserPaymentCreateManyUserInputEnvelope
    connect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
  }

  export type UserWalletUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput> | UserWalletCreateWithoutUserInput[] | UserWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserWalletCreateOrConnectWithoutUserInput | UserWalletCreateOrConnectWithoutUserInput[]
    createMany?: UserWalletCreateManyUserInputEnvelope
    connect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
  }

  export type VerificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
  }

  export type AuctionLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput> | AuctionLogCreateWithoutUserInput[] | AuctionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutUserInput | AuctionLogCreateOrConnectWithoutUserInput[]
    createMany?: AuctionLogCreateManyUserInputEnvelope
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type FavoriteUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type UserLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput> | UserLogCreateWithoutUserInput[] | UserLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLogCreateOrConnectWithoutUserInput | UserLogCreateOrConnectWithoutUserInput[]
    upsert?: UserLogUpsertWithWhereUniqueWithoutUserInput | UserLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLogCreateManyUserInputEnvelope
    set?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    disconnect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    delete?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    connect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    update?: UserLogUpdateWithWhereUniqueWithoutUserInput | UserLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLogUpdateManyWithWhereWithoutUserInput | UserLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLogScalarWhereInput | UserLogScalarWhereInput[]
  }

  export type AuctionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput> | AuctionCreateWithoutUserInput[] | AuctionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutUserInput | AuctionCreateOrConnectWithoutUserInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutUserInput | AuctionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuctionCreateManyUserInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutUserInput | AuctionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutUserInput | AuctionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type OpenOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput> | OpenOrderCreateWithoutUserInput[] | OpenOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpenOrderCreateOrConnectWithoutUserInput | OpenOrderCreateOrConnectWithoutUserInput[]
    upsert?: OpenOrderUpsertWithWhereUniqueWithoutUserInput | OpenOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OpenOrderCreateManyUserInputEnvelope
    set?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    disconnect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    delete?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    connect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    update?: OpenOrderUpdateWithWhereUniqueWithoutUserInput | OpenOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OpenOrderUpdateManyWithWhereWithoutUserInput | OpenOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OpenOrderScalarWhereInput | OpenOrderScalarWhereInput[]
  }

  export type UserAddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput> | UserAddressCreateWithoutUserInput[] | UserAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAddressCreateOrConnectWithoutUserInput | UserAddressCreateOrConnectWithoutUserInput[]
    upsert?: UserAddressUpsertWithWhereUniqueWithoutUserInput | UserAddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    update?: UserAddressUpdateWithWhereUniqueWithoutUserInput | UserAddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAddressUpdateManyWithWhereWithoutUserInput | UserAddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[]
  }

  export type UserPaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput> | UserPaymentCreateWithoutUserInput[] | UserPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentCreateOrConnectWithoutUserInput | UserPaymentCreateOrConnectWithoutUserInput[]
    upsert?: UserPaymentUpsertWithWhereUniqueWithoutUserInput | UserPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPaymentCreateManyUserInputEnvelope
    set?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    disconnect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    delete?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    connect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    update?: UserPaymentUpdateWithWhereUniqueWithoutUserInput | UserPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPaymentUpdateManyWithWhereWithoutUserInput | UserPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPaymentScalarWhereInput | UserPaymentScalarWhereInput[]
  }

  export type UserWalletUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput> | UserWalletCreateWithoutUserInput[] | UserWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserWalletCreateOrConnectWithoutUserInput | UserWalletCreateOrConnectWithoutUserInput[]
    upsert?: UserWalletUpsertWithWhereUniqueWithoutUserInput | UserWalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserWalletCreateManyUserInputEnvelope
    set?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    disconnect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    delete?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    connect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    update?: UserWalletUpdateWithWhereUniqueWithoutUserInput | UserWalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserWalletUpdateManyWithWhereWithoutUserInput | UserWalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserWalletScalarWhereInput | UserWalletScalarWhereInput[]
  }

  export type VerificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    upsert?: VerificationUpsertWithWhereUniqueWithoutUserInput | VerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    set?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    disconnect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    delete?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    update?: VerificationUpdateWithWhereUniqueWithoutUserInput | VerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationUpdateManyWithWhereWithoutUserInput | VerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
  }

  export type AuctionLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput> | AuctionLogCreateWithoutUserInput[] | AuctionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutUserInput | AuctionLogCreateOrConnectWithoutUserInput[]
    upsert?: AuctionLogUpsertWithWhereUniqueWithoutUserInput | AuctionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuctionLogCreateManyUserInputEnvelope
    set?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    disconnect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    delete?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    update?: AuctionLogUpdateWithWhereUniqueWithoutUserInput | AuctionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuctionLogUpdateManyWithWhereWithoutUserInput | AuctionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type FavoriteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput> | FavoriteCreateWithoutUserInput[] | FavoriteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteCreateOrConnectWithoutUserInput | FavoriteCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteUpsertWithWhereUniqueWithoutUserInput | FavoriteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteCreateManyUserInputEnvelope
    set?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    disconnect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    delete?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    connect?: FavoriteWhereUniqueInput | FavoriteWhereUniqueInput[]
    update?: FavoriteUpdateWithWhereUniqueWithoutUserInput | FavoriteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteUpdateManyWithWhereWithoutUserInput | FavoriteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
  }

  export type UserLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput> | UserLogCreateWithoutUserInput[] | UserLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLogCreateOrConnectWithoutUserInput | UserLogCreateOrConnectWithoutUserInput[]
    upsert?: UserLogUpsertWithWhereUniqueWithoutUserInput | UserLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLogCreateManyUserInputEnvelope
    set?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    disconnect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    delete?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    connect?: UserLogWhereUniqueInput | UserLogWhereUniqueInput[]
    update?: UserLogUpdateWithWhereUniqueWithoutUserInput | UserLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLogUpdateManyWithWhereWithoutUserInput | UserLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLogScalarWhereInput | UserLogScalarWhereInput[]
  }

  export type AuctionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput> | AuctionCreateWithoutUserInput[] | AuctionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionCreateOrConnectWithoutUserInput | AuctionCreateOrConnectWithoutUserInput[]
    upsert?: AuctionUpsertWithWhereUniqueWithoutUserInput | AuctionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuctionCreateManyUserInputEnvelope
    set?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    disconnect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    delete?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    connect?: AuctionWhereUniqueInput | AuctionWhereUniqueInput[]
    update?: AuctionUpdateWithWhereUniqueWithoutUserInput | AuctionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuctionUpdateManyWithWhereWithoutUserInput | AuctionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
  }

  export type OpenOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput> | OpenOrderCreateWithoutUserInput[] | OpenOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpenOrderCreateOrConnectWithoutUserInput | OpenOrderCreateOrConnectWithoutUserInput[]
    upsert?: OpenOrderUpsertWithWhereUniqueWithoutUserInput | OpenOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OpenOrderCreateManyUserInputEnvelope
    set?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    disconnect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    delete?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    connect?: OpenOrderWhereUniqueInput | OpenOrderWhereUniqueInput[]
    update?: OpenOrderUpdateWithWhereUniqueWithoutUserInput | OpenOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OpenOrderUpdateManyWithWhereWithoutUserInput | OpenOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OpenOrderScalarWhereInput | OpenOrderScalarWhereInput[]
  }

  export type UserAddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput> | UserAddressCreateWithoutUserInput[] | UserAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAddressCreateOrConnectWithoutUserInput | UserAddressCreateOrConnectWithoutUserInput[]
    upsert?: UserAddressUpsertWithWhereUniqueWithoutUserInput | UserAddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAddressCreateManyUserInputEnvelope
    set?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    disconnect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    delete?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    connect?: UserAddressWhereUniqueInput | UserAddressWhereUniqueInput[]
    update?: UserAddressUpdateWithWhereUniqueWithoutUserInput | UserAddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAddressUpdateManyWithWhereWithoutUserInput | UserAddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[]
  }

  export type UserPaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput> | UserPaymentCreateWithoutUserInput[] | UserPaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentCreateOrConnectWithoutUserInput | UserPaymentCreateOrConnectWithoutUserInput[]
    upsert?: UserPaymentUpsertWithWhereUniqueWithoutUserInput | UserPaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPaymentCreateManyUserInputEnvelope
    set?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    disconnect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    delete?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    connect?: UserPaymentWhereUniqueInput | UserPaymentWhereUniqueInput[]
    update?: UserPaymentUpdateWithWhereUniqueWithoutUserInput | UserPaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPaymentUpdateManyWithWhereWithoutUserInput | UserPaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPaymentScalarWhereInput | UserPaymentScalarWhereInput[]
  }

  export type UserWalletUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput> | UserWalletCreateWithoutUserInput[] | UserWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserWalletCreateOrConnectWithoutUserInput | UserWalletCreateOrConnectWithoutUserInput[]
    upsert?: UserWalletUpsertWithWhereUniqueWithoutUserInput | UserWalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserWalletCreateManyUserInputEnvelope
    set?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    disconnect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    delete?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    connect?: UserWalletWhereUniqueInput | UserWalletWhereUniqueInput[]
    update?: UserWalletUpdateWithWhereUniqueWithoutUserInput | UserWalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserWalletUpdateManyWithWhereWithoutUserInput | UserWalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserWalletScalarWhereInput | UserWalletScalarWhereInput[]
  }

  export type VerificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput> | VerificationCreateWithoutUserInput[] | VerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationCreateOrConnectWithoutUserInput | VerificationCreateOrConnectWithoutUserInput[]
    upsert?: VerificationUpsertWithWhereUniqueWithoutUserInput | VerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationCreateManyUserInputEnvelope
    set?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    disconnect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    delete?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    connect?: VerificationWhereUniqueInput | VerificationWhereUniqueInput[]
    update?: VerificationUpdateWithWhereUniqueWithoutUserInput | VerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationUpdateManyWithWhereWithoutUserInput | VerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
  }

  export type AuctionLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput> | AuctionLogCreateWithoutUserInput[] | AuctionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutUserInput | AuctionLogCreateOrConnectWithoutUserInput[]
    upsert?: AuctionLogUpsertWithWhereUniqueWithoutUserInput | AuctionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuctionLogCreateManyUserInputEnvelope
    set?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    disconnect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    delete?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    update?: AuctionLogUpdateWithWhereUniqueWithoutUserInput | AuctionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuctionLogUpdateManyWithWhereWithoutUserInput | AuctionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuctionsInput = {
    create?: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionsInput
    connect?: UserWhereUniqueInput
  }

  export type AuctionLogCreateNestedManyWithoutAuctionInput = {
    create?: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput> | AuctionLogCreateWithoutAuctionInput[] | AuctionLogUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutAuctionInput | AuctionLogCreateOrConnectWithoutAuctionInput[]
    createMany?: AuctionLogCreateManyAuctionInputEnvelope
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
  }

  export type AuctionLogUncheckedCreateNestedManyWithoutAuctionInput = {
    create?: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput> | AuctionLogCreateWithoutAuctionInput[] | AuctionLogUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutAuctionInput | AuctionLogCreateOrConnectWithoutAuctionInput[]
    createMany?: AuctionLogCreateManyAuctionInputEnvelope
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAuctionsNestedInput = {
    create?: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuctionsInput
    upsert?: UserUpsertWithoutAuctionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuctionsInput, UserUpdateWithoutAuctionsInput>, UserUncheckedUpdateWithoutAuctionsInput>
  }

  export type AuctionLogUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput> | AuctionLogCreateWithoutAuctionInput[] | AuctionLogUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutAuctionInput | AuctionLogCreateOrConnectWithoutAuctionInput[]
    upsert?: AuctionLogUpsertWithWhereUniqueWithoutAuctionInput | AuctionLogUpsertWithWhereUniqueWithoutAuctionInput[]
    createMany?: AuctionLogCreateManyAuctionInputEnvelope
    set?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    disconnect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    delete?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    update?: AuctionLogUpdateWithWhereUniqueWithoutAuctionInput | AuctionLogUpdateWithWhereUniqueWithoutAuctionInput[]
    updateMany?: AuctionLogUpdateManyWithWhereWithoutAuctionInput | AuctionLogUpdateManyWithWhereWithoutAuctionInput[]
    deleteMany?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
  }

  export type AuctionLogUncheckedUpdateManyWithoutAuctionNestedInput = {
    create?: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput> | AuctionLogCreateWithoutAuctionInput[] | AuctionLogUncheckedCreateWithoutAuctionInput[]
    connectOrCreate?: AuctionLogCreateOrConnectWithoutAuctionInput | AuctionLogCreateOrConnectWithoutAuctionInput[]
    upsert?: AuctionLogUpsertWithWhereUniqueWithoutAuctionInput | AuctionLogUpsertWithWhereUniqueWithoutAuctionInput[]
    createMany?: AuctionLogCreateManyAuctionInputEnvelope
    set?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    disconnect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    delete?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    connect?: AuctionLogWhereUniqueInput | AuctionLogWhereUniqueInput[]
    update?: AuctionLogUpdateWithWhereUniqueWithoutAuctionInput | AuctionLogUpdateWithWhereUniqueWithoutAuctionInput[]
    updateMany?: AuctionLogUpdateManyWithWhereWithoutAuctionInput | AuctionLogUpdateManyWithWhereWithoutAuctionInput[]
    deleteMany?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOpenOrdersInput = {
    create?: XOR<UserCreateWithoutOpenOrdersInput, UserUncheckedCreateWithoutOpenOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOpenOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOpenOrdersInput, UserUncheckedCreateWithoutOpenOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenOrdersInput
    upsert?: UserUpsertWithoutOpenOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOpenOrdersInput, UserUpdateWithoutOpenOrdersInput>, UserUncheckedUpdateWithoutOpenOrdersInput>
  }

  export type UserCreateNestedOneWithoutProductsInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    upsert?: UserUpsertWithoutProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductsInput, UserUpdateWithoutProductsInput>, UserUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type UserCreateNestedOneWithoutUserAddressesInput = {
    create?: XOR<UserCreateWithoutUserAddressesInput, UserUncheckedCreateWithoutUserAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutUserAddressesNestedInput = {
    create?: XOR<UserCreateWithoutUserAddressesInput, UserUncheckedCreateWithoutUserAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAddressesInput
    upsert?: UserUpsertWithoutUserAddressesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAddressesInput, UserUpdateWithoutUserAddressesInput>, UserUncheckedUpdateWithoutUserAddressesInput>
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type UserWalletCreateNestedOneWithoutWalletLogsInput = {
    create?: XOR<UserWalletCreateWithoutWalletLogsInput, UserWalletUncheckedCreateWithoutWalletLogsInput>
    connectOrCreate?: UserWalletCreateOrConnectWithoutWalletLogsInput
    connect?: UserWalletWhereUniqueInput
  }

  export type UserWalletUpdateOneRequiredWithoutWalletLogsNestedInput = {
    create?: XOR<UserWalletCreateWithoutWalletLogsInput, UserWalletUncheckedCreateWithoutWalletLogsInput>
    connectOrCreate?: UserWalletCreateOrConnectWithoutWalletLogsInput
    upsert?: UserWalletUpsertWithoutWalletLogsInput
    connect?: UserWalletWhereUniqueInput
    update?: XOR<XOR<UserWalletUpdateToOneWithWhereWithoutWalletLogsInput, UserWalletUpdateWithoutWalletLogsInput>, UserWalletUncheckedUpdateWithoutWalletLogsInput>
  }

  export type UserCreateNestedOneWithoutUserPaymentsInput = {
    create?: XOR<UserCreateWithoutUserPaymentsInput, UserUncheckedCreateWithoutUserPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutUserPaymentsInput, UserUncheckedCreateWithoutUserPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPaymentsInput
    upsert?: UserUpsertWithoutUserPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPaymentsInput, UserUpdateWithoutUserPaymentsInput>, UserUncheckedUpdateWithoutUserPaymentsInput>
  }

  export type UserCreateNestedOneWithoutUserWalletsInput = {
    create?: XOR<UserCreateWithoutUserWalletsInput, UserUncheckedCreateWithoutUserWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWalletsInput
    connect?: UserWhereUniqueInput
  }

  export type WalletLogCreateNestedManyWithoutUserWalletInput = {
    create?: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput> | WalletLogCreateWithoutUserWalletInput[] | WalletLogUncheckedCreateWithoutUserWalletInput[]
    connectOrCreate?: WalletLogCreateOrConnectWithoutUserWalletInput | WalletLogCreateOrConnectWithoutUserWalletInput[]
    createMany?: WalletLogCreateManyUserWalletInputEnvelope
    connect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
  }

  export type WalletLogUncheckedCreateNestedManyWithoutUserWalletInput = {
    create?: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput> | WalletLogCreateWithoutUserWalletInput[] | WalletLogUncheckedCreateWithoutUserWalletInput[]
    connectOrCreate?: WalletLogCreateOrConnectWithoutUserWalletInput | WalletLogCreateOrConnectWithoutUserWalletInput[]
    createMany?: WalletLogCreateManyUserWalletInputEnvelope
    connect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUserWalletsNestedInput = {
    create?: XOR<UserCreateWithoutUserWalletsInput, UserUncheckedCreateWithoutUserWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserWalletsInput
    upsert?: UserUpsertWithoutUserWalletsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserWalletsInput, UserUpdateWithoutUserWalletsInput>, UserUncheckedUpdateWithoutUserWalletsInput>
  }

  export type WalletLogUpdateManyWithoutUserWalletNestedInput = {
    create?: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput> | WalletLogCreateWithoutUserWalletInput[] | WalletLogUncheckedCreateWithoutUserWalletInput[]
    connectOrCreate?: WalletLogCreateOrConnectWithoutUserWalletInput | WalletLogCreateOrConnectWithoutUserWalletInput[]
    upsert?: WalletLogUpsertWithWhereUniqueWithoutUserWalletInput | WalletLogUpsertWithWhereUniqueWithoutUserWalletInput[]
    createMany?: WalletLogCreateManyUserWalletInputEnvelope
    set?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    disconnect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    delete?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    connect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    update?: WalletLogUpdateWithWhereUniqueWithoutUserWalletInput | WalletLogUpdateWithWhereUniqueWithoutUserWalletInput[]
    updateMany?: WalletLogUpdateManyWithWhereWithoutUserWalletInput | WalletLogUpdateManyWithWhereWithoutUserWalletInput[]
    deleteMany?: WalletLogScalarWhereInput | WalletLogScalarWhereInput[]
  }

  export type WalletLogUncheckedUpdateManyWithoutUserWalletNestedInput = {
    create?: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput> | WalletLogCreateWithoutUserWalletInput[] | WalletLogUncheckedCreateWithoutUserWalletInput[]
    connectOrCreate?: WalletLogCreateOrConnectWithoutUserWalletInput | WalletLogCreateOrConnectWithoutUserWalletInput[]
    upsert?: WalletLogUpsertWithWhereUniqueWithoutUserWalletInput | WalletLogUpsertWithWhereUniqueWithoutUserWalletInput[]
    createMany?: WalletLogCreateManyUserWalletInputEnvelope
    set?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    disconnect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    delete?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    connect?: WalletLogWhereUniqueInput | WalletLogWhereUniqueInput[]
    update?: WalletLogUpdateWithWhereUniqueWithoutUserWalletInput | WalletLogUpdateWithWhereUniqueWithoutUserWalletInput[]
    updateMany?: WalletLogUpdateManyWithWhereWithoutUserWalletInput | WalletLogUpdateManyWithWhereWithoutUserWalletInput[]
    deleteMany?: WalletLogScalarWhereInput | WalletLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVerificationsInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVerificationsNestedInput = {
    create?: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationsInput
    upsert?: UserUpsertWithoutVerificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerificationsInput, UserUpdateWithoutVerificationsInput>, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type UserCreateWithoutFavoritesInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoritesInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
  }

  export type UserUpsertWithoutFavoritesInput = {
    update: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
    create: XOR<UserCreateWithoutFavoritesInput, UserUncheckedCreateWithoutFavoritesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoritesInput, UserUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserUpdateWithoutFavoritesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoritesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserLogsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserLogsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserLogsInput, UserUncheckedCreateWithoutUserLogsInput>
  }

  export type UserUpsertWithoutUserLogsInput = {
    update: XOR<UserUpdateWithoutUserLogsInput, UserUncheckedUpdateWithoutUserLogsInput>
    create: XOR<UserCreateWithoutUserLogsInput, UserUncheckedCreateWithoutUserLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserLogsInput, UserUncheckedUpdateWithoutUserLogsInput>
  }

  export type UserUpdateWithoutUserLogsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserLogsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuctionLogsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuctionLogsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuctionLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuctionLogsInput, UserUncheckedCreateWithoutAuctionLogsInput>
  }

  export type AuctionCreateWithoutAuctionLogsInput = {
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    User: UserCreateNestedOneWithoutAuctionsInput
  }

  export type AuctionUncheckedCreateWithoutAuctionLogsInput = {
    auctionId?: number
    userId: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
  }

  export type AuctionCreateOrConnectWithoutAuctionLogsInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutAuctionLogsInput, AuctionUncheckedCreateWithoutAuctionLogsInput>
  }

  export type UserUpsertWithoutAuctionLogsInput = {
    update: XOR<UserUpdateWithoutAuctionLogsInput, UserUncheckedUpdateWithoutAuctionLogsInput>
    create: XOR<UserCreateWithoutAuctionLogsInput, UserUncheckedCreateWithoutAuctionLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuctionLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuctionLogsInput, UserUncheckedUpdateWithoutAuctionLogsInput>
  }

  export type UserUpdateWithoutAuctionLogsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuctionLogsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuctionUpsertWithoutAuctionLogsInput = {
    update: XOR<AuctionUpdateWithoutAuctionLogsInput, AuctionUncheckedUpdateWithoutAuctionLogsInput>
    create: XOR<AuctionCreateWithoutAuctionLogsInput, AuctionUncheckedCreateWithoutAuctionLogsInput>
    where?: AuctionWhereInput
  }

  export type AuctionUpdateToOneWithWhereWithoutAuctionLogsInput = {
    where?: AuctionWhereInput
    data: XOR<AuctionUpdateWithoutAuctionLogsInput, AuctionUncheckedUpdateWithoutAuctionLogsInput>
  }

  export type AuctionUpdateWithoutAuctionLogsInput = {
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutAuctionsNestedInput
  }

  export type AuctionUncheckedUpdateWithoutAuctionLogsInput = {
    auctionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
  }

  export type ProductCreateWithoutUserInput = {
    productName: string
    productDescription: string
    productImage: string
    Category: CategoryCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutUserInput = {
    productId?: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type ProductCreateOrConnectWithoutUserInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductCreateManyUserInputEnvelope = {
    data: ProductCreateManyUserInput | ProductCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteCreateWithoutUserInput = {
    favoriteItem: string
  }

  export type FavoriteUncheckedCreateWithoutUserInput = {
    favoriteId?: number
    favoriteItem: string
  }

  export type FavoriteCreateOrConnectWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteCreateManyUserInputEnvelope = {
    data: FavoriteCreateManyUserInput | FavoriteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLogCreateWithoutUserInput = {
    editType: number
    editValue: number
  }

  export type UserLogUncheckedCreateWithoutUserInput = {
    userLogId?: number
    editType: number
    editValue: number
  }

  export type UserLogCreateOrConnectWithoutUserInput = {
    where: UserLogWhereUniqueInput
    create: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput>
  }

  export type UserLogCreateManyUserInputEnvelope = {
    data: UserLogCreateManyUserInput | UserLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuctionCreateWithoutUserInput = {
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    AuctionLogs?: AuctionLogCreateNestedManyWithoutAuctionInput
  }

  export type AuctionUncheckedCreateWithoutUserInput = {
    auctionId?: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutAuctionInput
  }

  export type AuctionCreateOrConnectWithoutUserInput = {
    where: AuctionWhereUniqueInput
    create: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput>
  }

  export type AuctionCreateManyUserInputEnvelope = {
    data: AuctionCreateManyUserInput | AuctionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OpenOrderCreateWithoutUserInput = {
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type OpenOrderUncheckedCreateWithoutUserInput = {
    openOrderId?: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type OpenOrderCreateOrConnectWithoutUserInput = {
    where: OpenOrderWhereUniqueInput
    create: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput>
  }

  export type OpenOrderCreateManyUserInputEnvelope = {
    data: OpenOrderCreateManyUserInput | OpenOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserAddressCreateWithoutUserInput = {
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
  }

  export type UserAddressUncheckedCreateWithoutUserInput = {
    addressId?: number
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
  }

  export type UserAddressCreateOrConnectWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressCreateManyUserInputEnvelope = {
    data: UserAddressCreateManyUserInput | UserAddressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPaymentCreateWithoutUserInput = {
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
  }

  export type UserPaymentUncheckedCreateWithoutUserInput = {
    paymentId?: number
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
  }

  export type UserPaymentCreateOrConnectWithoutUserInput = {
    where: UserPaymentWhereUniqueInput
    create: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput>
  }

  export type UserPaymentCreateManyUserInputEnvelope = {
    data: UserPaymentCreateManyUserInput | UserPaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserWalletCreateWithoutUserInput = {
    currentValue: number
    WalletLogs?: WalletLogCreateNestedManyWithoutUserWalletInput
  }

  export type UserWalletUncheckedCreateWithoutUserInput = {
    walletId?: number
    currentValue: number
    WalletLogs?: WalletLogUncheckedCreateNestedManyWithoutUserWalletInput
  }

  export type UserWalletCreateOrConnectWithoutUserInput = {
    where: UserWalletWhereUniqueInput
    create: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput>
  }

  export type UserWalletCreateManyUserInputEnvelope = {
    data: UserWalletCreateManyUserInput | UserWalletCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VerificationCreateWithoutUserInput = {
    citizenId: bigint | number
    verificationStatus: number
    picture: string
  }

  export type VerificationUncheckedCreateWithoutUserInput = {
    verificationId?: number
    citizenId: bigint | number
    verificationStatus: number
    picture: string
  }

  export type VerificationCreateOrConnectWithoutUserInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput>
  }

  export type VerificationCreateManyUserInputEnvelope = {
    data: VerificationCreateManyUserInput | VerificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuctionLogCreateWithoutUserInput = {
    bidPrice: number
    timestamp: Date | string
    Auction: AuctionCreateNestedOneWithoutAuctionLogsInput
  }

  export type AuctionLogUncheckedCreateWithoutUserInput = {
    auctionLogId?: number
    auctionId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type AuctionLogCreateOrConnectWithoutUserInput = {
    where: AuctionLogWhereUniqueInput
    create: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput>
  }

  export type AuctionLogCreateManyUserInputEnvelope = {
    data: AuctionLogCreateManyUserInput | AuctionLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
  }

  export type ProductUpdateManyWithWhereWithoutUserInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    productId?: IntFilter<"Product"> | number
    userId?: IntFilter<"Product"> | number
    productName?: StringFilter<"Product"> | string
    categoryId?: IntFilter<"Product"> | number
    productDescription?: StringFilter<"Product"> | string
    productImage?: StringFilter<"Product"> | string
  }

  export type FavoriteUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    update: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteCreateWithoutUserInput, FavoriteUncheckedCreateWithoutUserInput>
  }

  export type FavoriteUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteWhereUniqueInput
    data: XOR<FavoriteUpdateWithoutUserInput, FavoriteUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteScalarWhereInput
    data: XOR<FavoriteUpdateManyMutationInput, FavoriteUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteScalarWhereInput = {
    AND?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    OR?: FavoriteScalarWhereInput[]
    NOT?: FavoriteScalarWhereInput | FavoriteScalarWhereInput[]
    favoriteId?: IntFilter<"Favorite"> | number
    userId?: IntFilter<"Favorite"> | number
    favoriteItem?: StringFilter<"Favorite"> | string
  }

  export type UserLogUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLogWhereUniqueInput
    update: XOR<UserLogUpdateWithoutUserInput, UserLogUncheckedUpdateWithoutUserInput>
    create: XOR<UserLogCreateWithoutUserInput, UserLogUncheckedCreateWithoutUserInput>
  }

  export type UserLogUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLogWhereUniqueInput
    data: XOR<UserLogUpdateWithoutUserInput, UserLogUncheckedUpdateWithoutUserInput>
  }

  export type UserLogUpdateManyWithWhereWithoutUserInput = {
    where: UserLogScalarWhereInput
    data: XOR<UserLogUpdateManyMutationInput, UserLogUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLogScalarWhereInput = {
    AND?: UserLogScalarWhereInput | UserLogScalarWhereInput[]
    OR?: UserLogScalarWhereInput[]
    NOT?: UserLogScalarWhereInput | UserLogScalarWhereInput[]
    userLogId?: IntFilter<"UserLog"> | number
    userId?: IntFilter<"UserLog"> | number
    editType?: IntFilter<"UserLog"> | number
    editValue?: IntFilter<"UserLog"> | number
  }

  export type AuctionUpsertWithWhereUniqueWithoutUserInput = {
    where: AuctionWhereUniqueInput
    update: XOR<AuctionUpdateWithoutUserInput, AuctionUncheckedUpdateWithoutUserInput>
    create: XOR<AuctionCreateWithoutUserInput, AuctionUncheckedCreateWithoutUserInput>
  }

  export type AuctionUpdateWithWhereUniqueWithoutUserInput = {
    where: AuctionWhereUniqueInput
    data: XOR<AuctionUpdateWithoutUserInput, AuctionUncheckedUpdateWithoutUserInput>
  }

  export type AuctionUpdateManyWithWhereWithoutUserInput = {
    where: AuctionScalarWhereInput
    data: XOR<AuctionUpdateManyMutationInput, AuctionUncheckedUpdateManyWithoutUserInput>
  }

  export type AuctionScalarWhereInput = {
    AND?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    OR?: AuctionScalarWhereInput[]
    NOT?: AuctionScalarWhereInput | AuctionScalarWhereInput[]
    auctionId?: IntFilter<"Auction"> | number
    userId?: IntFilter<"Auction"> | number
    productId?: IntFilter<"Auction"> | number
    startPrice?: IntFilter<"Auction"> | number
    minimumBid?: IntFilter<"Auction"> | number
    start?: IntFilter<"Auction"> | number
    end?: IntFilter<"Auction"> | number
  }

  export type OpenOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OpenOrderWhereUniqueInput
    update: XOR<OpenOrderUpdateWithoutUserInput, OpenOrderUncheckedUpdateWithoutUserInput>
    create: XOR<OpenOrderCreateWithoutUserInput, OpenOrderUncheckedCreateWithoutUserInput>
  }

  export type OpenOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OpenOrderWhereUniqueInput
    data: XOR<OpenOrderUpdateWithoutUserInput, OpenOrderUncheckedUpdateWithoutUserInput>
  }

  export type OpenOrderUpdateManyWithWhereWithoutUserInput = {
    where: OpenOrderScalarWhereInput
    data: XOR<OpenOrderUpdateManyMutationInput, OpenOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OpenOrderScalarWhereInput = {
    AND?: OpenOrderScalarWhereInput | OpenOrderScalarWhereInput[]
    OR?: OpenOrderScalarWhereInput[]
    NOT?: OpenOrderScalarWhereInput | OpenOrderScalarWhereInput[]
    openOrderId?: IntFilter<"OpenOrder"> | number
    userId?: IntFilter<"OpenOrder"> | number
    productName?: StringFilter<"OpenOrder"> | string
    categoryId?: IntFilter<"OpenOrder"> | number
    productDescription?: StringFilter<"OpenOrder"> | string
    productImage?: StringFilter<"OpenOrder"> | string
  }

  export type UserAddressUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    update: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
    create: XOR<UserAddressCreateWithoutUserInput, UserAddressUncheckedCreateWithoutUserInput>
  }

  export type UserAddressUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAddressWhereUniqueInput
    data: XOR<UserAddressUpdateWithoutUserInput, UserAddressUncheckedUpdateWithoutUserInput>
  }

  export type UserAddressUpdateManyWithWhereWithoutUserInput = {
    where: UserAddressScalarWhereInput
    data: XOR<UserAddressUpdateManyMutationInput, UserAddressUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAddressScalarWhereInput = {
    AND?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[]
    OR?: UserAddressScalarWhereInput[]
    NOT?: UserAddressScalarWhereInput | UserAddressScalarWhereInput[]
    addressId?: IntFilter<"UserAddress"> | number
    userId?: IntFilter<"UserAddress"> | number
    province?: StringFilter<"UserAddress"> | string
    district?: StringFilter<"UserAddress"> | string
    subDistrict?: StringNullableFilter<"UserAddress"> | string | null
    postcode?: IntFilter<"UserAddress"> | number
    address?: StringNullableFilter<"UserAddress"> | string | null
    note?: StringNullableFilter<"UserAddress"> | string | null
    receiverName?: StringFilter<"UserAddress"> | string
    phone?: BigIntFilter<"UserAddress"> | bigint | number
  }

  export type UserPaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPaymentWhereUniqueInput
    update: XOR<UserPaymentUpdateWithoutUserInput, UserPaymentUncheckedUpdateWithoutUserInput>
    create: XOR<UserPaymentCreateWithoutUserInput, UserPaymentUncheckedCreateWithoutUserInput>
  }

  export type UserPaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPaymentWhereUniqueInput
    data: XOR<UserPaymentUpdateWithoutUserInput, UserPaymentUncheckedUpdateWithoutUserInput>
  }

  export type UserPaymentUpdateManyWithWhereWithoutUserInput = {
    where: UserPaymentScalarWhereInput
    data: XOR<UserPaymentUpdateManyMutationInput, UserPaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPaymentScalarWhereInput = {
    AND?: UserPaymentScalarWhereInput | UserPaymentScalarWhereInput[]
    OR?: UserPaymentScalarWhereInput[]
    NOT?: UserPaymentScalarWhereInput | UserPaymentScalarWhereInput[]
    paymentId?: IntFilter<"UserPayment"> | number
    userId?: IntFilter<"UserPayment"> | number
    paymentType?: IntFilter<"UserPayment"> | number
    data1?: StringNullableFilter<"UserPayment"> | string | null
    data2?: StringNullableFilter<"UserPayment"> | string | null
    data3?: StringNullableFilter<"UserPayment"> | string | null
  }

  export type UserWalletUpsertWithWhereUniqueWithoutUserInput = {
    where: UserWalletWhereUniqueInput
    update: XOR<UserWalletUpdateWithoutUserInput, UserWalletUncheckedUpdateWithoutUserInput>
    create: XOR<UserWalletCreateWithoutUserInput, UserWalletUncheckedCreateWithoutUserInput>
  }

  export type UserWalletUpdateWithWhereUniqueWithoutUserInput = {
    where: UserWalletWhereUniqueInput
    data: XOR<UserWalletUpdateWithoutUserInput, UserWalletUncheckedUpdateWithoutUserInput>
  }

  export type UserWalletUpdateManyWithWhereWithoutUserInput = {
    where: UserWalletScalarWhereInput
    data: XOR<UserWalletUpdateManyMutationInput, UserWalletUncheckedUpdateManyWithoutUserInput>
  }

  export type UserWalletScalarWhereInput = {
    AND?: UserWalletScalarWhereInput | UserWalletScalarWhereInput[]
    OR?: UserWalletScalarWhereInput[]
    NOT?: UserWalletScalarWhereInput | UserWalletScalarWhereInput[]
    walletId?: IntFilter<"UserWallet"> | number
    userId?: IntFilter<"UserWallet"> | number
    currentValue?: IntFilter<"UserWallet"> | number
  }

  export type VerificationUpsertWithWhereUniqueWithoutUserInput = {
    where: VerificationWhereUniqueInput
    update: XOR<VerificationUpdateWithoutUserInput, VerificationUncheckedUpdateWithoutUserInput>
    create: XOR<VerificationCreateWithoutUserInput, VerificationUncheckedCreateWithoutUserInput>
  }

  export type VerificationUpdateWithWhereUniqueWithoutUserInput = {
    where: VerificationWhereUniqueInput
    data: XOR<VerificationUpdateWithoutUserInput, VerificationUncheckedUpdateWithoutUserInput>
  }

  export type VerificationUpdateManyWithWhereWithoutUserInput = {
    where: VerificationScalarWhereInput
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyWithoutUserInput>
  }

  export type VerificationScalarWhereInput = {
    AND?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
    OR?: VerificationScalarWhereInput[]
    NOT?: VerificationScalarWhereInput | VerificationScalarWhereInput[]
    verificationId?: IntFilter<"Verification"> | number
    userId?: IntFilter<"Verification"> | number
    citizenId?: BigIntFilter<"Verification"> | bigint | number
    verificationStatus?: IntFilter<"Verification"> | number
    picture?: StringFilter<"Verification"> | string
  }

  export type AuctionLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuctionLogWhereUniqueInput
    update: XOR<AuctionLogUpdateWithoutUserInput, AuctionLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuctionLogCreateWithoutUserInput, AuctionLogUncheckedCreateWithoutUserInput>
  }

  export type AuctionLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuctionLogWhereUniqueInput
    data: XOR<AuctionLogUpdateWithoutUserInput, AuctionLogUncheckedUpdateWithoutUserInput>
  }

  export type AuctionLogUpdateManyWithWhereWithoutUserInput = {
    where: AuctionLogScalarWhereInput
    data: XOR<AuctionLogUpdateManyMutationInput, AuctionLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuctionLogScalarWhereInput = {
    AND?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
    OR?: AuctionLogScalarWhereInput[]
    NOT?: AuctionLogScalarWhereInput | AuctionLogScalarWhereInput[]
    auctionLogId?: IntFilter<"AuctionLog"> | number
    userId?: IntFilter<"AuctionLog"> | number
    auctionId?: IntFilter<"AuctionLog"> | number
    bidPrice?: IntFilter<"AuctionLog"> | number
    timestamp?: DateTimeFilter<"AuctionLog"> | Date | string
  }

  export type UserCreateWithoutAuctionsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuctionsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuctionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
  }

  export type AuctionLogCreateWithoutAuctionInput = {
    bidPrice: number
    timestamp: Date | string
    User: UserCreateNestedOneWithoutAuctionLogsInput
  }

  export type AuctionLogUncheckedCreateWithoutAuctionInput = {
    auctionLogId?: number
    userId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type AuctionLogCreateOrConnectWithoutAuctionInput = {
    where: AuctionLogWhereUniqueInput
    create: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput>
  }

  export type AuctionLogCreateManyAuctionInputEnvelope = {
    data: AuctionLogCreateManyAuctionInput | AuctionLogCreateManyAuctionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAuctionsInput = {
    update: XOR<UserUpdateWithoutAuctionsInput, UserUncheckedUpdateWithoutAuctionsInput>
    create: XOR<UserCreateWithoutAuctionsInput, UserUncheckedCreateWithoutAuctionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuctionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuctionsInput, UserUncheckedUpdateWithoutAuctionsInput>
  }

  export type UserUpdateWithoutAuctionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuctionsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AuctionLogUpsertWithWhereUniqueWithoutAuctionInput = {
    where: AuctionLogWhereUniqueInput
    update: XOR<AuctionLogUpdateWithoutAuctionInput, AuctionLogUncheckedUpdateWithoutAuctionInput>
    create: XOR<AuctionLogCreateWithoutAuctionInput, AuctionLogUncheckedCreateWithoutAuctionInput>
  }

  export type AuctionLogUpdateWithWhereUniqueWithoutAuctionInput = {
    where: AuctionLogWhereUniqueInput
    data: XOR<AuctionLogUpdateWithoutAuctionInput, AuctionLogUncheckedUpdateWithoutAuctionInput>
  }

  export type AuctionLogUpdateManyWithWhereWithoutAuctionInput = {
    where: AuctionLogScalarWhereInput
    data: XOR<AuctionLogUpdateManyMutationInput, AuctionLogUncheckedUpdateManyWithoutAuctionInput>
  }

  export type UserCreateWithoutOpenOrdersInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOpenOrdersInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOpenOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOpenOrdersInput, UserUncheckedCreateWithoutOpenOrdersInput>
  }

  export type UserUpsertWithoutOpenOrdersInput = {
    update: XOR<UserUpdateWithoutOpenOrdersInput, UserUncheckedUpdateWithoutOpenOrdersInput>
    create: XOR<UserCreateWithoutOpenOrdersInput, UserUncheckedCreateWithoutOpenOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOpenOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOpenOrdersInput, UserUncheckedUpdateWithoutOpenOrdersInput>
  }

  export type UserUpdateWithoutOpenOrdersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOpenOrdersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProductsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type CategoryCreateWithoutProductsInput = {
    categoryName: string
    detail?: string | null
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    categoryId?: number
    categoryName: string
    detail?: string | null
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type UserUpsertWithoutProductsInput = {
    update: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
  }

  export type UserUpdateWithoutProductsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    detail?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutUserAddressesInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserAddressesInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAddressesInput, UserUncheckedCreateWithoutUserAddressesInput>
  }

  export type UserUpsertWithoutUserAddressesInput = {
    update: XOR<UserUpdateWithoutUserAddressesInput, UserUncheckedUpdateWithoutUserAddressesInput>
    create: XOR<UserCreateWithoutUserAddressesInput, UserUncheckedCreateWithoutUserAddressesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAddressesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAddressesInput, UserUncheckedUpdateWithoutUserAddressesInput>
  }

  export type UserUpdateWithoutUserAddressesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAddressesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutCategoryInput = {
    productName: string
    productDescription: string
    productImage: string
    User: UserCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    productId?: number
    userId: number
    productName: string
    productDescription: string
    productImage: string
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type UserWalletCreateWithoutWalletLogsInput = {
    currentValue: number
    User: UserCreateNestedOneWithoutUserWalletsInput
  }

  export type UserWalletUncheckedCreateWithoutWalletLogsInput = {
    walletId?: number
    userId: number
    currentValue: number
  }

  export type UserWalletCreateOrConnectWithoutWalletLogsInput = {
    where: UserWalletWhereUniqueInput
    create: XOR<UserWalletCreateWithoutWalletLogsInput, UserWalletUncheckedCreateWithoutWalletLogsInput>
  }

  export type UserWalletUpsertWithoutWalletLogsInput = {
    update: XOR<UserWalletUpdateWithoutWalletLogsInput, UserWalletUncheckedUpdateWithoutWalletLogsInput>
    create: XOR<UserWalletCreateWithoutWalletLogsInput, UserWalletUncheckedCreateWithoutWalletLogsInput>
    where?: UserWalletWhereInput
  }

  export type UserWalletUpdateToOneWithWhereWithoutWalletLogsInput = {
    where?: UserWalletWhereInput
    data: XOR<UserWalletUpdateWithoutWalletLogsInput, UserWalletUncheckedUpdateWithoutWalletLogsInput>
  }

  export type UserWalletUpdateWithoutWalletLogsInput = {
    currentValue?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutUserWalletsNestedInput
  }

  export type UserWalletUncheckedUpdateWithoutWalletLogsInput = {
    walletId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    currentValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutUserPaymentsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserPaymentsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPaymentsInput, UserUncheckedCreateWithoutUserPaymentsInput>
  }

  export type UserUpsertWithoutUserPaymentsInput = {
    update: XOR<UserUpdateWithoutUserPaymentsInput, UserUncheckedUpdateWithoutUserPaymentsInput>
    create: XOR<UserCreateWithoutUserPaymentsInput, UserUncheckedCreateWithoutUserPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPaymentsInput, UserUncheckedUpdateWithoutUserPaymentsInput>
  }

  export type UserUpdateWithoutUserPaymentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPaymentsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserWalletsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    Verifications?: VerificationCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserWalletsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    Verifications?: VerificationUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserWalletsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserWalletsInput, UserUncheckedCreateWithoutUserWalletsInput>
  }

  export type WalletLogCreateWithoutUserWalletInput = {
    transactionType: number
    value: number
  }

  export type WalletLogUncheckedCreateWithoutUserWalletInput = {
    walletLogId?: number
    transactionType: number
    value: number
  }

  export type WalletLogCreateOrConnectWithoutUserWalletInput = {
    where: WalletLogWhereUniqueInput
    create: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput>
  }

  export type WalletLogCreateManyUserWalletInputEnvelope = {
    data: WalletLogCreateManyUserWalletInput | WalletLogCreateManyUserWalletInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserWalletsInput = {
    update: XOR<UserUpdateWithoutUserWalletsInput, UserUncheckedUpdateWithoutUserWalletsInput>
    create: XOR<UserCreateWithoutUserWalletsInput, UserUncheckedCreateWithoutUserWalletsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserWalletsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserWalletsInput, UserUncheckedUpdateWithoutUserWalletsInput>
  }

  export type UserUpdateWithoutUserWalletsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserWalletsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    Verifications?: VerificationUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WalletLogUpsertWithWhereUniqueWithoutUserWalletInput = {
    where: WalletLogWhereUniqueInput
    update: XOR<WalletLogUpdateWithoutUserWalletInput, WalletLogUncheckedUpdateWithoutUserWalletInput>
    create: XOR<WalletLogCreateWithoutUserWalletInput, WalletLogUncheckedCreateWithoutUserWalletInput>
  }

  export type WalletLogUpdateWithWhereUniqueWithoutUserWalletInput = {
    where: WalletLogWhereUniqueInput
    data: XOR<WalletLogUpdateWithoutUserWalletInput, WalletLogUncheckedUpdateWithoutUserWalletInput>
  }

  export type WalletLogUpdateManyWithWhereWithoutUserWalletInput = {
    where: WalletLogScalarWhereInput
    data: XOR<WalletLogUpdateManyMutationInput, WalletLogUncheckedUpdateManyWithoutUserWalletInput>
  }

  export type WalletLogScalarWhereInput = {
    AND?: WalletLogScalarWhereInput | WalletLogScalarWhereInput[]
    OR?: WalletLogScalarWhereInput[]
    NOT?: WalletLogScalarWhereInput | WalletLogScalarWhereInput[]
    walletLogId?: IntFilter<"WalletLog"> | number
    walletId?: IntFilter<"WalletLog"> | number
    transactionType?: IntFilter<"WalletLog"> | number
    value?: IntFilter<"WalletLog"> | number
  }

  export type UserCreateWithoutVerificationsInput = {
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductCreateNestedManyWithoutUserInput
    Favorites?: FavoriteCreateNestedManyWithoutUserInput
    UserLogs?: UserLogCreateNestedManyWithoutUserInput
    Auctions?: AuctionCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVerificationsInput = {
    userId?: number
    firstName: string
    lastName: string
    username: string
    email: string
    phone: string
    createdOn?: Date | string
    Products?: ProductUncheckedCreateNestedManyWithoutUserInput
    Favorites?: FavoriteUncheckedCreateNestedManyWithoutUserInput
    UserLogs?: UserLogUncheckedCreateNestedManyWithoutUserInput
    Auctions?: AuctionUncheckedCreateNestedManyWithoutUserInput
    OpenOrders?: OpenOrderUncheckedCreateNestedManyWithoutUserInput
    UserAddresses?: UserAddressUncheckedCreateNestedManyWithoutUserInput
    UserPayments?: UserPaymentUncheckedCreateNestedManyWithoutUserInput
    UserWallets?: UserWalletUncheckedCreateNestedManyWithoutUserInput
    AuctionLogs?: AuctionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVerificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
  }

  export type UserUpsertWithoutVerificationsInput = {
    update: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
    create: XOR<UserCreateWithoutVerificationsInput, UserUncheckedCreateWithoutVerificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerificationsInput, UserUncheckedUpdateWithoutVerificationsInput>
  }

  export type UserUpdateWithoutVerificationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVerificationsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    Products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    Favorites?: FavoriteUncheckedUpdateManyWithoutUserNestedInput
    UserLogs?: UserLogUncheckedUpdateManyWithoutUserNestedInput
    Auctions?: AuctionUncheckedUpdateManyWithoutUserNestedInput
    OpenOrders?: OpenOrderUncheckedUpdateManyWithoutUserNestedInput
    UserAddresses?: UserAddressUncheckedUpdateManyWithoutUserNestedInput
    UserPayments?: UserPaymentUncheckedUpdateManyWithoutUserNestedInput
    UserWallets?: UserWalletUncheckedUpdateManyWithoutUserNestedInput
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateManyUserInput = {
    productId?: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type FavoriteCreateManyUserInput = {
    favoriteId?: number
    favoriteItem: string
  }

  export type UserLogCreateManyUserInput = {
    userLogId?: number
    editType: number
    editValue: number
  }

  export type AuctionCreateManyUserInput = {
    auctionId?: number
    productId: number
    startPrice: number
    minimumBid: number
    start: number
    end: number
  }

  export type OpenOrderCreateManyUserInput = {
    openOrderId?: number
    productName: string
    categoryId: number
    productDescription: string
    productImage: string
  }

  export type UserAddressCreateManyUserInput = {
    addressId?: number
    province: string
    district: string
    subDistrict?: string | null
    postcode: number
    address?: string | null
    note?: string | null
    receiverName: string
    phone: bigint | number
  }

  export type UserPaymentCreateManyUserInput = {
    paymentId?: number
    paymentType: number
    data1?: string | null
    data2?: string | null
    data3?: string | null
  }

  export type UserWalletCreateManyUserInput = {
    walletId?: number
    currentValue: number
  }

  export type VerificationCreateManyUserInput = {
    verificationId?: number
    citizenId: bigint | number
    verificationStatus: number
    picture: string
  }

  export type AuctionLogCreateManyUserInput = {
    auctionLogId?: number
    auctionId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type ProductUpdateWithoutUserInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutUserInput = {
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyWithoutUserInput = {
    productId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUpdateWithoutUserInput = {
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUncheckedUpdateWithoutUserInput = {
    favoriteId?: IntFieldUpdateOperationsInput | number
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type FavoriteUncheckedUpdateManyWithoutUserInput = {
    favoriteId?: IntFieldUpdateOperationsInput | number
    favoriteItem?: StringFieldUpdateOperationsInput | string
  }

  export type UserLogUpdateWithoutUserInput = {
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserLogUncheckedUpdateWithoutUserInput = {
    userLogId?: IntFieldUpdateOperationsInput | number
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type UserLogUncheckedUpdateManyWithoutUserInput = {
    userLogId?: IntFieldUpdateOperationsInput | number
    editType?: IntFieldUpdateOperationsInput | number
    editValue?: IntFieldUpdateOperationsInput | number
  }

  export type AuctionUpdateWithoutUserInput = {
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
    AuctionLogs?: AuctionLogUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateWithoutUserInput = {
    auctionId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
    AuctionLogs?: AuctionLogUncheckedUpdateManyWithoutAuctionNestedInput
  }

  export type AuctionUncheckedUpdateManyWithoutUserInput = {
    auctionId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    startPrice?: IntFieldUpdateOperationsInput | number
    minimumBid?: IntFieldUpdateOperationsInput | number
    start?: IntFieldUpdateOperationsInput | number
    end?: IntFieldUpdateOperationsInput | number
  }

  export type OpenOrderUpdateWithoutUserInput = {
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type OpenOrderUncheckedUpdateWithoutUserInput = {
    openOrderId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type OpenOrderUncheckedUpdateManyWithoutUserInput = {
    openOrderId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type UserAddressUpdateWithoutUserInput = {
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserAddressUncheckedUpdateWithoutUserInput = {
    addressId?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserAddressUncheckedUpdateManyWithoutUserInput = {
    addressId?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    subDistrict?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: IntFieldUpdateOperationsInput | number
    address?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    receiverName?: StringFieldUpdateOperationsInput | string
    phone?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserPaymentUpdateWithoutUserInput = {
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPaymentUncheckedUpdateWithoutUserInput = {
    paymentId?: IntFieldUpdateOperationsInput | number
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPaymentUncheckedUpdateManyWithoutUserInput = {
    paymentId?: IntFieldUpdateOperationsInput | number
    paymentType?: IntFieldUpdateOperationsInput | number
    data1?: NullableStringFieldUpdateOperationsInput | string | null
    data2?: NullableStringFieldUpdateOperationsInput | string | null
    data3?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserWalletUpdateWithoutUserInput = {
    currentValue?: IntFieldUpdateOperationsInput | number
    WalletLogs?: WalletLogUpdateManyWithoutUserWalletNestedInput
  }

  export type UserWalletUncheckedUpdateWithoutUserInput = {
    walletId?: IntFieldUpdateOperationsInput | number
    currentValue?: IntFieldUpdateOperationsInput | number
    WalletLogs?: WalletLogUncheckedUpdateManyWithoutUserWalletNestedInput
  }

  export type UserWalletUncheckedUpdateManyWithoutUserInput = {
    walletId?: IntFieldUpdateOperationsInput | number
    currentValue?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationUpdateWithoutUserInput = {
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationUncheckedUpdateWithoutUserInput = {
    verificationId?: IntFieldUpdateOperationsInput | number
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationUncheckedUpdateManyWithoutUserInput = {
    verificationId?: IntFieldUpdateOperationsInput | number
    citizenId?: BigIntFieldUpdateOperationsInput | bigint | number
    verificationStatus?: IntFieldUpdateOperationsInput | number
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type AuctionLogUpdateWithoutUserInput = {
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    Auction?: AuctionUpdateOneRequiredWithoutAuctionLogsNestedInput
  }

  export type AuctionLogUncheckedUpdateWithoutUserInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionLogUncheckedUpdateManyWithoutUserInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    auctionId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionLogCreateManyAuctionInput = {
    auctionLogId?: number
    userId: number
    bidPrice: number
    timestamp: Date | string
  }

  export type AuctionLogUpdateWithoutAuctionInput = {
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAuctionLogsNestedInput
  }

  export type AuctionLogUncheckedUpdateWithoutAuctionInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuctionLogUncheckedUpdateManyWithoutAuctionInput = {
    auctionLogId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bidPrice?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyCategoryInput = {
    productId?: number
    userId: number
    productName: string
    productDescription: string
    productImage: string
  }

  export type ProductUpdateWithoutCategoryInput = {
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    productId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    productDescription?: StringFieldUpdateOperationsInput | string
    productImage?: StringFieldUpdateOperationsInput | string
  }

  export type WalletLogCreateManyUserWalletInput = {
    walletLogId?: number
    transactionType: number
    value: number
  }

  export type WalletLogUpdateWithoutUserWalletInput = {
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type WalletLogUncheckedUpdateWithoutUserWalletInput = {
    walletLogId?: IntFieldUpdateOperationsInput | number
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }

  export type WalletLogUncheckedUpdateManyWithoutUserWalletInput = {
    walletLogId?: IntFieldUpdateOperationsInput | number
    transactionType?: IntFieldUpdateOperationsInput | number
    value?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionCountOutputTypeDefaultArgs instead
     */
    export type AuctionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserWalletCountOutputTypeDefaultArgs instead
     */
    export type UserWalletCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserWalletCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteDefaultArgs instead
     */
    export type FavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserLogDefaultArgs instead
     */
    export type UserLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionLogDefaultArgs instead
     */
    export type AuctionLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuctionDefaultArgs instead
     */
    export type AuctionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuctionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpenOrderDefaultArgs instead
     */
    export type OpenOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpenOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserAddressDefaultArgs instead
     */
    export type UserAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserAddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WalletLogDefaultArgs instead
     */
    export type WalletLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WalletLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPaymentDefaultArgs instead
     */
    export type UserPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserWalletDefaultArgs instead
     */
    export type UserWalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserWalletDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationDefaultArgs instead
     */
    export type VerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}