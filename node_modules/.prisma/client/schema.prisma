datasource db {
  provider = "postgresql" // Specify the database provider
  url      = env("DATABASE_URL") // Use an environment variable for the database connection URL
}

// Generate the Prisma client
generator client {
  provider = "prisma-client-js"
}

model Favorite {
  favoriteId   Int    @id @default(autoincrement())
  userId       Int
  favoriteItem String // TEXT type in SQL can be represented as String in Prisma
  User         User   @relation(fields: [userId], references: [userId])
}

model UserLog {
  userLogId Int  @id @default(autoincrement())
  userId    Int
  editType  Int
  editValue Int
  User      User @relation(fields: [userId], references: [userId])
}

model AuctionLog {
  auctionLogId Int      @id @default(autoincrement())
  userId       Int
  auctionId    Int
  bidPrice     Int
  timestamp    DateTime // Use DateTime instead of TIMESTAMP
  User         User     @relation(fields: [userId], references: [userId])
  Auction      Auction  @relation(fields: [auctionId], references: [auctionId])
}

model User {
  userId        Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  username      String         @unique
  email         String         @unique
  phone         String         @unique
  createdOn     DateTime       @default(now())
  Products      Product[]
  Favorites     Favorite[]
  UserLogs      UserLog[]
  Auctions      Auction[]
  OpenOrders    OpenOrder[]
  UserAddresses UserAddress[]
  UserPayments  UserPayment[]
  UserWallets   UserWallet[]
  Verifications Verification[]
  AuctionLogs   AuctionLog[] // Add this line for the relation
}

model Auction {
  auctionId   Int          @id @default(autoincrement())
  userId      Int
  productId   Int
  startPrice  Int
  minimumBid  Int
  start       Int // Consider using DateTime for timestamps
  end         Int // Consider using DateTime for timestamps
  User        User         @relation(fields: [userId], references: [userId])
  AuctionLogs AuctionLog[] // Add this line for the relation
}

model OpenOrder {
  openOrderId        Int    @id @default(autoincrement())
  userId             Int
  productName        String // TEXT type in SQL can be represented as String in Prisma
  categoryId         Int
  productDescription String // TEXT type in SQL can be represented as String in Prisma
  productImage       String // TEXT type in SQL can be represented as String in Prisma
  User               User   @relation(fields: [userId], references: [userId])
}

model Product {
  productId          Int      @id @default(autoincrement())
  userId             Int
  productName        String // TEXT type in SQL can be represented as String in Prisma
  categoryId         Int
  productDescription String // TEXT type in SQL can be represented as String in Prisma
  productImage       String // TEXT type in SQL can be represented as String in Prisma
  User               User     @relation(fields: [userId], references: [userId])
  Category           Category @relation(fields: [categoryId], references: [categoryId])
}

model UserAddress {
  addressId    Int     @id @default(autoincrement())
  userId       Int
  province     String
  district     String
  subDistrict  String? // Optional
  postcode     Int
  address      String? // Optional for TEXT
  note         String? // Optional for TEXT
  receiverName String
  phone        BigInt
  User         User    @relation(fields: [userId], references: [userId])
}

model Category {
  categoryId   Int       @id @default(autoincrement())
  categoryName String
  detail       String? // Optional for TEXT
  Products     Product[]
}

model WalletLog {
  walletLogId     Int        @id @default(autoincrement())
  walletId        Int
  transactionType Int
  value           Int
  UserWallet      UserWallet @relation(fields: [walletId], references: [walletId])
}

model UserPayment {
  paymentId   Int     @id @default(autoincrement())
  userId      Int
  paymentType Int
  data1       String? // Optional for TEXT
  data2       String? // Optional for TEXT
  data3       String? // Optional for TEXT
  User        User    @relation(fields: [userId], references: [userId])
}

model UserWallet {
  walletId     Int         @id @default(autoincrement())
  userId       Int
  currentValue Int
  User         User        @relation(fields: [userId], references: [userId])
  WalletLogs   WalletLog[]
}

model Verification {
  verificationId     Int    @id @default(autoincrement())
  userId             Int
  citizenId          BigInt
  verificationStatus Int
  picture            String // TEXT type in SQL can be represented as String in Prisma
  User               User   @relation(fields: [userId], references: [userId])
}
